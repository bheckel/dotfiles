###############################################################################
#     Name: $HOME/code/misccode/oneliners
#
#  Summary: Programming and sysadmin fragments I've collected over the 
#           years.  Section-searchable via my gone.sh.
#
#           Comments are often written for searching, not proper English
#
#  Created: Tue 02 Jun 1998 10:52:11 (Bob Heckel)
# Modified: Mon 14 Nov 2016 14:56:41 (Bob Heckel)
###############################################################################

xxVIMxx START:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: {{{1

" Delete blank empty lines:
:g/^$/d
" Delete blank empty lines (including nonprinting characters):
:g/^\W\+$/d

" Thin out a file by deleting every other line:
:g/^/ + d 
" or to delete 2/3 of the file:
:g/^/ +, ++ d 

" Doublespace a file:
:%s/$/^M/g

" Insert a line, interleave, after each line in a file:
%s/$/^Mfoo bar/gc  <--^M is control char Ctr+v + Return

" For each line containing UPRD37, do this substitution
:g/UPRD37/s/rtpsduxrax/us1sduxray/c

" Delete line 10 and the 3 lines following it (total 4 lines deleted)
:10d 4

" Delete all spaces from the lines between, but not including, After and Replicant:
:g/After/+,/Replicant/- s: \+::g
 
" Delete all *lines* containing the word emacs.  E.g. 'Boot the emacs OS'
:g/\<emacs\>/d

" Delete all lines NOT containing any part of either of these words.  global command uses the OR operator \| (chaining alternation multiple conditions):
:g/^foo\|^bar/d

" Yank all lines containing Emily into buffer a (must use uppercase register or only get last yank). Clear register A before beginning:
:let @a='' | :g/Emily/y A
" Delete line above a blank line (e.g. last line in a block or paragraph) into register a:
:let @a='' | :g/^$/-1 d A

" Highlight, view, trailing whitespace:
:se hls | /\s\+$/

" Strip all trailing whitespace (especially useful in MVS SAS files):
:%s:\s\+$::gc

" Surround each word with single quotes.  E.g. foo, bar, baz, boom:
:%s/\(\w\+\)/'\1'/gc

" Find lines with 'Replicant', substitute.  Then copy those lines to the bottom of the file:
:g/Replicant/s/were/WERE NOT/ | copy $

" Move all lines containing foo to EOF:
:g/foo/ co $
" Copy the line (or lines) preceding foo to the last line in the file:
:g/foo/- copy $
" Go up 2 lines to do the copy:
:g/foo/-- co $

" Moves a section of text below another section of text.
:g/StartOfBlockToMove/,/NextBlockStartHere/-1 mo /MoveToAboveThisLine/-1

" Append all (potentially non-contiguous) lines containing foo to junk.txt.  Do NOT forget the '.' (current line address):
:g/foo/ . w >> t.txt
" or using marks:
:'a,'b g/foo/ . w >> t.txt

" Specify which lines, starting with Th, should have their e turned to E:
:,+15g/Th/s/e/E/gc

" Reverse all lines in a file (the zero is a noop where the matching lines, i.e. all of them, are continually placed):
:g/^/m0

" HTMLify (htmlize htmlify).  TODO requires 2 passes.  Misses first line:
:g/^$/+ s/^./<P>&/
:g/^$/- s:.$:&</P>:

" Show matches with context, nondestructive:
:g/replicant/z#.5|echo "==========" 

" Confirm paranoia global :g actions:
:g/global delete with prompt/ if input("del line? " . line(".") . ":" . getline(".") . " y/[n] ")=="y" | delete | endif

" Delete a block range, sort of like paragrep, if you can determine start and end of blocks (must use slashes):
:g/^\s\+The SA/;/^ProdSp/d

" Non-inclusive delete.  Only delete everything between these two lines:
:?firstword? 1,/lastword/ -1 d

" Chain two searches, find the first word peak appearing the following only AFTER the word am0908
/am0908/;/peak info

" Delete everything except these two strings:
:g!/SC04\/013-25\/60-24-01\|6ZM1234/d

" Insert specific lines of an external file into the top of your file.
:0r !head -n15 foo.txt
" Insert specific range of an external file at very top of your file.
:0r !awk'/start/,/end/{print}' foo.txt

" Delete everything prior to vim, keep the rest of the line:
:%s/.*\(vim.*\)/\1/gc

" Lowercase each letter in file (use u for uppercasing):
:%s/./\l&/gc
" Use L for lowercasing each line (use U for uppercasing):
:%s/.*/\l&/gc
" Lowercase or uppercase with \U all single line C-style comments:
:,$:s:\(/\*.*\*/\):\L\1:gc
" Lowercase a specific word (use \U for uppercasing):
:%s:\(LIST\):\L\1\E:gc
" or better
:%s:CODES:\L&\E:gc
" or shorter
:%s:CODES:\L&:gc
" Uppercase whole word
:0,$:s:foo:\U&:gc

" Restrict the pattern search and line marking to a stretch beginning three lines past the last previous line that starts with the string 'Exercises' and ending at the end of the file.  +++ means previous 3 lines: 
?^Exercises? +++ , $ g/foo/d

" Uppercase (a.k.a propcase rightcase titlecase smartcase) first letter of specific word:
:0,$:s:foo:\u&:gc
" Uppercase first letter of all words:
:%s:[^ ]*:\L\u&:g
" or propcase all capitalized words as well:
:%s:\([A-Za-z]\)\([A-Za-z-]*\):\u\1\L\2:g

" Search across linebreaks
/the\nword

" The classic search and replace across lines (eg replace Acme Distributors with Barrett...):
" First get instances not split over 2 lines---
:%s/Acme Distributors/Barrett and Sons/g
" Then get those split across newlines---
:g/Acme$/+ s/^Distributors/and Sons
:g/^and Sons/- s/Acme$/Barrett

" Fix Perl comment on current line to start with a capital letter and end with a period:
:s:# \(.\):# \U\1: | s:$:\.:

" Turn line containing only a url into an HREF
:0,$:s:\(.*\):<a href=\1>\1</A>:gc 

" Put angle brackets around an email address.  E.g. <rheckel@yaho.com> but not <bheckel@dsf.lonestr.org>
:0,$:s: \(\w\+@\w\+\.\w\+\)$: \<\1>:gc

" Write current line to file:
:. w foo.txt

" Write file to two different places (current dir and other) simultaneously:
:w | :w!/home/rheckel/tmp/%:t

" Quick date stamp on tail
:w %:t.YdS   <---assumes my strftime vim map is available

" Insert date between stem and tail extension (still have to type the tail)
:w~/projects/%:t:r.oct08.sas

" Mainframe uses stem basename only (INCLUDE.sas goes as INCLUDE):
:!bfp % 'bqh0.pgm.lib(%:t:r)'

" Reorder a comma separated (CSV) file:
:%s:\([^,]*\),\([^,]*\),\([^,]*\),\(.*\):\1,\3 \4,\2:
" Then remove the spaces:
s/[ \t]*,[ \t]*/,/g

" Change really, really, really or really, really, really, really... to very
:%s/\(really \)\(really \)*/very /

" Insert a literal null (ascii 0).  In insert mode:
Ctrl-v then 0

" If you know the column number which you want to act on (pipe here is vim magic not normal use of it):
" Replace columns 1 thru 70 with an X:
v70|rX
" or delete from current position to column 20
v20|d

" Find parts of a word like re or retu or return:
/\<re\%[turn]\>
" In code:
if wrd == "re" || wrd == "ret" || wrd == "retu" || wrd == "retur" ...do something... endif
" is now more cleanly represented as:
if match(wrd, "\\<re\\%[tur]\\>") > -1 ...do something...  endif

" Alternate unicode foreign character digraph method (better if don't know the code):
:dig         <---determine digraph's decimal code on (right side)
Ctrl-v 174   <---in insertmode e.g. copyright © symbol is 169
To do unicode, must do this first:
set encoding=utf-8
:se digraph
Then in insertmode (e.g copyright symbol):
C<BS>o   <---Produces ©
s<BS>s   <---Produces German ß 

" Show where all tabs, EOLs, control, hidden chars, etc are on a whole a file:
:se list

" Scroll scrollbind windows together vertical default:
:se scb   <---each window
" Horizontal scrollbind
:se sbo=hor
:se scb   <---each window

" Change width of vertically split windows:
:vert resize 80

" Vim view all instances of this keyword anywhere in file.  Think '[ is easier to reach on keyboard - lazy default show all'.
[I

" Recursively load files matching a pattern (like :e *.c but that doesn't work)
:args **/*.c
:argdo %s:'\\\\trpsawnv0312\\pucc:'C\:\\cygwin\\home\\rheckel\\projects\\datapost\\tmp:ge | update
" Bulk update substitute single quotes for double quotes in all open buffer files
:argdo g/libname/s/'/"/g | update
" Bulk update convert fully qualified path to SAS macrovariable in all open buffer files:
:argdo %s:C\:\\cygwin\\home\\bheckel\\VAIR_HFA:\&DIRROOT:ge | update

" Simple bulk update - must have used :args - e in ge keeps vim quiet if no match (c confirm doesn't appear to work-THERE IS NO CONFIRMATION), do a  :vimgrep /foo/g **/*.sas  first to verify what will change:
:argdo %s/foo/bar/ge | update

" Count words word count (returns e.g. '4 matches on 3 lines'):
:%:s:replicant:&:gn

" After you've forgotten to check file permissions:
:w !sudo tee %

" Search find a word and move cursor offset to one or more char positions from match.
/myword/b     <---cursor is on m (default -- beginning)
/myword/b+1   <---cursor is on y
/myword/e     <---cursor is on d -- end (good for "delete thru this char": d /.../e )
/myword/e-2   <---cursor is on o
/myword/e+    <---cursor is on first char after myword -- end plus 1 char

" Insert date on current line:
!!date

" Display color syntax:
:so $VIMRUNTIME/syntax/colortest.vim
" Display current syntax groups (best):
:so $VIMRUNTIME/syntax/hitest.vim

" Non-standard regex: \= in Vim is ? in normal regex-land.

" Write a specific range to a new textfile using marks a and b:
:'a,'b w newfile.txt

" Regex if two or more: \{2,}
" Regex match the previous atom from 0 to m times: \{,m}
" Regex match the previous atom from 0 to m times but as little as possible i.e. non-greedy: \{-,m}
" Regex match the previous atom n to m times but as little as possible i.e. non-greedy: \{-n,m}
" Non greedy search, match 3 to 5 a's but prefer the shortest match: /a\{-3,5}
" Non-greedy Vim search (use :se hls to see the results better):
/a.*b     <--- E.g. string axbxb greedy finds axbxb
/a.\{-}b  <---non-greedy finds axb
" Better non-greedy (e.g. foo|bar|baz returns foo).  Replace the first  .*  with  [^|]*:
:,$:s:\([^|]*\)|.*:\1:gc
:%s/[^|]*|.*/xxx/gc

" For non-greedy .* becomes '[^']* to return 'foo' and 'bar' from this string:
"   Match 'foo' and 'bar', including the quotes.
/'[^']*'

" Modeline.  Trailing ':' required for multiple set's.  /* vim: set tw=72 ft=sas ff=unix: */ # vim: set list syntax=off foldmarker=#{{{,#}}} foldmethod=marker tw=78:

" Create a unique filename based on seconds since the Epoch:
$ vi foo`date +%s`.txt

" Find two blank empty lines:
/^$\n^$

" Simultaneously turn flip change Yes to 1 and No to 0 in one swoop:
:0,$:s:No:0:g|0,$:s:Yes:1:g

" Use calculator inside Vim:
:!echo 4+3+6 | bc

" Search for either string Yes or string No (alternation):
/\(Yes\)\|\(No\)
" Replace both strings Yes and No with foo:
:0,$:s:\(Yes\)\|\(No\):foo:gc

" Encrypt file for first time: :X  then immediately :w (disable :set key=)

" Open file and place cursor at the search word ERROR or WARN:
vi -c '/^ERROR\|^WARN/' foo.txt
" Open file while copying and pasting (yanking and putting) the first line at the same time.
vi -c ':y | put' foo.txt
Open file to last line of file, set textwidth:
vim -c 'set tw=68 et' +  foo.txt
gvim -c 'set lines=20 columns=150'
vi -c 'map q :q!<CR>' foo.txt
vi -c 'map q :q!<CR>' -c 'map z noop' foo.txt

" Add non-standard help files to Vim Help 1- cd to the .txt 2- :helptags . 

" To read in fewer than all lines use the shell:
:r !head -n30 foo.txt

" To print from GUI W32 Vim:
:hardcopy

" Halve, cut in half the current file:
:%norm jdd

" Simple canonical increment depending on my custom .vimrc fn.  Ctrl-v highlight from your start num then:
vnoremap <C-A> :Inc<CR>
" Increment a left zero padded column of numbers (0000, 0100, 0200...), highlight them then:
:'<,'>Inc(100)  <---Ctrl-a won't maintain the left zeros
" Increment a pattern ('pattern' is usually '@').  My .vimrc default is just highlight and :Incpat but to override defaults:
:1,4call IncPattern('p@','s0','i1')  <--(p)attern, (s)tart at number, (i)ncrement by 

" Yank the one single character that cursor is on:
yl

" Create fold zf, open fold zo, close all zx, delete zd, :set foldcolumn=2

" Open all folds zR (think 'release').  Close all folds zM (think 'mash').

" netrw most common keystroke cycling - s sort, i ls details, r reverse sort order
" netrw plugin if vim already open (beware there is NO file locking here):
:Nwrite "daeb rheckel Tistyb4p tmp/testing/junk2z"
:Nread "mf bqh0 Tistyb4p pgm.trash(junk)"
" Netrw using vim with ssh:
$ vim scp://rheckel@192.94.73.4/html/index.html
$ vi scp://rsh8680@tpsh005//opt/QCServer/A.05.00/svr/files/Inspec_Lot-0108.log  # note no colon and double slash
$ vi scp://root@192.168.1.1:6699//var/log/messages

" Debug shell script by doing an echo line below declaration:
:,$:s:\(export \(\w\+\).*\):\1echo '\2 ' \$\2:gc
" Debug perl script:
:,$:s:\(my \(\S\+\).*\):\1print '\2 ', \2;:gc

" Convert file to html:
:runtime! syntax/2html.vim

" nl(1) number line replacement
:g/^/exec "s/^/".strpart(line(".")."    ", 0, 4)

" If vim -d is not available resort to:  $ diff -ybB -W160

" Sort all non-blank lines from here down (alternative to visual mode & '=' ):
:.,/^$/-1!sort

" Count bytes and words to cursor:
g Ctrl-g

" DEPRECATED. Edit all .c files containing the word frame_counter:
vim `grep -l frame_counter *.c`
" Recursive vim search
:vimgrep /frame_counter/ **/*.c

" Search Vim help:
:echo $VIMRUNTIME   # e.g. /usr/share/vim/vim74
" Better (no quotes or slashes used here like vimgrep !), case insensitive, :cn to iterate results
:helpgrep holy-grail\c
:vim[grep] /holy-grail/ /usr/share/vim/vim70/doc/*

" If you need to search but have several open files and don't want to shell out:
:vimgrep /select.*into/ *.plsql
:vimgrep /\CSELECT.*into/ *.plsql  " uppercase case sensitive search
" Then :cw or :cope to open results window
" Recursive search using star-star (slashes optional if not using a regex):
:vimgrep /select.*into/ **/*.plsql
" Picks up .vimrc's case sensitivity setting - override case-insensitive:
:vim Unexpected\C *.sas 
" Alternatively on systems with grep(1) - faster but won't recurse, use vimgrep:
:grep -i unexpected *.sas 

" Search and replace all open buffers interactively:
:bufdo %s/findme/changeme/gic

" Canonical search across open buffers (then :cw) if my :vvs vimgrep map fails because files aren't in pwd (may need to clear quickfix first :cexpr [] ):
:call setqflist([]) | bufdo grepadd! findme %

" Delete everything but the first 2 fields in a CSV
:%s:\(.\{-}\zs,\)\{2}.*::

" Canonical vim convert a file to HTML, opening the results in a new window:
:1,$TOhtml

" Crosshairs bullseye
:se cuc|se cul (or better :se cuc cul )

" View debug web page HTML/SAS Log output in Vim (using Vim instead of less)
w3m -dump 'http://rtpsawn321/sasweb/cgi-bin/broker.exe?_service=default&_program=LINKS.bobhmenu.sas&_debug=131&_server=rtpsawn321.corpnet1.com&_port=2738&_sessionid=HrYW7jQ7K52&pecORspec=Specification&menu=LACtlTblRd&Submit=++Read+LINKS+Specification+Table'|vim -R -c "se ft=saslog|map q :q<CR>" -

" Convert a comma delimited list to LIKE statements (TODO how to do IN('%ADVAIR%',...) ?
:,$:s:'\(\w\+\)[^,],:OR prod_nm LIKE '%\1%'^M:gc

" Swap tab-delimited field 5 with 4 position (use :se list to view these tabs):
,$:s:^\([^	]*\)	\([^	]*\)	\([^	]*\)	\([^	]*\)	\([^	]*\)	\(.*\):\1	\2	\3	\5	\4	\6	:gc

" Remove blocks, paragraphs of text from a series of files. Edit multiple files:
$ vim -c 'argdo /begin/+1,/end/-1g/^/d | update' *.c

" Slow and mostly useless sed replacement
$ vim -c 'argdo set nomore | g!/-2008/d | update' foo.csv

$ vim -u NONE -U NONE -N   <---no .vimrc and plugins ('clean' VIM)

Ctl-] and Ctl-t to navigate Vim Help links

" Insert timestamp at end of file
map ,d Go<CR><C-R>=strftime("%Y-%m-%d")<CR>

" Run vim commands from shell command line without opening file:
vim -c "s/hello/goodbye cruel/" -c "wq" fun.txt

" Matches any line meeting the constraints: 1) contains anything (.*) followed by ObjectName 2) starts (^) with something which isn't 'import' (\(import\)\@!)
/.*ObjectName\&^\(import\)\@!

Finds line longer than 80 characters:
/\%>80v.\+
" Determine length of longest maximum line (custom fn in my .vimrc):
:Maxl
:call MaxLineLen(1)

:DirDiff . //trpsawnv0312/CODE/
:DirDiff $y/datapost/code $z/datapost/code  ' not to be confused with vimdiff
" dp to 'diff put' change to the other window, arrow keys to nav (double arrow up to de-syntax)
To synch DirDiff: s  (in bottom pane with cursor ==>)
To synch DirDiff ranges of updates (internal DirDiff cmds like 'u' not working 2011-04-27):
:se nu
:5,42diffput

" Diff this vimdiff one existing buffer with its backup file:
:vert diffsplit foo.c~  (use :diffoff to reset when done)
:rightbelow vert diffsplit /my/file/tomodify/alwayson/rightside.txt

" Diff this vimdiff two existing buffers
:diffsplit then switch to/open other buffer and :diffthis then force any changes :diffupdate when done reset :diffoff (:diffthis to restart vimdiff)

" vimdiff keymaps
do == :diffget
dp == :diffput

" Synch whole file
:%diffput

" Run info(1) on word under cursor. Good demo of running an arbitrary command on the current word.
map ;p :exe ":!info ".expand("<cword>")<CR>

" Convert a tab-stopped file to a space-formatted file:
:set expandtab
:retab!

" Find all leading tabs and replace with spaces.  Since every character in submatch(0) will be a tab we can replace each character with four spaces.
:%s/^\t*/\=substitute(submatch(0), ".", "    ", "g")
" Put the tabs back over the 4 spaces:
:%s/^ \+/\=substitute(submatch(0), "....", "\t", "g")

:map :w :mksession! \| :write<CR>
" Do not forget to save folds etc.
:au BufWinLeave * mkview
" To avoid forgetting to mkview before exiting
:map :w :w\|mkview

" Insert a sequential list of numbers:
:put =range(11,15)
:for i in range(1,10) | put ='192.168.0.'.i | endfor

" Syntax highlight %THINGS% like that in a doc
syn match TODO "%\u\+%" containedIn=ALL

" Choose font.  Font tester: Illegal1 = O0
:set guifont=*
:se guifont=Andale_Mono:h9

Omnicomplete default key combination using syntax files in insert mode C-X C-O

" Turn all open buffers into tabs
:tab ball

" This foldmethod doesn't mod file
:se fdm=manual
:setlocal foldmethod=marker

" Virtual edit (ctrl-v extended)
:se ve=all

" Open in new tab
:tab h quickref

" Delete every line except lines starting with a 6:
g/^[^6]/d

" Modify every 6 except those in column 1 (do not use 'c' switch!)
g/^[^6]/s/6/7/g

" My bc function map
vnoremap <C-P> "ey:call CalcBC()<CR>

:args **/*.sas | args cfg/* | args **/*.map

vi -u NORC               <---skip .vimrc
vi -R foo.txt            <---readonly
vi -V2                   <---verify runtime startup etc
vi -S [Session.vim]      <---restore project folds, windows, etc. :mksession!
K                        <---on (K)eyword for help or man etc.
:helpgrep foo bar\c      <---then :cw[indow] to navigate results
:h quickref              <---C-] and C-t  ctags fwd back navigation
:h function-list
:mes[sage]               <---show previous messages, errors, etc.
:echo loaded_matchit     <---1 if plugin is loaded (and 'let loaded_matchit=1' is in matchit.vim)
:scriptnames             <---or verify all plugins and .vimrc location
:echo has('foo')         <---test existence of Vim variables
:echo &modifiable        <---boolean checking (scripts mainly)
:echo $VIMRUNTIME        <---determine Vim's location
:map z                   <---check if any z* keys are mapped
:so ~/.vimrc             <---reload me
:so $MYVIMRC             <---reload me
:let                     <---view all current Vim variable values
if &diff                 <---is diff running

" Chain two commands (unfortunately shortcircuits on 'Pattern not found'):
%s:<ExtractEnabled>1<\/ExtractEnabled>:<ExtractEnabled>0<\/ExtractEnabled>:g | :%s:<TransformEnabled>1<\/TransformEnabled>:<TransformEnabled>0<\/TransformEnabled>:g | :%s:<TrendEnabled>1<\/TrendEnabled>:<TrendEnabled>0<\/TrendEnabled>:g

" Chain global ex command regex
g!/10000000059062\|10000000060721/d

" Toggle XML flags
%s:<\(Extract\|Transform\)Enabled>1<:<\1Enabled>0<:gc

" display search results with their line numbers
:g/Line/#

" Highlight (via search hls) every other line greenbar
map ,<Tab> :set hls<CR>/\\n.*\\n/<CR>

" Add more options to an existing vim setting:
set sessionoptions+=buffers

" Buffer plugin close buffer
:Sbd

" Toggle vim setting:
nmap <silent> [[ :let &tabstop -= &tabstop > 1 ? 1 : 0<CR>

" Toggle a flag, creating it if it doesn't already exist:
let w:check_words = exists('w:check_words') ? !w:check_words : 1

" Sort unique without external uniq
:%sort u

" Force syntax coloring
:sy off | se ft=sas | so $VIMRUNTIME/syntax/sas.vim

" Undo by time:
:earlier 5m

:echom "Hello, " . "Vim concatenation world"
:mess

" List all files recursively:
:echo split(globpath('.', '**'), '\n')

" Convert disorganized quote separated mat codes ...foo('1234', '5678')bar... into a list:
:%s:\v\D+:^M:g | g/^$/d

echon '.vimrc: unknown language: (' mylang ') so using default Commentout style'

" From inside Gvim fix authentication problem at work:
:!c:/cygwin/bin/chmod 755 /cygdrive/u/temp/.vimxfer

" Vim fold folding
:se fdm=manual

if hostname() == 'yoniso' ... else ... endif

" Share ;w across network
scp bheckel@sas-01.twa.taeb.com://mnt/nfs/home/bheckel/tmp/.vimxfer ~/tmp 

# Share vimxfer file across machines:
alias xfer='scp ~/tmp/.vimxfer bheckel@talon3:tmp/.vimxfer'

# Set a shell variable:
WHEREISVIMRUNTIME=`vim -e -T dumb --cmd 'exe "set t_cm=\<C-M>"|echo $VIMRUNTIME|quit' | tr -d '\015' `

" Keep only the first 12 characters, delete characters after column position 12:
:s/^\(............\).*/\1/g

" scp diff across networks
vi -d /Drugs/update_shortname_ds.sas scp://bheckel@sas-01.mrk.ateb.com//Drugs/update_client_global_settings.sas

" Find two strings in any order:
/.*reboot\&.*box

" Quickfix  :cw

xxVIMxx END:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:


xxSASxx START:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: {{{1

http://support.sas.com/documentation/cdl/en/syntaxidx/68719/HTML/default/index.htm#/documentation/cdl/en/syntaxidx/68719/HTML/default/shared/start.htm
http://support.sas.com/documentation/onlinedoc/bookshelf/94/desktop.html
http://support.sas.com/documentation/cdl/en/lefunctionsref/67960/HTML/default/viewer.htm#n1mj2bizbsd7ktn1sf9lz111kku3.htm
http://support.sas.com/documentation/cdl/en/lestmtsref/67407/HTML/default/viewer.htm#p08st7rzfn0dgin1fml8hq40hlho.htm
http://support.sas.com/documentation/cdl/en/allprodsproc/68038/HTML/default/viewer.htm#procedures.htm
https://support.sas.com/rnd/base/ods/scratch/styles-tips.pdf
https://support.sas.com/rnd/base/ods/odsmarkup/TipSheet_ods_xl_xp.pdf

 /* See also ods_output_excel_mult_worksheet.sas */
proc contents data=sashelp._all_; run;

Missing value '.' always sort lower than char or num and ._ sorts lowest of all.  A blank space ' ' is MISSING to SAS but not to SQL where it is a character.
SAS Special Missing Value (.A thru .Z)
...else if comment = 'refused to answer' then age = .A;...
...if .z < labvalue < 3 then...
...if .z < round(labvalue,0.0001) < 3.15 then...

 /* Write all variables to the Log with "foo=" notation on one line: */
put _ALL_;  /* print PDV to Log */
put 'WARNING: ' _ALL_;
put 'WAR' 'NING: ' _ALL_;  /* better if you're searching a Log for real WARNINGs not a SOURCE or MPRINT: */
 /* Write all variables to the Log with "foo=" notation on one line per var: */
put (_ALL_)(=)
 /* Use anywhere but can't combine to one %put */
%put !!!; %put _USER_;

 /* Macro -- no quotes! */
%put You find yourself in a maze of %upcase(twisty SAS passages) all alike;
 /* In a DATA step -- quotes, no commas */
put 'fname is ' fname=;
put '!!!' _ALL_;

 /* Writes specific variables to the Log.  NO COMMAS. */
put varname1= varname2=;
 /* Automatic concatenation: */   
put 'here it is: ' varname1=;
 /* Carriage return in output: */
put;
put '0D'x;  /* s/b the same */
put '0D0A'x;  /* carriage return line feed */

Runaway GUI SAS killer:
/* '; * "; */; %mend; quit; run;
;*';*";*/;quit;run; /*Quote and Comment Killer*/


 /* Free up space - delete datasets */
proc datasets library=WORK; kill; QUIT;  /* !not just RUN; */
proc datasets NOlist library=l; delete patmod_all_cha rxfilldata_all_cha; run; quit;

 /* Column input with some missing data -- use TRUNCOVER List input with some
  * missing data at the rightmost edge -- use MISSOVER to keep SAS from trying
  * the next line (e.g. when you're not using @@ and want it to keep going)
  */

 /* Print list describe paths to SAS libname libraries: */
libname _ALL_ list;

 /* Clear libnames: */
libname _ALL_ clear;
libname L clear  /* only one libname allowed! */

 /* Determine where the WORK temp library is located on your system: */
libname WORK list;
 /* Determine where the WORK temp library is located on your system via macro: */
%let workpath=%sysfunc(pathname(work));

 /* Use more than one library, look in best first, then justok if not found: */
libname mylib (best justok);
 /* libname concatenation. Works on z/OS too. Only a WARNING: for idontexist/ */
libname CONCAT ('c:/temp' 'c:/cygwin/tmp/' 'c:/idontexist');

SAS debugger e.g. data foo / DEBUG; ...; run;

'07jul00'D              <---SAS date constant
'07JUL2000'D            <---SAS date constant
'04:15'T                <---SAS time constant (seconds since midnight 0-86400)
'04:15:66pm'T           <---SAS time constant (seconds since midnight 0-86400)
'07jul2000:04:15:00'DT  <---SAS datetime constant

SAS Functions work *within* an observation. SAS Procedures work *across* observations.

 /* Increment in macro.  Like yr++ */
%let YR1 = 2002;  %let YR2 = %eval(&YR1+1);

 /* Convert macrovariable (always string) to numeric: */
data _null_; age=input(symget('age'),12.); run;
%macro m;data _null_; age=input("&age"),12.); put age=; run;%mend;%m;  /* FAIL */

 /* SAS X command (ok in open code): */
x 'c:/util/vim/vim61/gvim.exe -c "set winsize=100 20" out.dat';

 /* Canonical generate random number between 1 and 5 */
randomnum = ceil(ranuni(0) * 5);
 /* Generate random number between 100 and 123: */
randomnum = 23*ranuni(-1) + 100;
 /* Generate random number between 0 and 1: */
randomnum = round(1*ranuni(-1) + 0);

Interactive SAS on OS/390 (from TSO command line):
==> sas options('dms yearcutoff=1905')

Using 1920 default: 00...19 becomes 2000...2019

//* Use your own SAS System Options in JCL:
//STEP1     EXEC SAS,CONFIG='BQH0.PGM.DEV(MYCONFIG)',TIME=100, 
//          OPTIONS='MEMSIZE=0'                                

 /* Set option from command line: */
$ /sas/sashome/SASFoundation/9.4/sas -memsize 0 t.sas  /* t.sas is  proc options option=MEMSIZE value; run; */

 /* Sets the auto variable myfname, not the keyword FILENAME, to the physical name of the currently opened file! */
infile IN FILENAME=myfname;  /* lvalue assigns rvalue ! */

 /* SAS hexadecimal tab  '09'x  or  '05'x  or  '3132,3334'x  */
put aprclass '09'x '09'x APR_Count;

 /* It's an alphabetical character isalpha: */
if ship GE 'a' and ship LE 'z' then delete;
 /* It's a numeric character isnum: */
if indx GE '0' and indx LE '9' then delete;
 /* Keep only numbers from a mixed CHAR variable: */
isnum = verify(compress(storeid), '.0123456789'); if isnum eq 0 then put "pure numerical";

 /* ltrim() and rtrim() don't exist in SAS so use strip() or: */
trim(left(put(numericsasvari,F4.)));

 /* Distributive range input statement: */
input @166 (r1-r15) ($CHAR1.);
input @166 (c1-c15) (:$1.);

 /* Distributive put statement */
put (ymd_no_ampm mdy_ampm ymd_ampm mdy_noampm)(= DATETIME18.);
put one_two= / trip= / (cat1-cat4)(= /);  /* slash insert newlines */

 /* Distributive length statement */
length foo $2  car1-car4 $9;

 /* %global is distributive */
%global foo bar;

 /* Super input statement uses the data itself to determine column position */
input @'IP Address' n1 n2 n3 n4 3.;

 /* Move cursor one to the left, put a backspace, to squeeze colon against word: */
put @1 myname +(-1)":"  @30 myvalue;

 /* Multiple datasets on the set statement: */
data work.all; set %do j=1 %to 3; work.tmp&j %end; ; run;

 /* Get current year date: */
call symput("CYR", substr(put("&sysdate9"d,mmddyy10.),7,4));

 /* Increment a symput generated macrovariable: */
call symput('RUNME'||compress(put(_N_,5.)), executemacro);

 /* Wild equal colon -- same as using LIKE 'mormer%' in SQL: */
set t(where=(region in:('As')));
if foo =: 'mormer';

 /* Uppercase a macrovariable: */
%let the_type=%upcase(&the_type);

 /* Mainframe filename */
filename OUT "DWJ.DCFET03.D04NOV03" DISP=NEW UNIT=TEMP LRECL=229 BLKSIZE=229 RECFM=FB;

 /* Fixed length file.  Pads to 70. */
filename f 'c:/temp/foo1' lrecl=70 recfm=f;
 /* Variable length file.  No padding. */
filename f 'c:/temp/foo2' lrecl=70 recfm=v;

 /* Today's SAS epoch date (range is 1582 - 20000 AD). Convert unix to SAS epoch date: */
$ date +%s |awk '{d=int($1/86400+3653)} END {print d}'

 /* Left zero pad a number: */
zerocert=put(certificate, Z6.);
select distinct put(zipcode,z5.) as zipcode ...

 /* Jumpstart proc report then tweak autogenerated code: */
proc report data=sashelp.class LIST NOEXEC; run;

 /* Reorder the variables in a dataset (alternatively use proc report): */
retain first second third;

 /* Create a C-like null terminated string: */
substr(mystr, mylen+1) = '00'x

 /* Name of this currently running SAS program file: (like $0 in shell): */
%put basename only of currently running program: &SYSPROCESSNAME
%put NOTE: fully qualified name of the currently this program running: %let thispgm=%sysfunc(getoption(SYSIN));

 /* CLASS categorical variables:  almost always stored as chars, identify classes (discrete categories) on which calculations are done.  E.g. gender, country, state, zip.
  *
  * VAR analysis variables:  numbers, usually continuous, appropriate for calculating averages, sums, etc.  E.g. salary, number of orders.
  */

 /* Pick off 'MOR' from the suffix */
%let FN=BF19.FIX0342.MORMER1; %let EVT=%substr(%scan(&FN, 3, '.'), 1, 3);

 /* SAS exponentiation */
x = 2**3;

 /* Syntax check program (compile) without running or overwriting files (for debugging): */
options obs=0 NOreplace;
 /* Syntax check datastep (compile) without running or overwriting files (for debugging): */
run cancel;

 /* Do to first obs: */
if _N_ eq 1 then put 'data step has BEGUN EXECUTING once';
 /* Do to last obs: */
set l.sumventolin01a (obs=10) end=e; if e then put 'footer';
 /* Caution: _N_ is only counting begun iterations of the implied loop of the dataset, NOT the observations.  */

Subsetting IFs can appear only in DATA steps but WHERE statements can appear in DATA or PROC steps.

 /* Run SAS from commandline without my ~/bin/sasrun */
$ sas -sysin t.sas; cat t.log
$ sas -sysin t.sas; vim -o -c '/^ERROR.*:\|^WARNING:/' t.log t.lst
" Run a .sas from Vim on an alien box
:!/cygdrive/c/Program\ Files\/SAS\ Instititute/SAS/V8/sas.exe -sysin %
:!/cygdrive/c/Program\ Files\/SAS\ Instititute/SAS/V8/sas.exe -sysin % -altlog %.log -altprint %.lst

 /* Run Version 9 V9 SAS from commandline */
c:/PROGRA~1/SAS/SASFoundation/9.2/sas.exe -sysin t.sas && vi *.l??

 /* String foo is available in &SYSPARM */
$ c:/PROGRA~1/SASINS~1/SAS/V8/sas.exe -nosplash -sysin t.sas -altlog Apr.log -sysparm foo
 /* Passing a comma separated list will require e.g.
  * %let samplist=%scan(%bquote(&SYSPARM), 2, '_'); 
  * in the code:
  */
$ date;c:/PROGRA~1/SASINS~1/SAS/V8/sas.exe -sysin indsumresCI.sas -altlog 01.log -sysparm 01_231973,231591,231476
 /* If you can't edit the command line, use these in start/end of the code to save Log and List (NEW to avoid append): */
proc printto LOG="D:\foo.log" NEW PRINT="D:\foo.lst" NEW; run; ...code... proc printto;run;
 /* Keep GUI open during the run.  Instead of -sysin */
c:/PROGRA~1/SASINS~1/SAS/V8/sas.exe -autoexec "\\trpsawnv0312\pucc\Serevent_Diskus\CODE\0_MAIN_Serevent_Diskus.sas" -sysparm "\\trpsawnv0312\pucc\Serevent_Diskus\CODE"

 /* Suppress discard SAS List .lst */
c:\PROGRA~1\SASINS~1\SAS\V8\sas.exe -sysin t.sas -log t.log -NOterminal -NOprint

 /* Communicate with SAS in a Windows .bat batchfile */
set sasexe="D:\SAS Institute\SAS\V8\sas.exe"
set dpv2root=E:\DataPost
set sascode=%dpv2root%\code
%sasexe% -WORK 'c:\temp\sas' -nosplash -sysin %sascode%\DataPost_Transform.sas -log %sascode%\DataPost_Transform.log -print %sascode%\DataPost_Transform.lst -sysparm "%dpv2root%"

# Cygwin quick dataset check:
echo 'options ls=180;proc contents data=?;run;' >| t$$.sas; C:/PROGRA~1/SASHome/SASFoundation/9.3/sas.exe -sysin t$$.sas && cat t$$.lst && rm t$$.???
echo "options ps=max;libname l '//Rtpdsntp032/DataPostArchive/Ventolin_HFA/OUTPUT_COMPILED_DATA';proc freq data=l.ven60_analytical_individuals;table mfg_batch test;run;" >| u:/tmp/t.sas && c:/PROGRA~1/SASINS~1/SAS/V8/sas.exe -sysin 'u:\tmp\t.sas' -log 'u:\tmp\t.log' -print 'u:\tmp\t.lst'; cat 'u:\tmp\t.lst'

 /* Describe option settings in effect: (also sr ~/code/sas/options.cmdl.sas linesize) */
proc options option=&SYSPARM define value; run;

format vs informat: Whereas a SAS format converts an underlying data representation to a visual representation, an informat converts a visual representation into an underlying data representation.  Formats modify the external representation of a value (preexisting in a ds).  Informats convert raw data into SAS representations (to be put in a ds).

 /* Current dataset macrovariable formatted to "LIBRARY  DSNAME" */
&SYSDSN

 /* Print quotes around a variable, in this case, myvar */
put "!!! found quoted " myvar $QUOTE.;

 /* Check if a file has a SAS extension */
if index(lowcase(myfile),'.sas') > 0;  /* true */
if scan(lowcase(myfile),-1,'.') eq 'sas'

 /* Portability -- Use this JCL for SAS filename on MF: */
//IN   DD DISP=SHR,DSN=BF19.MOX0401.NATMER
 /* vs. this JCL-less method on the PC via Connect: */
filename IN 'BF19.MOX0401.NATMER' DISP=SHR;

 /* Include code plus display source w/o an options statment (%include is synchronous): */
%include 'tabdelim.sas' / SOURCE2;

 /* Find max using a SAS range: */
retain hi; hi=max(hi, DatastepVarWeWantMaxFrom);
 /* Find max using a SAS range: */
if max(of one1-one3) < 5 then ...

 /* SAS array declare and initialize */
array starr{*} $2 st1-st57 ('AL', 'AK', 'AR', 'AZ', 'CA', 'CO');
 /* SAS array access */
do i=1 to dim(starr); otherarr{i} = starr{i}; end;

 /* Get the HOME environment variables: */
%let myhome=%sysget(HOME); %put _all_; %let sasroot=%sysget(SASROOT); %put &=SASROOT;
%put %sysget(SASHOME) %sysget(SASROOT);

 /* Substring (if argument might contain a special character or mnemonic operator use %qsubstr()) */
%put %substr(2168, 3, 2);
data _null_; x=substr('2168', 3, 2); put x=; run;

 /* Good demo sample template dataset: */
proc print data=SASHELP.shoes (obs=10); var region stores sales returns; run;

 /* Macro with parameters parms: */
%macro Foo(bar, baz); %put &bar and &baz; %mend; %Foo(test ing, me);
%macro Foo(bar=, baz=); %put &bar and &baz; %mend; %Foo(bar=test ing, baz=me);
 /* Named macro call with good default parameters: */
%macro Foo(data=_LAST_, by=, vars=, out=_DATA_);

 /* Preserve leading whitespace ($2. would not) */
input foo $CHAR2.;

 /* Suppress any input errors in SAS Log and keep _ERROR_=0 */
input name $8.  number  ??;

 /* Operating system specific option: */
%macro OS; %if &SYSSCP eq OS %then %str(options NOs99nomig;); %mend; %OS

 /* Thin out cleanout SAS Log, can use \| to get >1 line at a time */
:g/\s*SYMB\|\s*MLOG\|\d\+\s*THE SAS/d

 /* Small shrink dataset to 5% random sample sampling for debugging huge ds to subset dataset (different result each run): */
data t2; set t; if ranuni(0) <= .05; run;

 /* Don't keep var with NULLs */
if sex = '00'x||'00'x||'00'x then delete;

 /* Most efficient block size on mainframe: Moderate to large DASD-stored datasets s/b blocked at half a track. Small ds and catalogs s/b blocked at 6144 bytes. Tape 32760 bytes. */
options blksize(dasd)=half;

 /* Perl regex in SAS */
data; set SASHELP.shoes; if _N_ eq 1 then rc=prxparse("/ica$/"); retain rc; if prxmatch(rc,region); run;

%if not %index(&endyr, 20) %then %abort;
data _NULL_; abort abend 008; run;

 /* macro in() for macro */
%if %sysfunc(indexw(AK AR VI WV, &STATE)) %then %do; %put is in list; %end;
 /* macro not in for macro multiple values */
%if not %sysfunc(indexw(&RANGEVARS, &VAR)) %then %do; %put is NOT in list; %end;

 /* Remove trailing dot */
myvar = trim(translate(myvar, '', '.'));

 /* Simple datetime stamp: */
dts=put(datetime(),DATETIME16.);
%put %sysfunc(datetime(),DATETIME.);  /* same */
%put %sysfunc(putn(%sysfunc(datetime()),DATETIME.));  /* same, useless */

 /* Time a job */
%let _start=%sysfunc(time()); %put NOTE: %sysfunc(getoption(SYSIN)) started: %sysfunc(putn(%sysfunc(datetime()),DATETIME.));
  ...code...
%put NOTE: SYSCC: &SYSCC (%sysfunc(getoption(SYSIN)) ended: %sysfunc(putn(%sysfunc(datetime()),DATETIME.)) / minutes elapsed: %sysevalf((%sysfunc(time())-&_start)/60));

 /* Quick sample dummy dataset */
data x; do i=1 to 5; do j=20 to 25; do k=100 to 101; output; end; end; end; run;

 /* Create an empty dataset */
data zeroobs_7vars; set SASHELP.shoes (obs=0); run;
data zeroobs_7vars; set SASHELP.shoes; stop; run;
data zeroobs_0vars; stop; run;  /* most empty */
data oneobs_0vars; run;

 /* BETWEEN statement is inclusive /*
where i between 1 and 5;
if 1 <= (dosedate-sampdate) <= 5 then ...

options pagesize=32767; options pagesize=max;  /* same */

 /* Comma separated, single quoted : */
select quote(strip(gpi),"'") into :formulary_gpis separated by ','

select froms, tos, dist into :ITEM1, :ITEM2, :ITEM3

 /* If you use this: */
LIBNAME FMTLIB "DWJ.NAT2003.FMTLIB" DISP=SHR WAIT=250;
 /* you also need this: */
OPTIONS FMTSEARCH=(WORK FMTLIB);

 /* Find and use custom format aerodtt. in c:/datapost/code/formats.sas7bcat */
options fmtsearch=(MYFMTLIB); libname MYFMTLIB 'c:/datapost/code';

 /* Calculate seconds since the SAS epoch */
data _null_; when=datetime(); put when=; run;

 /* Get last highest -1th element of string */
if substr(reverse(trim(revising_status)),1,1) eq 'N' ...

x='8ZM1234'; if substr(x, 2, 1) eq 'Z' then ...

 /* Remove last 4 characters of string */
stem_with_end_removed=reverse(substr(reverse(s), 4));

 /* Remove the last 4 chars of a mvar */
%let str=%sysfunc(reverse(%substr(%sysfunc(reverse(&str)),4)));

cat "//'bqh0.inc.saslog'" | vi -     # HFS

 /* Remove trailing comma: */
%let YRCNTS=%substr(%bquote(&YRCNTS), 1, %length(&YRCNTS)-1);

 /* Count observations count without opening dataset (or if it's open in SAS GUI) */
data _null_; rc=attrn(open('tmp1.pull_lift'), 'NOBS'); put rc=;run;
%macro m; %put %sysfunc(attrn(%sysfunc(open(tmp1.pull_lift)), NLOBSF)); %mend;%m
%if %sysfunc(attrn(%sysfunc(open(_LAST_)), NLOBSF)) lt 100 %then %do; %put ok; %end;

 /* Day of week number 1=Sunday 7=Saturday */
if weekday(today()) eq 2 then put "it's Monday";
%if %sysfunc(weekday("&SYSDATE"d)) ne 5 %then %goto NOTSATURDAY;  ...  %NOTSATURDAY:
 /* Conditionally run macro if it's Wednesday */
data _null_; if weekday(today()) eq 4 then do; call execute('%include "&CODE\PLOT_CODE\100__make_AdvHFA_STABILITY_PLOTS.sas";'); end; run;

str2 = '%include "' || left(trim(product)) || '\' || left(trim(product)) || '.sas"';
call execute(str2);
str1 = '%mymacro(' || left(trim(product)) || ',' || left(trim(server)) || ',' || left(trim(writeoutput)) || ');' ;
call execute(str1);

 /* Convert DATETIME variable to DATE */
mysasdate = datepart(mysasdatetime);
 /* Convert DATE to DATETIME */
mysasdatetime = dhms(mysasdate, 0, 0, mysastime);
mysasdatetime = mysasdate*86400  /* seconds in a day */
 /* Alternative to datepart(): 
  * ANYDTDTE informat extracts the date part: e.g. mydt='January 1, 2012' is 18993 using this: */
input mydt anydtdte21.;
 /* ANYDTDTM informat extracts the datetime part  ANYDTTME informat extracts the time part */

data _null_; myquarter =        floor((mymonthnumber-1)/3)+1; put mycurrentquarter=; run;
data _null_; mycurrentquarter = floor((month(date())-1)/3)+1; put mycurrentquarter=; run;

 /* Avoid missing failure if datetime inputs are incomplete */
mydttm = dhms(mydate, max(0,hour(mytime)), max(0,minute(mytime)), max(0,second(mytime)));

 /* Convert datetime floating point number to human e.g. 25AUG2005 date in open code */
%put %sysfunc(putn(1440588139.7, datetime9.));
%put %sysfunc(putn(1441637788, datetime14.));

 /* Check for success to this point before continuing to destructive section */
%if &SYSERR eq 0 %then %do ... %end

 /* Speed up proc sql delete v9+ */
libname SAND ... direct_exe=delete ...;

 /* Speed up proc append to database */
libname SAND ... bulkload=yes ...;

 /* Count number of characters in a string v9+ */
commas=countc(myvar, ',');

 /* Colon input specifier - we'll take anything between the delimiters but with a max of 40 chars: */
input ProviderLicenseNumber :$40.;  /* no preceeding LENGTH statement needed */

 /* Capture part of a string */
captureUpToDash = substr(SampName,1,index(SampName, '-')-1);
 /* Capture part of a string - better */
captureUpToDash2 = scan(SampName,1,'-');  /* be explicit on 2nd parm or it'll use default of split on  spaces . < ( + & ! $ * ) ; ^ - / , % | */

 /* Capture part of a ampersand delimited string:
  * _service=default&_program=links.LRQUERY.sas&rpttype=RE&UID=xgw69262&UserRole=LevelB
  *                                                            ________
  */
uid = substr(scan(h, 4, '&'), 5);

 /* If sampname is 0000345198-01 not 0000345198-890000022217-01 skip it */
if not scan(SampName, 3, '-') then delete;

Same but handle spaces differently
http://yourserver/cgi-bin/broker?_SERVICE=default&_PROGRAM=sample.webhello.sas&person=john+doe
http://yourserver/cgi-bin/broker?_SERVICE=default&_PROGRAM=sample.webhello.sas&person=john%20doe

 /* View all formats */
proc format library=work FMTLIB; run;

 /* Canonical diff two datasets compare */
proc compare base=l.materialOLD compare=l.material BRIEFSUMMARY out=t; run;

 /* Oracle count function */
SELECT COUNT(DISTINCT samp_id)  /* good */
SELECT DISTINCT COUNT(samp_id)  /* bad - syntax is ok but probably not what you want */

 /* Cannot use to rename a ds in same lib */
proc copy in=OLDLIB out=NEWLIB memtype=data; select myds1 myds2...; run;
 /* so use this instead of proc copy */
proc append base=newdstocreate data=olddsname FORCE; run;

 /* Canonical proc append */
proc append base=ci_oth data=ci_oth_&strength FORCE; run;

 /* format= relies on e.g. ls=N cannot have ls=max to pull this off */
options ls=80; proc sql; select specname FORMAT=$20. from v ; quit;

proc sql NOprint; select id, (dis-adm)+1 AS mycalc LENGTH=4 LABEL='foo' from bar; quit;

 /* Canonical freq */
proc freq data=SASHELP.shoes(where=(region like 'A%')); run;
proc freq data=t(where=(specname like '%2064%')); table specname*varname / LIST NOCUM NOROW NOCOL NOPCT; run;
proc freq data=t order=freq; tables name / nocum; run;  /* show order by most frequent first */

 /* Where IntrNet keeps its datasets for a session */
%let spath=%sysfunc(pathname(SAVE));

 /* Canonical IntrNet URL */
http://myserver/cgi-bin/broker.exe?_SERVICE=default&_DEBUG=131&_PROGRAM=MYLIB.mypgm.sas&mymvar=foo

 /* Display SAS Intrnet ENVIRONMENT */
http://rtpsawn321/sasweb/cgi-bin/broker.exe?_DEBUG=16384&_SERVICE=default

 /* Wake up, ping restarted IntrNet server */
http://rtpsawn321/sasweb/cgi-bin/broker.exe?_service=default&_program=ping&_adminpw=

 /* SAS version of Oracle ROWNUM<5 or Postgres LIMIT 5 */
... WHERE monotonic() < 5 ...
proc sql outobs=5; select * from sashelp.shoes; quit;  /* but only affects printing results, still rips thru all records */

 /* Determine OS platform */
%put !!!&SYSSCP;

 /* View all macrovariable data (GLOBAL, etc) */
data vars; set SASHELP.vmacro; run; proc print data=_LAST_(obs=max); run;

options noxwait;x "start lelimssumres01a&nm..sas7bdat";

 /* Auto-vivifies any var not read in (or worse, typo'd) */
format matl_typ $18. batch_nbr $10.;

 /* Want total 5 obs but start at 2nd obs so you won't get 5 you get 4.  E.g. 2, 3, 4, 5 */
 /* Note: not 'lastobs'     ___    */
set work.sample (firstobs=2 obs=5);

 /* Same as SAS sort-sort-merge.  Emulate a SAS merge without having to sort. */
proc sql; select coalesce(one.acct, two.acct) as a, rate, balance from one FULL JOIN two  ON one.acct=two.acct ; quit;

data _null_; do while ( x<3 ); put x=; x+1; end; run;
%macro w; %let i=0; %do %while ( &i lt 3 ); %put &i; %let i=%eval(&i+1); %end; %mend; %w
... do year=1990 to 2004 while ( capital > -1 ); ...
... %do i=1 %to 4 %by 2; %put &minyr.&i; %end; ...  /* only 2 puts */

 /* Run IntrNet d:\sas_programs\t.sas with debug on */
http://rtpsawn321/sasweb/cgi-bin/broker.exe?_service=default&_program=LINKS.t.sas&UID=rsh8680&_debug=131

 /* NODUP eliminates obs that are exactly the same across ALL variables.  NODUPKEY eliminates obs that are exactly the same across *only* the BY variables. */
proc sort data=foo out=bar NODUPKEY; by x y; run;

 /* If you don't require the data within BY groups to be kept in the same order as it was before, use the NOEQUALS option.
  * This will save CPU and elapsed time, particularly on large data sets. Causes SAS not to worry about keeping observations 
  * with the same BY variable values in the same order. Usually you don't need the order maintained.
  */
proc sort data=foo NOEQUALS; by x y; run;

 /* proc sort alternative */
proc sql;CREATE INDEX MYSORTEDx ON lelimsgist05e (Samp_Id, Indvl_Meth_Stage_Nm);quit;

dm 'clear log; clear lst; wpgm'; 

 /* SAS/ACCESS oracle sandwich */
proc sql; CONNECT TO ORACLE(USER=u ORAPW=p PATH=db); CREATE TABLE t AS SELECT * FROM CONNECTION TO ORACLE ( select * from my.oratbl ); DISCONNECT FROM ORACLE; quit;

LENGTH TimeNum 8 Meth_Peak $3 Indvl_Tst_Rslt_Val_Char $40;

 /* Specific number of random records from a dataset: */
proc surveyselect n=10 data=tmp out=foo; run;
data r; do i=1 to 10; obsnumiwant=ranuni(int(datetime())); set d; output; end; stop; run;

attrib state length=$3 label='foo bar' format=$40.; 

 /* Foreach dataset in library, push names into a mvar: */
proc sql NOPRINT; select memname into :DSETS TRIMMED separated by ' ' from dictionary.members where libname like 'WORK'; quit;
options ls=180 NOlabel;proc sql;select * from dictionary.columns where libname eq 'WORK' and memname eq 'EFORMSNUMCH';quit;

 /* Canonical sql libname */
libname GDM_DIST oracle user=&username password=&password path=&database schema=gdm_dist;

select distinct r.sampid, s.specname, put(r.sampid,F6.)||'-'||s.specname into :SAMPIDS separated by ',', :METHS separated by ' ', :METHPAIRS separated by ' '

%if %sysfunc(fileexist('c:\foo\bar.txt')) %then %put quote-mandatory file exists; %else %put file OR DIRECTORY! does not exist;
filename myfileref 'c:\delme.dat'; %let exist = %sysfunc(FExist(myfileref)); 
%if not %sysfunc(exist(l.metndc)) %then %do; %put dataset exists; %end;

filename x 'c:\deletefileusingSAS.dat'; %let rc = %sysfunc(FDelete(x)); 

/* Setup the default SAS System user work folder and autocall in /cygdrive/c/Program\ Files/SAS\ Institute/SAS/V8/SASV8.CFG */
-WORK "E:\SAS Temporary Files\"
-SET SASAUTOS  ( "d:\Auto_Call" ...

 /* Do not auto-delete WORK library, save WORK datasets and _TD.... in 'SAS Temporary Files' dir after run completes. Override default. */
options NOworkterm; %put !!! Saved in WORK lib: ; libname WORK list;
sas.exe -WORK 'c:\temp\sas' -NOWORKTERM -sysin t.sas -log t.log -print t.lst -sysparm "%dpv2root%"

 /* Keep temporary WORK datasets in your own dir, not in the default _TD....\ */
libname l './saswork'; options USER=l;  /* saswork must already exist! */

 /* Use datasets in pwd (w/o libname prefix "L") pretending that's WORK: */
options USER=L;

/* Single quote in SAS macro requires quoting with percent sign % */
%put this is %str(John%'s office) here;

 /* Read only do not modify dataset */
options NOreplace;
 /* Read only do not modify anything in library */
libname myROlib 'c:/temp/' access=readonly;

 /* Redirect from LOG device to PRINT device to draw line in the .lst (tilde repeats 78 times) */
data _null_; file PRINT; put 78 * '~'; run;

%local i j item;  /* no commas */

 /* Comma-separated SQL macrovariable */
select distinct quote(trim(batch_nbr)), quote(trim(matl_nbr)) into :batches, :materials separated by ','
 /* But for oracle we need single not double quotes (then add a leading & trailing quote): */
%let sq=%str(%'); %let batches=&sq&batches&sq; ...
select batch_nbr, matl_nbr into :batches separated by "','", :materials separated by "','"
select distinct region into :region1 thru :region3 ...

x "move /Y lelimssumres01a.sas7bdat \\rtpsawn321\d\sql_loader\LeLimsSumres01a&suffix..sas7bdat";

 /* Tells SAS not to worry about keeping obs with the same BY variable values in the same order (for speed efficiency) */
proc sql NOEQUAL ...

 /* DELETE returns to the top of the datastep w/o writing.
  * RETURN returns to the top of the datastep with a default OUTPUT.
  * LEAVE exits a loop.
  * CONTINUE goes to the next iteration of the loop.
  */

 /* PUT STATEMENT writes to a buffer (default: LOG) vs. INPUT statement reads from a buffer (default: CARDS) */
  * FORMAT specify how data is to be written vs. INFORMAT specify how data is to be read
  * formattedpartdescription=put(SAS_data, $myformat.)  vs.  sasdate=input(raw_char_data, $sasinformat.)
  */

 /* concatenate (stack) two datasets */
... set x1 x2; ...
 /* interleave two datasets same except end up sorted */
... set x1 x2;  by state; ...

sumof=sum(of idnum--qtr4 of x1-x42);  /* same */
sumof=sum(of idnum--qtr4 x1-x42);  /* same */
meanof=mean(of a[*]);   /* variable array */

 /* Split parse string on dash taking 8ZP6699 from 8ZP6699-4148428 */
mfg_batch=scan(mfg_batch,1,'-');

 /* Goes right to left, fixes problem of names with middle names */
lastname=scan(fullname, -1 ' ');

 /* Get every 4th obs */
if mod(_N_, 4) eq 0; ...
 /* Get every other obs */
if mod(_N_, 2) eq 0; ...
 /* Test for oddness */
mod(x,2) eq 1
 /* Test for evenness */
mod(x,2) eq 0

 /* Determine where WORK dir is located: */
libname l '.'; proc contents data=l._ALL_; run;
proc contents data=WORK._all_ NODS; run;
proc contents data=WORK._all_; run;  /* cleaner, ds names only */
proc contents data=L._ALL_ out=WORK.prcnts; run;

 /* List all vars in dataset: */
proc sql; select name from dictionary.columns where libname eq 'L' and memname eq 'LELIMSINDRES01A210255';quit;

 /* Canonical do loop: */
%do i=1 %to 5; %put here is &i; %end;
%do i=5 %to 1 %by -1; %put here is &i; %end;
 /* Canonical do loop list: */
data _null_; do i = 1, 2, 3; put i=; end; run;
do i = 1, 2, 3, 'a', 'b', 'c';
do i=1 to 3, 'cat', 20; ...; end;

 /* Canonical do loop until: */
do until (n>100); ...
do i=1 to 10 until (n>5); ...

do while (1);  /* infinite loop */

 /* Count max number of fills per member into macrovariable: */
proc sql NOprint; select left(put(max(nfills),8.)) into :MAXNFILLS from (select count(*) as nfills from t group by member_id); quit;
proc sql NOprint; select max(nfills) into :MAXNFILLS TRIMMED from (select count(*) as nfills from t group by member_id); quit;

 /* Count number of observations - efficient */
data _null_; if 0 then set BUILD.clients_shortname_lookup nobs=count; call symput('OBSCNT', strip(count)); stop; run;

 /* Count observations without opening dataset - most efficient (can also count vars with NVARS)*/
%let dsid=%sysfunc(open(work.foo)); %let cntobs=%sysfunc(attrn(&dsid, NLOBS)); %let dsid=%sysfunc(close(&dsid));

 /* Extract tail of filename DIRROOT=c:/foo/tmp/bar.txt */
%let PRODUCTNAME=%substr(&DIRROOT, %eval(%index(&DIRROOT, tmp)+4));

 /* Start: 11:13:27 PM */
footnote "Start time: %sysfunc(time(),TIMEAMPM.)";

 /* Rename datasets with a timestamp */
%let tstamp=%sysfunc(compress(&SYSTIME, ':'));  /* eg 1300 */
proc datasets lib=l; change ccecallrequest=ccecallrequest_&tstamp; change tmm345=tmm345_&tstamp; run;

 /* Maximum storage size of SAS numeric using default 8. */
9,007,199,254,740,992

proc sort data=sashelp.shoes out=t NOEQUALS; by DESCENDING region sales; run;
 /*                                                    ________________       */
proc sort data=sashelp.shoes out=t NOEQUALS; by region DESCENDING sales; run;

 /* View browse SASHELP library */
options ls=180;proc contents data=SASHELP._all_ /*NODS*/;run;

 /* What SAS products are licensed / installed?: */
proc setinit noalias; run; 
 /* Apply setinit.  May be simpler just to right-click a setinit.sss file */
C:\Program Files\SAS Institute\SAS\V8>sas.exe -setinit -sysin c:\setinit.sas -config "c:\Program Files\SAS Institute\SAS\V8\sasv8.cfg"

 /* Canonical read in readin infile input text CSV file using combined input statement: */
filename F 't.csv'; data t; infile F DLM=',' DSD MISSOVER LRECL=2600 FIRSTOBS=3; input Product :$40. mydt :DATE9.; run;
filename F 't.csv'; data t; infile F DLM=',' DSD TRUNCOVER LRECL=2600 FIRSTOBS=3; input Product :$40. mydt :DATE9.; run;

 /* DSD "data sensitive delimiter" treats two consecutive delimiters as a missing value and removes quotation marks from values */

 /* Compress spaces from a numeric macrovariable: */
%let c = %sysfunc(compress(&c));

 /* Count spaces in a macrovariable by compressing them away */
%let l1=%length(&spacey); %let c=%sysfunc(compress(&spacey)); %let l2=%length(&c); %let csp=%eval(&l1-&l2);

 /* Remove commas from mvar */
%let varlistsas=%sysfunc(compress(%quote(&varlist),','));
%let varlistsas=%sysfunc(translate(%quote(&varlist),' ',','));
 /* Remove commas and quote delimiters from mvar */
%let X=%sysfunc(compress(%quote(%sysfunc(translate(%quote(&S),' ',','))),'"'));

 /* Extract basename shortname stem from a fully qualified path: */
%let fq = %sysfunc(reverse(&fq)); %let basename = %sysfunc(reverse(%scan(&fq, 1, '\')));

 /* Use substr as lvalue to mask a value: */
substr(ssnum, 1, 6) = '******';

 /* Remove specific characters from a string var, like regex s/foo// */
phone = compress(fullphone, '()- ');

 /* Substitute specific characters, like regex s/-/_/g */
sBatch1Code = translate(sBatch1Code, '_', '-');

 /* Substitute specific words, like regex s/foo/bar/g */
sBatch1Code = tranwrd(sBatch1Code, 'foo', 'bar');
sBatch1Code = tranwrd(sBatch1Code, 'foo', '');

 /* Canonical SAS if then else: */
if region eq 'Asia' then put 'As'; else put 'no';
if region eq 'Africa' then do; put 'Af'; end; else do; put 'no'; end;
%if &i eq 2 %then %do; %let fqds=8ZP2432; %end; %else %do; %let fqds=32; %end;

 /* Rename vars to avoid "WARNING: Variable mfg_batch already exists on file WORK.VALTREX_PRODUCTIONANDANALYTICAL." */
proc sql; select * from sashelp.shoes (rename=(region=myyr subsidiary=mysub)) ; quit;
data d9(drop=long_test_name rename=(long_test_name2=long_test_name)); ...

 /* View, display, print format permanent stored formats to .lst */
proc format library=work FMTLIB; run;  /* all FMTLIB is a keyword */
proc format library=work; select sexunic; run;  /* just one */

 /* Macro date - format today's date into a macrovar e.g. 2016-09-16: */
%let formatteddate=%sysfunc(date(), YYMMDD10.);

%let formatteddollars=%sysfunc(putn(&MYNUM, DOLLAR10.));

 /* When you need to know how many intervals are between two dates use intck(). When you need to create a date that is some number of intervals away from another date use intnx(). */
start='01jan2013'd; end='30jun2013'd; days2=intck('day', start, end);  /* days2 is 180 (180 day boundaries crossed) */
start='31dec2013'd; end='01jan2014'd; yrs2=intck('year', start, end);  /* yrs2 is 1 (a single year boundary was crossed!) */
start='01jan2013'd; nextweek=intnx('week', start, 1); nextweekEND=intnx('week', start, 1, 'E');  /* or 'M'iddle, 'S'ame.  nextweek is Sun. 2013-01-06 nextweekEND is Sat. 2013-01-12 */
start='11jan2013'd; monthStart=intnx('month', start, 0, 'b'); /* first day of month: */
start='11jan2013'd; monthEnd=intnx('month', start, 0, 'e');   /* last day of month */

 /* Macro date - change format reformat date into a macrovar: */
%let mydt='30OCT2015'; %let newdt=%sysfunc(putn("&mydt"D, YYMMDD10.));
%let mydt='30OCT2015'; %let mydtplusone=%sysfunc(intnx(day, "&maxdate"D, 1, b), YYMMDD10.);
%let mydquoted=%bquote(')%sysfunc(putn(%sysfunc(inputn(20150101, YYMMDD8.)), YYMMDD10.))%bquote(');  /* '2015-01-01' */

 /* intnx shifted index - when is next election day?: */
%let nextelectionday=%sysfunc(intnx(year4.11, '01OCT2015'd, 1), DATE9.);
 /* intnx shifted index - when is the next election day after the upcoming one?: */
%let nextelectionday=%sysfunc(intnx(year4.11, %sysfunc(today()), 2), DATE9.);

 /* fiscalStart=01OCT2016 fiscalEnd=30SEP2017 */
data; format fiscalStart fiscalEnd date9.; fiscalStart= intnx('year.10', '03OCT15'd, 1, 'b'); fiscalEnd= intnx('year.10', '01OCT15'd, 1, 'e'); run;

 /* Last day of previous month (31dec1999): */
past = intnx('month', '01jan2000'D, -1, 'E');

 /* Calculate yesterday date in macro date calculation: */
%let yesterday=%sysevalf("&SYSDATE"D-1);                                                 /* 20322 */
%let yesterday=%sysfunc(putn(%sysevalf("&SYSDATE"d-1),DATE9.));                          /* 31DEC2015 */
%let yesterday=%sysfunc(intnx(day, "&SYSDATE"D, -1, b), YYMMDD10.);                      /* 2015-12-31 */
%let yesterday=%bquote(')%sysfunc(intnx(day, "&SYSDATE"D, -1, b), YYMMDD10.)%bquote(');  /* '2015-12-31' */

 /* Calculate one month from now in macro: */
%let x=%sysevalf("&SYSDATE"D+30);  /* 20322 */
%let x=%sysfunc(putn(%sysevalf("&SYSDATE"D+30),DATE9.));  /* 31DEC2015 */

 /* Date convert calculate one month ago in macro (more accurate than subtracting 30): */
%let ThisMonth=201405;
%let LastMonth=%sysfunc(intnx(month,%sysfunc(InputN(&ThisMonth.01,yymmdd8.)),-1), YYMMDDN8.);  /* the .01 is to fake May 1 */

%let FirstDayOfLastMonth=%sysfunc(intnx(month, "&SYSDATE"D, -1, b), YYMMDD10.);
%let OneMonthAgoToday=%sysfunc(intnx(month, "&SYSDATE"D, -1, s), YYMMDD10.);
%let LastSunday=%sysfunc(intnx(week, "&SYSDATE"d, 0, b), DATE.);

 /* Force date to last Saturday */
data _null_; lastsaturday = intnx('week', "&SYSDATE"D, 0, 'B')-1; call symput('date_max', put(lastsaturday, DATE9.)); run;
%let lastSaturday=%sysfunc(intnx(week, "&SYSDATE"d, -1, e), DATE.);

 /* Leap year is accomodated: */
intnx('YEAR', '29feb2000'd, 2, 'SAME');  /* 28feb2002 */

proc sql; select "%sysfunc(putn(%sysevalf("&SYSDATE"D+30),DATE9.))" as expireinonemonthdate ...

 /* Calculate days between in macro: */
%let begdate='01Jan1995'd; %let endate='31Dec1995'd; %put Number of days from BEGDATE to ENDDATE is %left(%sysfunc(putn(&enddate-&begdate+1, BEST.))); 

 /* Canonical proc means */
proc means data=sashelp.shoes; class region; var sales; run;
proc means data=sashelp.shoes NOprint; output out=t; class region; var sales; run;
proc summary data=sashelp.shoes PRINT; class region; var sales; run;
proc sql; select region, count(sales), sum(sales) format=DOLLAR16. from sashelp.shoes group by region; quit;
 /* Count missings: */
proc means data=sashelp.class N NMISS; run;
proc sort data=sashelp.class out=t; by sex; run; proc means data=t N NMISS; by sex; var height; run;
proc sort data=sashelp.class out=t; by sex;run; proc means data=t N NMISS; class sex; var height; output out=t2; run;
proc means data=sashelp.shoes MEDIAN; var sales; run;

 /* SAS error message V8 at least: */
NOTE: BY-line has been truncated at least once.  /* fix with options ls=max */

 /* Canonical SELECT (case) statement */
select ( storeno ); when ( 81,83, 12 ) delete; when ( 73 ) put 'okthen'; otherwise; end;
select; when (daysOld < 31) category = 'Current'; when (daysOld < 61) category = 'Over 30'; when (daysOld < 91) category = 'Over 60'; otherwise category = 'Over 90'; end;

 /* System call */
options NOxwait; data _NULL_; x "start lelimssumres01a&nm..sas7bdat"; /* 0 for success */ %put Windows status is &SYSRC; run;

 /* Remove all formats in dataset */
data foo; format _ALL_; run;

 /* What SAS day number is one year ago from today? */
%let yearago = %sysevalf(%sysfunc(date())-365); ...  if test_date > &yearago; ...

Patches installed:
C:\Program Files\SAS Institute\SAS\V8\core\sasinst\hotfix\

dataset_exists = %sysfunc(EXIST(mydataset));  /* 1 yes, 0 no */

ods PDF file='c:/temp/t.pdf';  proc...run; ods PDF close;

ods html file='myrpt' style=HtmlBlue; proc print data=_LAST_; run; ods html close;
ods html body='t.htm'; proc print data=_LAST_; run; ods html close;

 /* ODS toggle (remove 'close' to re-enable) */
ods listing close;

ods rtf file='report1.rtf' newfile=bygroup;

 /* Canonical write output save Excel as CSV */
options NOsource; proc export data=t OUTFILE="\\pucc\VENT\Output Compiled Data\CSV VenHFA_analytical.csv" DBMS=CSV REPLACE; run;
ods csv file='InputFile.csv'; proc print data=t3 NOobs LABEL; run; ods csv close;  /* better if need to change varname to label for user */

 /* Canonical write output save as an Excel file: */
ODS EXCEL file="t.xlsx" options(sheet_name="#BYVAL(member)" embedded_titles='yes'); proc print NOobs; run; ODS EXCEL close;

 /* Query what do we have for ODS HTML etc: */
proc template; list styles; run;
proc template; list tagsets; run;
 /* View details of specific style: */
proc template; source styles.printer; run;

 /* Multiple ODS destinations e.g. multiple styles for a single proc's output or one copy to local, one to network drive */
ods html(id=1) file='file1.html' style=sasweb; ods html(id=two) file='file2.html' style=ocean;
...proc...
ods html(two) close;
...proc...
ods html(id=1) close;

 /* Multiple ODS destinations */
ods csv file="csv.csv"; 
ods csv(2) file="csvsemi.csv" options(Delimiter=';'); 

 /* Eliminate garbage from a normally numeric field.  Keep Log clean. */
proc format; invalue NUMONLY(UPCASE) -999999999 - 999999999 = _SAME_ OTHER = . ; run; data clean_numbers_only; input mynum NUMONLY9.; ...

 /* Hardcoded literals in SQL select query */
select distinct 'literal ' as hardcodedfieldname, region 'display reggy all for rows' format=$5., product from sashelp.shoes

 /* Macro index search */
%if %index(&the_type, natmer) %then %put found a natmer;

 /* Canonical transpose, sex goes as column now */
proc transpose data=tmp out=tmp2(drop= _NAME_ _LABEL_) prefix=Sx; by state; id sex; var result; copy comment1 comment2; run;
proc transpose data=t out=t2; by mo;<---THE FORMER COLUMN  id clientstoreid;<--THE NEW COLUMN; run;

libname INXML XML "&SYSPARM\&DATASRC..xml" access=READONLY; proc contents data=INXML._all_;run; data tmp; set INXML.table; run;

 /* Default keyboard shortcut DMKEYS */
key command line commandline focus SAS: <F11>
KEYS PGM WPGM WPG LOG OUTPUT OUT NUMS ZOOM

Change default WORK location (PC SAS): edit near EOF -WORK
C:\Program Files\SAS\SAS 9.1\nls\en\SASV9.CFG

 /* Display each line of textfile as it's read-in using INPUT statement */
put '!!!' _INFILE_;

 /* Loop all characters in dataset without an index: */
array cs _CHARACTER_; do over cs; if cs eq: 'foo' then cs='bar'; end;

 /* Single trailing at sign (for ID field) @ vs. Double trailing (for repeating blocks) @@ */
@  holds record in input buffer so that logic can be used to figure out which (next) INPUT statement to us.  More than one INPUT statement exists in data step.  Releases when control returns to top of data step.
@@ holds a record across multiple iterations of the DATA Step to allow reading multiple obs from a single line of raw data.  A single INPUT statement exists in data step.  Releases when the end of the raw RECORD is reached  or an @[@]-less INPUT statement is encountered.

 /* SAS Date format checker: */
data _null_; d1 = input('01-JAN-60', DATE9.); d2 = input('01/01/2009', MMDDYY10.); put _all_; run;

 /* Build large dummy dataset: */
proc surveyselect data=SASHELP.shoes out=stacked samprate=1 reps=50000000; run;

 /* char2num - think "I"NPUT is closer to "C"HAR so use that to convert a character to a numeric: */
 /* num2char - think "P"UT is closer to "N"UM so use that to convert a numeric to a character: */
num = input(char, ?? BEST. -L);  /* canonical char2num and suppress SAS Log "NOTE: Invalid argument to function INPUT at line..." & _ERROR_=1 */
num = input(char, COMMA7.);  /* take char string 123,456 and store as a num 123456 */
char = put(num, BEST. -L);  /* integer num2char  (may need: if mynum=. then mynum=' ') */
char = put(num, 12.2 -L);  /* floating point num2char */
data numds(drop=TMP:); set chards(rename=(clientid=TMPclientid)); clientid=input(TMPclientid, ?? BEST. -L); run;  /* char2num num2char convert dataset */
 /* char2num substring to numeric: */
num = input(substr(char,3,2), 4.);  /* substr() alone produces a char, convert it to num */

 /* 20151001 to 201510 while remaining a number: */
shortmo=floor(month/100);

 /* Avoid ASCIIbetical sort by inserting leading blanks if data is small: */
data t; set t; region=right(region);
 /* Avoid asciibetical sort by inserting leading blanks if data is large (single pass): */
proc format; value $rtfunc OTHER=[right()]; run; proc freq data=t order=formatted; table region; format region $rtfunc.; run;

options NOlabel; /* prevent proc sql default from displaying labels instead of varnames */

 /* View control and non numchar characters (v8): */
c=compress(comments1159,'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789');

 /* Convert to Oracle formatted datetime e.g. 21-MAY-98 02:30:37 is Oracle format 'DD-MON-YY HH24:MI:SS' */
proc format; picture ORADTT other='%0d-%b-%0y %0H:%0M:%0S' (datatype=datetime);run; data; s='21May98:02:30:37'DT; call symput('IP21START',"'"||trim(left(put(s, ORADTT.)))||"'");run;

 /* SAS Enhanced Editor IDE F11 command shortcuts */
out-->SAS Output  lst-->SAS Output (same)  log-->SAS Log  wpg-->Enhanced Editor

%if (&SQLRC eq 0) and (&SQLOBS gt 0) %then %do; %put no proc sql errors and query did return records; %end;

data _null_; x=sleep(60000); run;  /* 60 seconds */

if first.storeno and last.storeno then put 'firstdot lastdot says there is only one of these unique values: ' storeno;

 /* SAS Program Editor (*not* Enhanced) where n is num of lines */
Cn/CC copy  Dn/DD del  In insert  Mn move  Rn repeat  A after  B before  undo (in cmdline)

 /* Display Manager Enhanced Editor open: INCLUDE  save: FILE  go to Enhanced Editor: wpg  go to commandline: F11  submit the top n lines in SAS Editor: SUBTOP 42   Commentout the selection: Ctrl + /  Undo the Comment  Ctrl + Shift +  */

 /* View input file text file in a SAS IDE window */
filename f 'bladerun_crawl'; proc fslist file=f;run;

 /* SAS conception of Truth is anything other than False, False is 0 or . */

 /* Distributive input statement */
input (Date1 Date2)(:MMDDYY10.) mon dy yr;
input (name1-name12) ($)  @@;
input (Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec) (1.);  /* read raw 111222333444 */

array elements{5} $2 _TEMPORARY_ ('H','He','Li','Be','B'); /* cannot use '{*}' here */
 /* Multidimensional array 3 rows, 25 columns: 1-25 26-50 51-75 */
array a{3,25} v1-75;  /* to access v50: a{2,25} */

 /* Standard, SAS column input readable, numerics: -15, 15.4, +.05, 1.54E3, -1.54E-3  But still may be able to use formatted input, COMMA12.2 etc, for nonstandards ($ or % or ,). */

 /* Ampersand informat input modifier accepts embedded space so data must be delimited by TWO or more spaces */
input name &$12.  score1  score2;

 /* Fixed fields can be readin via column input (standard data only) or formatted input (either).  Freeform fields can be readin via list (or modified list "&" ":") input */

 /* Free-format input (space delimited etc) - use list input and only name each var and specify its type */
 /* Modified list can read spaces in vars and handle non-standards like commas in numbers */

 /* Canonical DATETIME. format examples. TIME portion must be delimited by
  * a colon, minimum width is TIME5. x=1000000
  */
put x DATETIME.;    /* 12JAN60:13:46:40 */
put x DATETIME10.;  /* 12JAN60:13 */

 /* Canonical DATETIME convert to human */
data _null_; x=put(1614549716, DATETIME18.); put x=; run;
data _null_; x=put(20188, DATE9.); put x=; run;

 /* Default input column pointer control starts at position 1.  After reading a piece of data it rests 1 column to the right of that data. */
 /* Column pointer controls: @n +n */
 /* Line pointer controls: / (relative, sequential)  #n (absolute, non-sequential) */

 /* _ERROR_ is a boolean */

 /* Avoid proc print "ERROR: Unable to allocate sufficient memory. At least 1168534K bytes were requested. You must either increase the amount of memory available, or approach the problem differently.  ERROR: Out of memory." */
data _null_; set _LAST_; file LOG; put (_ALL_)(=); put; run;

 /* printf for debugging */
data _NULL_; set _LAST_; file LOG; put '!!!DataLinkSQLPlusWSAdapterCon=================='; put (_ALL_)(=); put; run;

 /* Determine how many parameters were passed in */
%let l1=%length(&SYSPARM); %let c=%sysfunc(compress(&SYSPARM)); %let l2=%length(&c); %let csp=%eval(&l1-&l2+1);

 /* Take 2nd thru last parameters passed in as a single string (to be iterated later) */
%let sp=%str( ); %let pos=%index(%bquote(&SYSPARM), &sp); %let pxall=%substr(%bquote(&SYSPARM),&pos);

 /* Enquote for oracle statement syntax */
%let today=%str(%'%sysfunc( today(),mmddyy10. )%');

 /* Convert from human to SAS datetime (epoch number returned): */
data t; a=input("05-OCT-10 11:06:13", DATETIME18.); b=put(1601377424, DATETIME18.); run;
%let epochnum=%sysevalf("05OCT2010"d);

 /* If string contains substring 'zm' - weak regex */
if name eq "&DESIGNATOR" and index(upcase(Value),'ZM');

 /* Load a dataset into memory only when dataset is used. */
SASFILE WORK.sample OPEN;

 /* Canonical min max */
proc sql; select min(sampcreatets), max(sampcreatets) from tmp8.lims_0002e_avandamet; quit;
proc sql; SELECT min(resentts) format=DATETIME19., max(resentts) format=DATETIME19. FROM l.sumvaltrex01a ; quit;
proc sql; SELECT min(ts) AS mints format=ip21dtt., max(ts) AS maxts format=ip21dtt., "&STARTDT" as startdt, "&ENDDT" as enddt, count(ts) as cnt FROM &OUTPUTFILE ; quit;
 /* Canonical min max date */
...  retain _maxdt; format _maxdt DATE9.; set t; _maxdt = max(of _maxdt dt); call symput('MAXDT', _maxdt); ...

 /* Simple timestamp datetime change */
data tmp1.ip21_0001e; set tmp1.ip21_0001e; maxts='12NOV10:19:45:10'dt; baselastrun='14NOV10:21:15:20'dt; run;

 /* Which files is SAS accessing?                                     ___________ _________________ */
c:/PROGRA~1/SASINS~1/SAS/V8/sas.exe -sysin t.sas -log t.log -nosplash -rtrace all -rtraceloc t2.log

 /* Print resolved macro code */
 /*      keyword                                      */
filename MPRINT 'c:\temp\printMacroResolvedSAScode.sas'; options MPRINT MFILE;

 /* GENMAX is the max number of generation datasets to rotate but each of those 7 gets an increment e.g. ip21_0002e_line8fillerBKUP#009.sas7bdat */
echo "libname l '//tpsawn323/DataPost/SGK/Zebulon/MDI';libname l2 'u:/tmp';data l2.ip21_0002e_line8fillerBKUP(genmax=3);set l.ip21_0002e_line8filler;run;" >| $UTMPDIR/t.sas && $SASEXE -sysin "$UTMPDIR/t.sas" -log "$UTMPDIR/t7a.log";
 /* Version a dataset, up to 3 copies, then view the previous version */
data t(genmax=3); ...;   proc print data=t(gennum=-1); run;

 /* Variable range lists: */
var1-var999;
_CHARACTER_ _NUMERIC_
 /* More subtle variable range lists: */
varA -character- varZ
varB-numeric-varY  /* varA & varZ can be char */
 
 /* Canonical contents: */
proc datasets library=SASHELP; contents data=shoes VARNUM; run; quit;
proc sql; describe table SASHELP.shoes; quit;

 /* Print to SAS Log without %put */
data _null_; file print; put #3 @10 "Data set &dsn. does not exist"; run;

 /* V8 undocumented informat: */
x='2005/6/30 12:30'; ymd_no_ampm=input(x, ymddttm16.);
ymd_ampm=input(z, ?? ymddttm18.);

SAS/SHARE remote server (running proc server) -> local client
SAS/CONNECT remote server (running spawner.exe) -> remote server (only the .sas file with rsubmit; endrsubmit; gets sent to server)

 /* Eliminate error "Format F_APRCLS not found or couldn't be loaded for variable APRCLASS" when opening dataset for viewing: */
options NOfmterr;

 /* Blank out empty wipe initialize datasets */
data ds_SAMPLE_1; run; data ds_SAMPLE_2; run;

 /* Canonical numeric array definition: */
array temperaturehour_arr {24} temp1-temp24;

DDMONYY in Oracle is DATE7. in SAS

 /* SAS epoch to human x=21JUN13 */
data; x=put(19530, DATE.); put x=; run;

 /* Canonical for each macro foreach loop */
%let list=foo bar baz; %let i=1; %do %until (%qscan(&list, &i)=  ); %put %qscan(&list, &i); %let i=%eval(&i+1); %end;

 /* Macro multiple condition macro if then %if statement */
%if &foo eq bar OR &foo eq %str(baz oom) %then ...

# Google custom search SAS
http://tx0.org/uf

 /* Build a lookup CNTLIN format: */
data control(keep= fmtname start label hlo); set t(rename=(code=start animal=label)) end=e; retain fmtname 'ANIFMT'; output control; if e then do; hlo='o'; label='Unk'; output control; end; run;
 /* Convert control dataset into format then do animal code lookup: */
proc format CNTLIN=control; run;  data t2; set t; animal=put(code, ANIFMT.); run;

 /* Print a CNTLIN stored format: */
proc format library=work FMTLIB; run;

options NOlabel;  /* Avoid proc sql printing pretty labels names instead of varnames */

 /* Convert SAS epoch date to human: */
~/code/perl/datecalc 1/1/1960 19272
 /* Convert SAS epoch date to human - Excel (must convert num result to Date): */
=DATEVALUE("1/1/1960")+19272

 /* Convert character constant date to character and SAS date to number in open code (easiest date converter conversion) */
%put %sysfunc(putn('30OCT1965'D, 8.));
 /* Canonical convert SAS numeric date to human date: */
%put %sysfunc(putn(17325, DATE9.));
 /* Convert character constant datetime to character and SAS date to number in open code (easiest datetime converter conversion) */
%put %sysfunc(putn('30OCT1965:12:01:00'DT, 10.));  /* "10." instead of "8." to avoid "1.8399E8" */
%put %sysfunc(putn(183988860, DATETIME14.));

put "This string will print without any line breaks - this is a multiline
looooooooooooooooooooooooooooooooooooong string";

 /* Date format distributive with seemingly misplaced "=": */
put (mydt1 mydt1)(= DATETIME18.);

 /* Use text value as a marker to determine where input pointer goes next: */
input @'[' accdt DATE11.  @'GET' fnm :$20.;  /* read an Apache web log e.g. 130.192.70.235 - - [08/Jun/2004:23:51:32 -0700] "GET /rover.jpg HTTP/1.1" 200 668 */

WHERE company between 1 and 5; WHERE company contains 'oog'; WHERE company is null; WHERE company is missing; WHERE company like 'Go%'; WHERE company like 'Googl_';

 /* Range operator (order determined with help from proc contents;run;) */
proc print data=sashelp.shoes(obs=5) width=minimum; var Region--Returns;run;
proc print data=sashelp.shoes(obs=5) width=minimum; var Region-NUMERIC-Returns;run;
proc print data=sashelp.shoes(obs=5) width=minimum; var Region-CHARACTER-Returns;run;

fullname=catx(' ', fname, mname, lname);  /* gracefully concatenates any missing mnames */

data clear_var_format_informat_label; set SASHELP.shoes; format inventory; informat inventory; label inventory=; run; proc contents ; run;

if lag(foo) eq foo then put 'dup!' _all_;

data OUTDIR.&OUTPUTFILE(compress=yes);

 /* Dataset to CSV file (macro ships with SAS) */
%ds2csv(data=sashelp.retail, runmode=b, csvfile=c:\temp\retail.csv);

 /* Name literal e.g. SAS/ACCESS database table or Excel worksheet has spaces in name */
options validvarname=any;
data mydblib.'My Staff Table'n; ...
input 'Amount Budgeted'n 'Amount Spent'n ...
 /* Name literal non pass-through: */
libname GDM_DIST oracle user=dgm_dist_R password=ead path=kuprd613 schema=gdm_dist readbuff=10000 preserve_col_names=yes; ... select t1.mat as 'Mat. Doc'N ...

 /* Single quotes for criteria, double for funky table naming */
libname mydblib oracle user=u password=p path='airdata' schema=airport preserve_names=yes; proc sql dquote=ansi outobs=9;  create table mydblib."Intl Delay" as select * from mydblib.internat; quit;

SAS82WIN=C:/PROGRA~1/SASINS~1/SAS/V8/sas.exe
SAS91WIN=C:/PROGRA~1/SAS/SAS9~1.1/sas.exe
SAS93WIN=C:/PROGRA~1/SASHome/SASFoundation/9.3/sas.exe

%let uniqueidentifierPID=&SYSPROCESSID;

 /* Macro resolution */
grep '^MPRINT' $z/datapost/code/datapost_trend.log >| t.grep

proc sql; update sched set cost = CASE when dest eq 'YYZ' then cost-1 when dest eq 'FRA' then cost+1 else cost END; ; quit;

 /* proc report traffic lighting assuming proc format; value $bkres 'PASS'='Lime' 'FAIL'='Red'; run; */
define result / style(column)={background=$bkres.};

Adjust proc sql print width via:  SELECT foovar format=$5. FROM ...

 /* proc sql number like SAS obs NOobs */
proc sql; select monotonic() as Obs_Number, byte(monotonic()+96) as Obs_Letter, * from sashelp.class; quit;

 /* Simple gplot */
goptions reset=all ftext=swissl device=png cback=white border htitle=12pt ctext=gray gsfname=outpng gsfmode=replace ypixels=750 xpixels=750; filename outpng 'junk.png'; proc gplot data=linksplot; plot cnt*dt; run;
 /* Simple gplot */
ods graphics / height=400 width=800 noborder; proc sgplot data=sashelp.cars; histogram msrp; run; proc print data=sashelp.class; run;

%put _all_; %goto THEEND; /*...stuff to be skipped...*/  %THEEND:

 /* SQL SAS enhanced, add a single quote tick to a large number to fake out Excel */
(CASE WHEN QURY0297.Output_MAT_COD IS NULL THEN QURY0297.Output_MAT_COD ELSE ("'"||trim(QURY0297.Output_MAT_COD)) END) FORMAT=$20. LABEL="foo" AS Output_MAT_COD,

select a.*, (CASE WHEN b.TotalEnrolledLst30 ne . THEN b.TotalEnrolledLst30 ELSE 0 END) as TotalEnrolledLst30

 /* Sum accumulator is auto-retained (but  foo = foo + 1  is not) */
foo+1;

 /* SUM function returns the sum of non-missing arguments whereas '+' operator returns a missing value (nulls propagate) if any of the arguments are missing. */
x = a + b + c;            /* BAD- if ANY argument is missing, x = . */
x = sum(a, b, c);         /* with missing argument, x is sum of nonmissings */
x = sum(a, b, c, 0);      /* if a, b & c are missing, result will be zero */
x = (d + e + f + g) / 4;  /* BAD- x is missing if any var in the calc is missing */
x = mean(d, e, f, g);     /* number of nonmissings is divided by 4 */

 /* Missing to zero */
x=sum(foo, 0);
 /* Missing to zero */
data t; set t; array nums _numeric_; do over nums; if nums eq . then nums=0; end; iacthr97 = emhrsi97 + cohrsi97 + vehrsi97; run;

 /* Count number of files in directory */
%let rc=%sysfunc(filename(dr, 'C:/temp')); %let cnt=%sysfunc(dnum(%sysfunc(dopen(&dr)))); %put !!!&cnt;

 /* SQL set default if missing: */
select b.code, b.count, COALESCE(a.animal,'Unknown') as animal  /* set animal='Unknown' if missing */

 /* Iterate over an array: */
array a[*] foovar barvar bazvar; do i=1 to dim(a); if a[i]>maxn then maxn=a[i]; end;

 /* Enhanced date separator formats.  B blank  C colon  D dash  N none  P period  S slash.  The default YYMMDD10. inserts dashes. */
data _null_; d='04oct13'd; put d yymmddN8.;run;  /* 20131004 */
%let maxdate2=%sysfunc(putn("&maxdate"d, YYMMDDN8.));

 /* Canonical date convert from 08NOV2016 to 20161108 */
%put %sysfunc(putn("08NOV2016"d, YYMMDDN8.));
 /* Date convert libname e.g. /Drugs/RFREval/Ahold/2016/20161108/Dataset */
%let maxdate=08NOV2016; libname l "/Drugs/RFREval/Ahold/%sysfunc(putn("&maxdate"d, YEAR.))/%sysfunc(putn("&maxdate"d, YYMMDDN8.))/Dataset";

do j=1 to 4; subj(j)=''; score(j)=.; end;  /* initialize array set to missing v8 */
call missing(of subj(*), of score(*));     /* initialize array set to missing v9 - don't care if NUM or CHAR */

 /* Exponentiation scientific notation: 1.257E+03 */

 /* Canonical proc format */
proc format; value traffic LOW-10='red'  11-20='yellow'  21-HIGH='green'; run;
proc format; value f_yr 50-59='50-59' 60-HIGH ='60+' ; run; agerange = put(age, f_yr.);

 /* Speed up Oracle SAS/ACCESS */
libname DGM_DIST oracle user=&username password=&password path=&database schema=dgm_dist readbuff=10000;
select * from ora_sas.customers(readbuff=10000);

%let cnt=1234; %put %sysfunc(putn(&cnt, comma.));  /* 1,234 */
%let cntfmtd=%sysfunc(putn(&cnt, comma.));

 /* Oracle libname */
libname DGM_DIST oracle user=&username password=&password path=&database schema=dgm_dist readbuff=10000;

 /* List datasets and details in library (directory) */
proc contents data=L._ALL_; run;

 /* Replace special chars with space */
do aa= 1 to 29 , 31 , 127 , 129 , 141 to 144 , 157 , 158; var1=tranwrd(var1,byte(aa), ' '); end; 

options fullstimer bufsize=8K bufno=5000;

 /* Sortable timestamp e.g. 20120507_1329 */
%let x=%sysfunc(compress(%sysfunc(today(),yymmddN8.)_%sysfunc(time(),hhmm6.), ': ')); 

 /* Canonical input statement  e.g.:  1 100 98 75  A A B 10jul2014 12jul2014 */
input id (apple orange banana) (:8.) (loc1-loc3) (:$1.) (mydate1-mydate2) (:date9.);

 /* Simpler if then else, ifn() is for numerics */
x2=ifc(x='Y', 'yes', 'no');
if x='Y' then x2='yes'; else x2='no';

 /* Standardize addresses */
addr = tranwrd(addr, 'Street', 'St.');

ods trace on / listing;
ods output Freq.Table1.OneWayFreqs=l.t; ...; ods output close;
ods trace off;

proc import datafile="t.xlsx" dbms=xlsx out=t REPLACE; sheet='Sheet1'n; getnames=yes; run;

 /* Character to date e.g. 20150504 */
filerecdate=input("&CURRDT", YYMMDD8.);

 /* Force macro lib to close */
proc catalog c=work.sasmac1 force kill;quit;

 /* Choose default if better not available (or both exist) */
%let name=%sysfunc(coalescec(&default., &better.));

 /* Calculate person's age: */
age = int((intck('YEAR', today(), dateofbirth)))*-1;
select *, (int(intck('YEAR', today(), patientdob))*-1) as age

 /* mkdir -p /home/bheckel/testdir  No quotes! */
%let newdir=%sysfunc(dcreate(testdir, /home/bheckel/));

 /* Create nested dirs, alternative to dcreate() */
options dlcreatedir; libname res ("&outdir./results", "&outdir./results/images"); libname res clear;

 /* Avoid EG overwhelm bug: */
ods _ALL_ close; ods noresults; ods PDF file='t.pdf'; ...; ods PDF close;

 /* Skip non-PDF files */
if reverse(upcase(left(trim(myf)))) eq: 'FDP';

 /* Clean out delete WORK.  !SASHOME/bin/utilities */
/usr/local/SAS94/sashome/SASFoundation/9.4/utilities/bin/cleanwork /workspace

 /* If string is quoted: */
%if (%qsubstr(%nrbquote(&file.), 1, 1) eq %str(%')) %then %do;

 /* Do not resolve macrovariables triggers '&' or '%' */
%let x=%nrstr(&a &b); %put &x;  /* &a &b */

 /* Remove any leading zeros: */
%macro rml0(var); substr(&var.,verify(&var.,'0')) %mend;

 /* Remove leading zeros from a char var before comparing */
clientstoreidNOZERO = substr(clientstoreidCHAR, verify(clientstoreidCHAR, '0'));
if substr(bin, verify(bin,'0')) in ('4336') ...

 /* Count days */
sum(case when date(pickeduptimestamp) between '01MAR2015' and '31MAR2015' then 1 else 0 end) as Mar2015,...
sum(case when status='OPTOUT' then 1 else 0 end)/count(*) OPTOUT format percent8.2 as opt_rate

 /* Do something every 5 days: */
%let mod=%sysfunc(mod((%sysfunc(today())-"17JUN2015"d),5));  %if &mod eq 0 %then ...

 /* Where are SAS configuration files located: */
proc options option=config; run;

/sas/sashome/SASFoundation/9.4/perl/bin/perl -v

select a.*, case when b.chronic='Y' then 'Y' else 'N' end as chronic

put 'ERROR: dups exist ' name= (myvars:)(=);

# Start restart SASApp server. " - " = login as user sas with his environment.
$ sudo su - sas; /sas/config/Lev1/sas.servers status  # or start or stop 

 /*                                                SASROOT _______________________________          */
 /* Use mine first in the autocall hierarchy.  SASAUTOS is /sas/sashome/SASFoundation/9.4/sasautos/ */
options mautosource sasautos=('.' '/Drugs/Macros', SASAUTOS);

 /* Replace old SAS left trim: */
select count(distinct cats(storeid,pharmacypatientid)) as UPID
select compress(a.storeid)||compress(a.pharmacypatientid) as UPID

 /* cat family */
cat(of x1-x3)      vs. x1||x2||x3
catt(of x1-x3)     vs. trim(x1)||trim(x2)||trim(x3)
cats(of x1-x3)     vs. trim(left(x1))||trim(left(x2))||trim(left(x3))
catx(SP, of x1-x3) vs. trim(left(x1))||SP||trim(left(x2))||SP||trim(left(x3))
 /* Concatenate: use a delimiter - CATX is different in that it skips missing values - old version would do e.g. foo,,bar */
mycsv = catx(',', c1, c2, c3);

# Who is using up all SASWORK?:
sudo find /saswork -size +10G | sudo xargs ls -lh | awk '{print$5,$3,$4,$6,$7,$8,$9}'|sort -rh

 /* Set a blank label */
data p10j; set p10b p10c; label _TEMA001='00'x; run; proc print data=p10j LABEL; run;

proc sql noprint; select distinct cats('"',put(patient_dob,date9.),'"d') into :dob1 -  :dob&ndob.  from subset_hp_npi; quit;

 /* Canonical SAS if then else */
if region eq 'Asia' then put 'foo'; else put 'bar';

rc=system('/bin/bash /Drugs/xron/Daily/FredsImm/fredsimm.sh 2>/Drugs/xron/Daily/FredsImm/fredsimm.err');

 /* Convert multiple spaces to single: */
cityst = prxchange('s/\s+/ /', -1, TMPcityst);

 /* Convert Unix path space to backslash space via regex: */
%let reportlocationconverted=%sysfunc(prxchange(s/ /\\ /, -1, &reportlocation));
 /* Pick off end of string extension /foo/bar/baz is baz (Note no quotes!) */
%let RFDPATH=/Drugs/RFD/2016/02/AN-3097; %let RFD=%sysfunc(prxchange(s/(.*)\/(.*)$/$2/, 1, &RFDPATH));

 /* Parse search replace capture first part of string via regex: */
%let clientname=%sysfunc(prxchange(s/(.*) - .*$/$1/, -1, &clientfolder));

 /* Canonical regex string substitution substr tranwrd replacement: */
description=prxchange('s/MTM Program//', -1, description);

 /* Reverse two names */
name=prxchange('s/(\w+), (\w+)/$2 $1/', -1, name);

if prxmatch('/toyota|kia|honda/i', text) then type='Import';

prxparse (compile regex that can later be used for searching within a character value) similar to using qr{} or /o with a regexp search
prxmatch similar to source =~ /perl-regex/
prxsubstr (return position and length of where a regexp matches in source) similar to source =~ /perl-regex/g; start = pos source; length = length $&;
prxnext (return position and length of where a regexp matches in source starting at start and ending at stop) similar to using the /g and /c options
prxparen (return the last number of the last submatch that matched) similar to $+
prxchange similar to old-string =~ s/perl-regexp/replacement/

 /* Fix mask loose single quote apostrophe e.g. 123O'LEARY or O'NEAL in Postgres query prior to enquoting it by doubling it: */
select prxchange("s/'/''/", -1, upid) as upid

 /* Does a dataset exist?: */
%let dsexist=%sysfunc(EXIST(sashelp.zipcode));

%let thispgm=%sysfunc(getoption(SYSIN));

 /* Zero pad a char that looks like a number to 4 leading zeros: */
data _null_; x='04'; y= put(input(x, BEST. -L), Z4.); put y=; run;
... din2=put(input(din,8.),Z8.);  /* char 2 to 00000002 */

 /* Canonical email send: */
filename MAILTHIS email ('a@foo.com' 'b@foo.com') cc="&user@foo.com" subject="&clientname" attach=("&loc/&fn" "&loc/&fn2"); data _null_; file MAILTHIS; put 'ok'; put; run;

 /* Build a single quoted string for Oracle, Postgres etc (but FAILS with leading zero numbers, try ndc::integer or see alternative build_db_query_list_via_macro.sas): */
proc sql; select ndc into :medlist separated by ',' from l.t; quit;  data _null_; call symput('medlist2', catq('1AC', &medlist)); run;

 /* Rename a dataset's variable: */
proc datasets lib=work; modify stores; rename clients_fkid=clientid; run;

ODS PATH work.templat(update) sasuser.templat(read) sashelp.tmplmst(read);
 /* ERROR: Template 'Tagsets.Msoffice2k_x' was unable to write to template store!  Use: */
ODS PATH (prepend) work.templat(update);

 /* List all filename reference filerefs: */
filename _ALL_ list;

 /* Find these via $ sas ... -rtrace all -rtracelog myrtrace.log */
/sas/sashome/SASFoundation/9.4/autoexec.sas
/sas/config/Lev1/SASApp/appserver_autoexec_usermods.sas

 /* Is phone number valid based on length flag: */
select patientphonenbr, case when length(patientphonenbr)=10 then 1 else 0 end as validPhoneFlag from t;

 /* Indicates your .map file is missing: ERROR: XML describe error: . */

 /* Only dates in the last 365 days: */
where mydate >= date()-365

 /* Canonical macro do while space-separated list loop iterate without an index counter: */
%let i=1; %let clid=%qscan(&clientid_ind, &i, %str( )); %do %while ( &clid ne %str( ) ); ...  %let i=%eval(&i+1); %let clid=%qscan(&clientid_ind, &i, %str( ));

 /* Loop a range of SAS dates: */
%let start=%sysfunc(inputn(12DEC2015,ANYDTDTE9.)); %let end=%sysfunc(inputn(14DEC2015,ANYDTDTE9.)); %let nday=%eval(&end-&start); %do j=0 %to &nday; ... %end;

 /* Missing dot to zero: */
select a.*, (case when b.TotalEnrolledLst30 ne . then b.TotalEnrolledLst30 else 0 end) as TotalEnrolledLst30 from t1 a LEFT JOIN totenr30 b on a.clientid=b.clientid

 /* Database trace: */
option SASTRACE=",,,d" no$stsuffix SASTRACELOC=saslog; 

 /* Date convert macro '2015-10-01' for Postgres */
%put %bquote(')%sysfunc(putn(%sysfunc(inputn(20151001, YYMMDD8.)), YYMMDD10.))%bquote(');

 /* Date format convert 22FEB2016 to 20160222 in macro: */
%let mydt=%sysfunc(putn(%sysfunc(inputn(&SYSDATE, DATE9.)), YYMMDDN8.));
 /* SYSDATE to dashes 2016-02-22 */
%let mydt=%sysfunc(putn(%sysfunc(inputn(&SYSDATE, DATE9.)), YYMMDDD10.));

 /* Comment out keybinding in EG: Ctl+/  Uncomment in EG: Ctl+Shift+/ */

 /* Determine informat at runtime based on a flag: */
else if flag=3 then chardata=inputc(char_data,"$UPCASE22.");
else if flag=3 then sasnumdate=inputn(char_date,"YYMMDD10.");

 /* Char2num make both vars numeric on the fly for the join: */
from csv3 a left join db52 b on a.storeid_csv=input(b.storeid_db5, 8.) and a.pharmacypatientid_csv=input(b.pharmacypatientid_db5, 8.)

 /* Create composite proc sql index: */
proc sql; create index places on sql.newcountries(name, continent); quit;

 /* Command line SAS with an option set: */
/sas/sashome/SASFoundation/9.4/sas -nodms -validvarname any
endsas;

 /* Week number starting with Mon thru Sun */
data; weeknum=week("&sysdate"d, 'W'); put weeknum=; run;

 /* Month number */
monthnum=month(datepart(lastmodifieddt));

 /* Write a csv file using ODS: */
ods CSVALL file='/Drugs/TMMEligibility/ClarksRxBo/Imports/t2.csv'; proc print data=sashelp.cars; run; ods CSVALL close;

 /* Append a record to end of dataset: */
data weekcnt; set weekcnt end=e; output; if e then do; clientstoreid='999'; weeknum=6; output; end; run;

 /* datetime to date */
select clientstoreid, put(datepart(lastmodified), DATE9.) as dtlastmodified, count(*)
select put(max(filldate), DATE9.) as humandate

 /* Conditional minimalist send email from datastep: */
...else do; put 'fail ' rc1=; to='bob.heckel@taeb.com'; file DUMMY email filevar=to subject="Error during &SYSPROCESSNAME execution"; stop; end;
if rc1 eq 0 then do; put 'NOTE: chmod successful'; end; else do; put 'ERROR: chmod fail'; to='obb.heckel@taeb.com'; file DUMMY email filevar=to subject="Error during %sysfunc(getoption(SYSIN))"; end;

x umask 000; data l.junk;set sashelp.shoes;run;  /* -rw-rw-rw-. 1 bheckel staff 128K Feb 23 16:04 /mnt/nfs/home/bheckel/junk.sas7bdat */
x umask 777; data l.junk;set sashelp.shoes;run;  /* ----------. 1 bheckel staff 128K Feb 23 16:06 /mnt/nfs/home/bheckel/junk.sas7bdat */

 /* Skip non-PDF files check file extension: */
if reverse(upcase(left(trim(f)))) eq: 'FDP';

 /* SAS performance tuning: */
1-For nominally good SAS I/O performance, you should see job steps in your SAS logs with combined CPU + User CPU time within 10% of the Real Time.
2-As a general rule, the User CPU Time value added to the System CPU Time value should be fairly close to the Real Time value. If the Real Time value is much higher, as it is in this example, then you have a problem that needs to be corrected. 

 /* Append export write Excel worksheet to an existing multi tab workbook: */
PROC EXPORT DATA=sashelp.prdsale OUTFILE="t.xlsx" DBMS=XLSX REPLACE; SHEET="PRSALE"; RUN;

 /* SAS EG default port is 8561 */

 /* PC SAS clear previously compiled macros before rerunning - pick up changes to called macro during debugging: */
proc catalog cat=work.sasmacr; delete mailteam / et=macro; quit;
 /* SAS EG clear previously compiled macros before rerunning - pick up changes to called macro during debugging: */
proc catalog cat=work.sasmac1; delete mailteam / et=macro; quit;

 /* Print a SAS catalog: */
proc catalog cat=work.sasmac1; contents out=new; run;

 /* Show how SAS has translated your SQL:  NOTE: Statement transforms to: */
proc sql FEEDBACK; ...

select clientid, storeid, pharmacypatientid, max(greatest(solddate,filldate)) as max_solddate, max(solddate+dayssupply) as next_visit, max(solddate+dayssupply)-CURRENT_DATE as duedays, max(solddate)-CURRENT_DATE as recent_visit from rxfilldata_parent ...

 /* Choose cgid if populated otherwise use default of 0: */
put(coalesce(cgid,0),8.);

 /* Convert date today macro date now to human formatted e.g. 20161109: */
%let today=%sysfunc(date(), YYMMDDN8.);

 /* Collapse multiple rows to single row: */
data xx; update xx(obs=0) xx; by idnum; run;

 /* Send stderr to file: */
rc1=system("/Drugs/Cron/Daily/AholdImm/aholdimm.sh &path./foldername/Output/Imm_.csv 2>/Drugs/Cron/Daily/AholdImm/Aholdimm_encrypt.err");

 /* Count number of variables named flag_* */
proc sql; select count(*) into :nvars TRIMMED from dictionary.columns where libname='WORK' and memname='MYDS' and name like 'flag_%'; quit;

 /* Add 1 to each variable var_N */
data t; set t; array arr var_:; do over arr; arr+1; end; run;

 /* Take the 90th thru 100th obs only, a semi-random pull: */
proc print data=_LAST_(firstobs=90 obs=100) width=minimum heading=H;run

 /* SQL on one not on the other: */
proc sql; create table on_cce_not_softdel as select a.* from cce a left join softdel b on a.aid=b.aid where b.id is null; quit;

 /* Pass OPTIONS at SAS startup: */
export SASV9_OPTIONS='-validvarname=any'
proc options;run;

 /* Postgres cast to fix rogue string in an integer-like field problem: */
and (clientid=&clid. or (case when npi in ('NOT FOUND','') then '0000000000000000000000' else NPI end)::integer in (&&cl_npi.))

where (age>=18 and age<=80) and (filldate>=date()-90)

 /* Avoid proc graph GUI from popping up at each slide produced: */
goptions NOdisplay;

 /* Zero pad a character var that looks like a numeric: */
select put(input(storenum,4.),z4.) as clientstoreid, ...

 /* Delete obs if all vars are missing: */
options missing=''; ... if missing(cats(of _ALL_)) then delete;

 /* Convert date beginning of month six months ago to end of previous month: */
%let minbom=%sysfunc(intnx(MONTH, "&SYSDATE"d, -6, B),date9.); %let maxbom=%sysfunc(intnx(MONTH, "&SYSDATE"d, -1, E),date9.);

 /* Double ampersand macro resolution: */
%let n=3; %let x3=thisprints; %put &&x&n;
 /* Triple ampersand macro resolution: */
%let x=temp; %let n=3; %let temp3=thisprints; %put &&&x&n;

 /* Unique AUTOMATIC SYSPROCESSNAME Program name e.g. tmpsas.19660.sas */

 /* Use bang for temporary directory: */
filename mytemp '!temp/t.txt';
infile '!userprofile/t.txt';  /* Windows */

if anyfirst(x) then put 'valid first char for varname when validvarname=V7'
if anyfirst(x,3) then put 'valid third char for varname when validvarname=V7'
if notfirst(x) then put 'invalid first char for varname when validvarname=V7'

if holidaytest('Christmas', today()) then put 'merry xmas'

connect to Postgres as myconn (server='db-03.mrk.taeb.com' database=taeb user=&user. password=&jasperpassword. readbuff=7000);

 /* Add a dummy record to end of an existing dataset: */
data t; set data.fnl end=e; output; if e then do; clientid=685; output; end; run;

 /* Single quote for Postgres etc: */
select distinct quote(gpi,"'") into :gpis separated by ','
select cats("'",ndc,"'") into: ndc_str separated by ','

 /* Age bucket groupings 10-19 20-29 etc. */
data _null_; age=12; age10=age-mod(age,10); put age10=; run;

proc sql; select foo, today() as startdate format date9.,today()+8 as enddate format date9.,1000000 as ranking from t; quit;

 /* Count distinct values of a variable: */
ods select nlevels; proc freq data=sashelp.class nlevels; tables name age sex; run; 

 /* Date dashes */
select b.atebpatientid, storenum, cnt, today() as dt format=YYMMDDD10.

 /* Zero pad a char */
select atebpatientid, storenum, cats(%rml0(storenum),pharmacypatientid) as upid, put(input(storenum,4.),z4.) as storenumz

 /* Unique id for running SAS macro process: */
%let style=style_&SYSMACRONAME._&SYSPROCESSID;
 /* e.g. styletmpsas41DA9A76AE00C4374018000000000000 */
%let uniqueid=style%sysfunc(scan(&SYSPROCESSNAME, 2))&SYSPROCESSID;

/* Exclusion join to keep only the records with the minimum age when there are more than one */
proc sql; select a.* from  l.rxfilldata_extra a left join l.rxfilldata_extra b on (a.storeid=b.storeid and a.pharmacypatientid=b.pharmacypatientid and a.age>b.age) where b.storeid is null and b.pharmacypatientid is null; quit;

second_largest_num=largest(2, 456, 789, .Q, 123);  /* 456 */
 /* SMALLEST function counts only nonmissing values */
fourth_smallest_num1=smallest(4, 1, 2, 3, -4, 5, ., 7);  /* 3 */
fourth_smallest_num2=ordinal(4, 1, 2, 3, -4, 5, ., 7);  /* 2 */

guid=uuidgen();

 /* WHERE wildcard numeric sequence: */
where rank IN(1:10)

data;len=lengthn('ABC ');put len;run;  /* 3 */

# Convert SAS Log to SAS Code:
sed '/^[^[0-9]/d;/SAS/d; /^$/d;/DATA?:?:?/d; /\*[0-9]/d' ~/tmp/1 |cut -c6-256 |tr ! ' ' |sed '/^[^ ]/d' > t.sas

tail -f /sas/config/Lev1/Logs/SASMeta_MetadataServer_2016-10-31_sas-01_2955.log

vi /sas/config/Lev1/SASMeta/MetadataServer/omaconfig.xml

 /* Bulk load a dataset insert into a database table: */
proc append base=mydb.mytbl (bulkload=yes bl_datafile="/tmp/data" bl_logfile="/tmp/bulkload_log" BL_LOAD_METHOD=APPEND) data=myinserts; run;

proc freq data=ar2_advair511 ; tables ptsex*fillmo / MISSPRINT; run;  /* row*col and include missing */

array datearray[*] Columbus Hastings Nicea (1492 1066 325); idx=whichn(1066, of datearray[*]);  /* returns array index 2 */

no_controlchar_punctuation_digits=compress('foo,bar.8', , 'CPD');

 /* Set flag when the sum of certain vars is greater than 10: */
array nvars[*] x1-x3; if sum(of nvars[*]))>10 then flag=1; else flag=0;

xxSASxx END:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:


xxUNIXxx START:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: {{{1

# Canonical date stamp:
date +%d%b%y  # 31Mar16 like SAS DATE7.
TODAY=`date +%Y%m%d`  # 20160331

# Canonical find and then grep
find /opt/QCServer/A.05.00/svr/files -name 'Inspec_Lot-*' -mtime -3 | xargs grep "Error:"
ssh tpsh005 'find /opt/QCServer/A.05.00/svr/files -name 'Inspec_Lot-*' -mtime -3 -exec grep "Error:" {} \;'
ssh tpsh005 'find /opt/QCServer/A.05.00/svr/files -name 'Inspec_Lot-*' -mtime -3 -exec grep "Error:" {} \; | tail'

# Find newish file that is not empty:
ssh tpsh005 find /home/gaaadmin/GAAAdapter/gaa/logs -name 'InspectionRes*error*' -mtime -7 -a -size +0

# Specify different user to login as:
ssh -l root 192.168.0.108

# grep but skip, ignore, the string 'foo' if in the same line:
grep findme * | grep -v foo
find . -name '*.sas7bdat' -a -not -name '*tr_*' |xargs \ls -l

# Look in Julie chats for password related info (with context)
find . -name '*Julie*.txt' -print0 | xargs -0 grep -3 -i 'password'

# Poor man's copy cp:
$ cat <original.txt >duplicate.txt

# Remove or uninstall accidentally untarred mess from a directory.  Tar undo.
# (Note: sometimes must gunzip first before untar; often must cd to / )
$ tar xvfj ~/w3m-0.5.2-2.tar.bz2  # original extraction
$ tar -tf ~/w3m-0.5.2-2.tar.bz2 | xargs rm -v  # reverse untar mistake

# Direct data to one file and errors to another:
(cat bladerun_crawl.txt nosuchfile.txt > bladerun_crawlcontents.txt) 2> errmsgonly.txt

# Redirect both STDOUT and STDERR in one file, send nothing to the console (error messages are written to STDOUT instead of STDERR)
$ ls goodfile.txt nosuchfile.txt > lsOutputWithAnyErrorMessages.txt 2>&1

# Keep a record of software installation:
$ ./configure 2>&1 | tee log.configure
$ apt-get upgrade | tee ~/tmp/apt-get-upgrade-$(date +%F).log
$ make 2>&1 | tee build.log
# To append further log to build.log, continue with:
$ make modules 2>&1 | tee -a build.log

# grep search for more than one pattern:
egrep 'foo bar|%JET' *

# Copy everything (except dot files) in a dir except for one file (smb.txt in this case):
cp /notathome/[^smb.txt]* /foodir

# Copy everything (including dotfiles & dot directories!) downward. /copiedtohere must exist first.
cp -R .* /copiedtohere
# Copy everything (including dotfiles & dot directories!) downward. /copiedtohere need not exists, it is created.
cp -R ~/copiedtohere .

# Don't show .c files
ls *[^c]
# Don't show files starting with a OR b
ls [^ab]*

# Compact move instead of the traditional  mv /usr/bin/foo /usr/bin/foo.bak 
mv -i /usr/bin/{foo,foo.bak} 
# or backup a file quickly:
cp myfilename{,.bak}

# Count how many directories (not including files, don't recurse):
\ls -ld * | grep "^d"| wc -l
# or
\ls -ld | awk '{if (/^d/) print $9}' | wc -l
# or print names of dirs
\ls -l | awk '{if (/^d/) print $9}'

# Count number of letters, etc. on the fly (-n skips automatic newline):
echo -n 'count me' | wc

# Count how many Vim Scripts use ``execute''?:
$ find /usr/local/share/vim -type f -name \*.vim -exec grep -l '\<exe\(c\(u\(te\?\)\?\)\?\)\?\>' {} \; | wc -l

# Enable readline on command line
set -o vi

# Reset terminal: 
echo CTRL-V ESC c 
stty sane
stty erase ^H  # or stty ^?
# Turn off echoing of keystrokes (stty echo to turn back on)
stty -echo  

# List contents of file, breaking it up into one word per line. 
cat foo.txt | xargs -n1

# Keep checking on dead server with a shell do-loop or use my ruup - bash
while true; do ping -n 2 mainframe; date; sleep 600; done;
# or
while : ;do ping 47.143.212.20; sleep 600; done

# Infinite loop from the command line - ksh
while [ 1 ]; do date; sleep 10; done;
# or
while [ true ]; do date; sleep 10; done;

# Canonical Shell do loop.  Do something in a loop 3 times:
$ for i in 1 2 3; do echo 'bobh'; sleep $i; done

# Remote copy syntax example
rcp foo.txt zrtph128:/home/rheckel/tmp

# On the REMOTE Unix box:
$ /usr/X11R6/bin/xhost +daeb  # sometimes required to be run on LOCAL MACHINE
# On the LOCAL PC:
$ export DISPLAY=47.143.210.171:0.0  <---sometimes leave off the last .0
$ /usr/dt/bin/netscape &
# or one-shot on LOCAL machine (assuming X-server is running on PC):
$ export DISPLAY=158.111.250.163:0.0 && mozilla&
# Test it:
/usr/bin/X11/xterm

# crontab -e fields: min hr day mon wkday(0=Sun,6=Sat)

# Run cron job on last day of every month
00 07 28-31 * * [[ $(date -d +1day +\%d) -eq 01 ]] && echo 'james script will be ok at 500 today' | mailx bheckel@gmail.com
# Run cron job every 30 minutes:
5,35 * * * * /usr/bin/dfmon
# Run cron job every Saturday & Sunday at 3:59am 4:59am 5:59pm
59 3,4,17 * * 6-7 /bin/df -h 

# When a script is started from cron and anything is sent to STDOUT it will either get logged in the system messages file or emailed.  To prevent this:
5 0 * * * /usr/bin/disk_hogs > /dev/null 2>&1
# Avoid cron email on cron output (use logfile instead):
59 * * * * /usr/bin/fooprg >> /home/rheckel/fooprglog.txt 2>&1

59 5 6 * * mailx -s "Automated reminder from Bob" aendbmom@yahoo.com </arpa/af/b/rheckel/mailxmsg.txt

# Watch file sizes using cron and email every day at 2:05
5 2 * * * find /apache/logs/access_log -size +10000000c  | mailx -s "file is getting too big" admin@rocket.ugu.com
# Rotate if filesize is half a gigabyte or larger:
15 4 * * * find /opt/apache/logs/access_log -size +500000000c && /opt/bin/rotatelog

30 09,15,20 * * * grep http /home/chronos/user/Bookmarks | awk '{print $2}'| sed 's/"//g' | sed 's/$/<BR>/' >| /home/chronos/user/Dropbox/Public/Equanimity/bm.html 2>|/home/chronos/user/cron.log

# Human readable disk space Solaris
df -h
# Human readable disk space HPUX
bdf
# Top CPU users HPUX
UNIX95= ps -eo user,pid,pcpu,comm | sort -nrbk3 | head -10

# Poor man's cron bash.  Trigger at 4:00-4:59pm:
while true; do if [ `date +%H` -eq 16 ];then echo 'ok';fi; sleep 60; done
# Poor man's cron ksh.  Trigger at 4:00-4:59pm:
while [ 1 ]; do if [ `date +%H` -eq 16 ]; then date; fi; sleep 60; done;
# Poor man's cron.  Trigger at 8:11
while true; do if [ `date +%H` -eq 8 -a `date +%M` -eq 11 ];then echo 'ok';fi; sleep 60; done
# Poor man's cron.  Do NOT trigger the 4 o'clock run when I might be undocking
while true; do if [ `date +%M` -eq 20 -a `date +%H` -ne 16 ];then date;datapost_check.sh; fi; sleep 60; done
# Poor man's killer cron - closes rxvt when done
while true; do if [ `date +%H` -eq 16 ];then /bin/kill 1035;exit;fi; sleep 59; done

# Determine IP address on Unix:
ping `hostname`
# or determine IP address on Unix:
who -u
# or determine IP address on Unix:
grep `hostname` /etc/hosts | awk '{ print $1 }'
# or determine IP address on Unix:
ifconfig | grep "inet addr" |  grep -v "127.0.0.1" | awk '{print $2;}' |  awk -F ':' '{print $2;}'

# Start (stop, restart) Samba on RedHat:
/etc/rc.d/init.d/smb start
/sbin/service smb status

# Restart Apache if can't find apachectl
kill -HUP `cat /apache/logs/httpd.pid`
# Restart Apache more gracefully
/usr/local/apache/bin/apachectl restart

# Send one program's STDIN to another's STDOUT using a pipe with no name.
$ mkfifo foo; cat foo
# In another xterm
$ cat > foo                   # and start typing
# or
# cat >/mnt/floppy/brewery    # and start typing

# Kill a user:
$ kill -9 `ps -aef | grep jondoe | awk '{print $2}'`
for p in `pgrep httpd`; do kill -9 $p; done
# Kill several related processes at once:
ps | grep httpd | awk '{print $1}' | xargs kill -9

# Kill all LIMS users:
ps -es | grep lms_client_techops | while read pid; do echo $pid kill -9 $pid; done

# Instead of doing a ps -ef to know the pid and kill it manually every time:
$ kill `ps -ef | grep \`whoami\` | grep myProcess | grep -v grep | awk '{print $2}'` 

# If killall isn't working find pid:
for p in `pgrep smbd`; do kill -9 $p; done

# Kill fscking Norton antivirus
winkill `ps -W | grep rtvscan | head -n1 | awk '{print $1}'`

# Create a ~500MB (~500,000,000 bytes) dummy file of garbage (like mkfile) that is a specific size in bytes:
#                             ea block   num blocks
dd if=/dev/zero of=biggarbage bs=50000 count=10000

# chmod: 4 Read  2 Write  1 eXecute  (User, Group, Others (neither U nor G), All)
# For directories, 'read' permission is necessary to ls directory's contents.
# For directories, 'write' permission permits adding, removing, and renaming files in that directory
chmod +t pub/  # assumes  chmod o+x pub/  happened earlier
# For directories, 'execute' permission is sometimes called 'search' permission and is necessary to actually cd to it. Others must know the name of the file.
# You can ordinarily delete a file if you have write access to the directory that contains it, even if you are not the file's owner - if you only want to permit adding or deleting of a user's own files, set the poorly-named sticky bit (common for /tmp):
chmod 701 semiprivate/  # drwx-----x so ls -l semiprivate/ fails but ls -l semiprivate/foo.txt works
# Set UID, setuid.  As root:
chmod +s anyonecanrunthisvirus
# or (maybe better)
chmod 4755 anyonecanrunthisvirus
# Enable all world to run command:
chmod a+x runvirus.sh
# Recursive:
chmod -R 755 .

# Use a remote file as a template:
#             -------remote----------   --local--
rsh zrtph128 'cat /home/rheckel/junk' | vi -

# Canonical sort by largest files (descending), assumes filesize is in 5th column
ls -l | sort -r -n -k 5

# Top 20 largest files AND directories (Cygwin):
sudo du -sk /saswork/* | sort -rn | head -n20  # must use the '*' or get dir tot only
# Diskhogs
sudo du -sk /saswork/* | sort -rn | head -n20 | awk '{print $2}' | xargs sudo ls -dl
# Total size of each item (file or directory) in CWD and sort numerically:
for i in *; do du -sk $i; done | sort -n

# HP-UX System Admin Tool -- sam
# Solaris Administration Tool -- admintool or sam
# Solaris top is prstat

# The first tar command creates (cf) an archive of thedir and places it into
# a buffer, instead of creating a file or writing it off to a tape. While the
# data is in the buffered area (-), it is sent to the remote host. When the
# data arrives at the remote host, the command changes to the directory /home
# and begins to extract ( xvfB) the contents of the archive from the buffer
# where it resides.  (B) is used for blocking and should be used to prevent
# data loss across the network.
tar cf - tar_me | rsh theotherserver '( cd /home/rheckel/todel; tar xvfB - )'

# Backup workbox code changes each weekday (where code/ is mounted, not symlinked) using a sentinel:
(cd; touch .sentinel -d 'last monday 7am'; find code -type f -not -name '*.sw[op]' -daystart -newer .sentinel | xargs tar cvfz ${HOSTNAME}.tgz)
# Update code from emailed tgz on one of the homeboxes
(cd; tar --extract --verbose --gzip --keep-newer-files --file=ZEBWL10D43164.tgz)
# Backup homebox code since last "sync".  From any dropbox-aware box.
(cd; touch -d 'last friday 16:30' .sentinel && find -L code -type f -not -name '*.sw[op]' -newer .sentinel | xargs tar cvfz ${HOSTNAME}.tgz)
# Midweek backup homebox code (since last "sync").  From box the last untar occurred on.  ASSUMES tgz timestamp isn't from email save time.
(cd; find -L code -type f -not -name '*.sw[op]' -daystart -newer ZEBWL10D43164.tgz | xargs tar cvfz ${HOSTNAME}.tgz)

# passwd format
#    0        1          2          3        4      5       6
# Username:Password:Userid_Num:Groupid_Num:Gecos:Home_Dir:Shell

# Get basename and fully qualified path FQP from $1
$ basenm=`basename $1`
$ dirnm=`dirname $1`
$ echo "debug ${dirnm}${basenm}"
# or a replacement for 'basename'
the_var=foo.txt; echo ${the_var%.*}      <---returns foo

# Get basename
foo=file.tar.gz
echo ${foo%.*}  <---returns file.tar

# Test availability of all hosts:
grep -v "#" /etc/hosts | awk '{print $1}' | xargs ping -c 1
# Contrast with (better if doing more than just a single command):
grep -v "#" /etc/hosts | awk '{print $1}' | while read EACHHOST do
  ping -c 1 $EACHHOST
done

# Keep alive keepalive after exit logout.  Execute it with the command "nohup", then log out.
nohup tar -cf /dev/tape /home &
nohup while true; do date; sleep 5; done  # fails! must be in a script

# Throw away 'Permission denied', etc. by dumping STDERR to null.
find / -name foo 2>/dev/null

# FIND (modify time could be == create time if file is new)
find . -type f -amin -10 -print # files accessed in last 10 minutes
find . -type f -atime -2        # files accessed in last 2 days
find . -type f -mmin -5         # files modified in last 5 minutes
find . -type f -mtime -1        # files modified in last 1 day (24 hours)
find . -mtime +3 -mtime -8      # a range of times (-a is optional)
find . -daystart -mtime 0       # files created since 12 midnight today
find . -daystart -mtime 1       # files created since 12 midnight yesterday (i.e. files NOT created today)
find . -type f -atime +30       # files that have not been read in 30+ days
find . -size 42c                # files exactly 42 bytes
find . -maxdepth 1              # only look in CWD, do not recurse
find . -path '*bqh0'            # directories with the word 'bqh0' at the end

# Canonical Cygwin-safe spaces safe find - what changed during the last week?
find . -mtime -7 -type f -print0 | xargs -0 ls -lt

#                               important
find . -name '.*\.sw*' -exec rm -i {} \;  # eliminate swp,etc. swapfiles
#                                    ^
find mydir/ -name *foo* -exec ls -l {} \;
find mydir/ -name *foo* | xargs ls -l

# Call find(1) recursively to find everything named junk* that is not a dir:
find -name 'junk*' ! -type d -exec find {} \;

# Sum file sizes using awk
find . -name '??03*' | xargs ls -l | awk '{s+=$5}END{print s}'
# Sum file sizes using awk - safe for spaces in filenames
find . -maxdepth 1 -name '*.xls' -print0 | xargs -0 ls -l | awk '{s+=$5}END{print s}'

# Recursively delete files older than 2 weeks old - spaces in name safe:
find . -mtime +14 -print0 | xargs -0 rm

# Sum file sizes WITHOUT using awk.  Shell's SET creates numbered variables for each whitespace-separated element, size happens to be in position $3
t=0; for f in $(ls); do set -- $(ls -lgo $f); ((t=$t+$3)); done; echo $t

# Show only files starting with b, c or containing 'part' somewhere in the name:
ls foo.{b*,c*,prc,*part*}
# or count specific filetypes
ls {*htm,*xls} | wc
# but for find(1), must do this:
find -name '*.txt' -o -name '*.sas' -a -not -name 'google.sas' -a -not -name 'foo*'
FILES=$(find $PTHCODE -type f -not -name baseline.md5 -a -not -name '*.log' -a -not -name '*.lst' -a -not -name '*.txt')

# Do certain filetypes exist in a directory?
PDBSEXIST=$(find "$PDB" '*.pdb' -type f -printf "%s" 2>/dev/null)
if [ -n  "$PDBSEXIST" ];then ...

# Use rough date to find files earlier older than the last time you looked
find '//Bredsntp002/uk_gms_wre_data_area/GDM Reporting Profiles/DATAPOST/Verified/' -newer /cygdrive/u/tmp/mdes.timestamp && touch $u/tmp/mdes.timestamp

# Finding files between datestamp June 26 and June 30 (midnight):
touch -t 200406260000 /tmp/t1 && touch -t 200406300000 /tmp/t2
find . -newer /tmp/t1 ! -newer /tmp/t2

# Watch, poll, directory for new files (but won't notice files copied with older timstamps)
touch /tmp/f1 && while true;do find /home -newer /tmp/f1 2>/dev/null;touch /tmp/f1;sleep 5;done

# Recursive touch
$ find . -type f -mtime -40 -name '*sas' | xargs touch
# Recursive touch(1) for dirs that might have spaces in names
$ find from -print0 |xargs -0 touch

# Troubleshoot a disk full error (find the largest big offending file):
find / -type f -size +1000000c -exec ls -l {} \; 2>/dev/null | grep -v "/proc"
find /workspace -type f -size +50G -exec ls -lh {} \;
# Troubleshoot find largest file:
find ~/tmp -size +1M | xargs ls -lh | awk '{print$5,$3,$4,$6,$7,$8,$9}' | sort -rh

# Find files in the /tmp directory that are larger than 10 megabytes (10 million bytes) that have not been modified in the last 48 hours:
find /tmp -size +10000000c -and -mtime +2

# Use the rotate utility if a logfile gets to be 2MB or larger:
find . -name access.log -size +1900000c -exec rotate {} \;

# Tarball files in CWD created in the last 24 hours:
find -mtime -1 -type f | xargs tar cvfz junk.tgz

# Tar only the top level directory, skip do not tar subdirectories:
find mydir -maxdepth 1 ! -type d -exec tar cvfz bobh.tgz {} \;
find mydir -maxdepth 1 ! -type d  | xargs tar cvfz bobh.tgz

# tar(1) is a bitch when it comes to specifying individual files, use this instead:
cat my_FullyQualified_filelist.txt | xargs tar cvfz onlySpecificFilesTarred.tgz

find -type f -mtime -1|xargs tar cvfz foo/t.tar.gz && scp foo/t.tar.gz rheckel@daeb:~/tmp/

# Recursive grep (if no GNU -r available and even that doesn't always work):
find . -name '*.h' -exec grep -H foostring {} \;
# or better recursive grep
find . -type f -print | xargs grep foo
find /Drugs/xron -type f -print0 |xargs -0 grep -i Weekly_Detail
# or                                   discard STDERR
find . -type f -print | xargs grep foo 2> /dev/null
# or all text _without_ specifying which file(s) the text came from:
find . -type f -exec grep -i foo {} \;
# or all text specifying which file(s) the text came from (filename will be below the find results):
find . -type f -exec grep -i foo {} \; -print
# or, just the filenames.
find . -type f -exec grep -il foo {} \;

# Find, prompt, then remove if y.
find . -inum 123 -ok rm {} \;
find . -inum 123 | xargs rm -i;
find . -inum 123 -exec rm -i {} \; 

# Recursively update timestamps on all files and directories from current one downward:
find . | xargs touch

# Find files except for file named foo.log:
find -name 'foo????' -a ! -name '*.log'

# To find permissions setuid and setgid file.  Spaces around parens are mandatory, the -a isn't.
find / -type f -a \( -perm -4000 -o -perm -2000 \) -print
find / -perm -0600 -print 2>/dev/null   # finds -rw-r--r--
find / -perm 0600  -print 2>/dev/null   # not   -rw-r--r-- only finds -rw-------
# Find -rwxrwxr-- that aren't symlinks (usually 777)
find . -perm -0775 -a ! -type l
# Find group write files -rwxrwx---
find . -perm -0070 -a ! -type l

# Change permissions of specific filetypes:
find -name '*.pl' -exec chmod 755 {} \;
find $u/foodir -perm 000 |xargs chmod 755

# Copy all the files in a directory tree into the same, one, single, large directory, preserving their properties:
find . -type f -exec cp -p {} newdir/ \;

# Collect all user's .bash_history files
find / -type f -name .bash_history | xargs cat > /tmp/history.txt

# Find all dead symlinks and remove them:
find . -type l -print | perl -nle '-e || print' | xargs rm

# Non-GNU find is restricted to finding entire filenames so use this:
find / -print | grep 'fin.*me'

# Test parallel printer (as root): Use Ctr-V Ctrl-l to get the ^L.  It sends a form feed to eject the paper.  Type the quotes around it literally.
echo "This is a test." > /dev/lp0
echo "Please ignore this print job." > /dev/lp0
echo "^L" > /dev/lp0

$ sort junk | uniq >| junk

# Count number of blank (including whitespace chars) lines in Unix fmt textfile (see vi solution for better answer):
cat foo.txt | awk ' /^['\ '|'\\t']*$/ { ++x } END{ print "Blanks = " x } '

# Create patch(1) - stand in common parent directory of lao tzu:
diff -Nrup lao tzu >t.patch
# Install patch:
patch <t.patch lao  # or patch -u t.patch lao   lao and tzu are identical now
# Reverse patch:
patch -R < t.patch  # or patch -R t.patch lao   lao and tzu differ again
# Better approach for single file patch:
diff -u setup.html setup.new.html > setup.html.patch
patch --dry-run -Np0 -i setup.html.patch

# Fix a manpage.  The sed script has lines like  s/\.YODLTAGSTART\./\r\.YODLTAGSTART\./g
$ sed -f mysedpatchscript.sed /tmp/rxvt.1 > /usr/man/man1/rxvt.1

# Show others what you're doing on your terminal (demos, etc.).  Poor man's VNC.
bash 2>&1 | tee /tmp/demo      <---you
tail -f /tmp/demo              <---them

# Only important errors and track logfile from same tty that you're working:
tail -f /home/apache/logs/error_log | grep -v 'apache/icons/' &
tail -f /home/apache/logs/error_log | grep -v 'apache/icons/' 2>&1 | tee tail.log

# Do something if the shell receives a signal:
trap 'echo footrapped;' 1 2 3 15
# or
trap 'rm -f footrapped.txt; exit;' 1 2 3 15

# Use the user's PAGER if set, use more(1) otherwise:
${PAGER-more}

# Delete all except saveme.txt (a regex) from a directory (GNU ls only):
ls -I saveme.txt | xargs rm
# Wildcard list all files except FF* MF* NF* 
ls -I '[FMN]F*'
# Wildcard find everything except the file emacs:
find . -not -name emacs
# Wildcard open everything in the directory except file cp.sas
vi [^cp.sas]*

# ls everything except image files:
ls !(*jpg|*bmp)

# Untarball using bunzip2 (bzip2) instead of gzip:
bunzip2 linux-2.4.3.tar.bz2 | tar xvf -
# or if available just
tar tvfj jdk118_v3-glibc-2.1.3.tar.bz2 

# Redirection
mycommand >&0   <---STDIN  same as 0> I think
mycommand >&1   <---STDOUT  same as 1> I think
mycommand >&2   <---STDERR  same as 2> I think

# mod modulus division (every n item mod will equal 0).  Better might be to just use python.
bc -lwq    # if need modulus, from within bc, set scale=0

# mod modulus division
if (num % i == 0) { isPrime = false; }
E.g. 3 % 2 = 1    i.e. flip it 2/3 taking the remainder which is 1
E.g. 2 % 3 = 2    i.e. flip it 3/2 taking the remainder which is 2

# Primitive alarm clock
sleep `echo '60*2'|bc` && beep

# Run through base 2 decimal values using C-like syntax.  Prints 2, 4, 8, 16.
for ((i=1;i<5;i++));do echo "2^$i" | bc;done
# better
for ((i=1;i<=32;i++)); do echo -n "2^$i: "; echo "2^$i" | bc; done

# Enable bc floating point e.g. 42.123
set scale=3

# Command line on the fly bc calculation
(echo scale=5; echo 6954/10) | bc
# Canonical bc convert base 10 decimal to hex (note: bc is case sensitive for hex numbers!):
(echo obase=16; echo 10) | bc  # A
# Canonical bc convert hexadecimal to decimal in bc:
(echo ibase=16; echo DEADBEEF) | bc  # 3735928559
(echo obase=2; echo ibase=16; echo F) | bc  # 1111
(echo obase=10; echo ibase=2; echo 1111) | bc  # 15

# Binary addition subtraction multiplication division in bc:
ibase=2;obase=2

# Find size of certain files in dir:
wc [d-h]* 2>/dev/null | grep total | awk '{print $3}'
  
# Find library required e.g. '...shm1.c: undefined reference to `shmget''.  Then add -lcygipc to end of gcc command line in this IPC case.
cd /usr/lib; for i in 'lib*.a'; do echo $i; nm $i | grep shmget | grep -v UNDEF; done

# Vertical cat instead of horizontal cat
echo -n "hello world" | dd cbs=1 conv=unblock 2>/dev/null

# Write specific range of chars to a new file:
dd if=bladerun_crawl of=junkcrawl bs=1 skip=2 count=3

# Uppercase all characters in a file:
dd if=foo.txt of=foo.upper.txt conv=ucase # or lowercase dd if=foo.txt of=foo.lower.txt conv=lcase
# Uppercase all characters in a file:
cat foo.txt | tr '[a-z]' '[A-Z]' >| foo.txt # or lowercase cat foo.txt | tr '[A-Z]' '[a-z]' >| foo.txt

# Delete filenames containing spaces:
$ rm *\ *   $ rm *' '*

# Remove a file whose name is blank or nonprinting non-ASCII weird (i.e. find inode):
ls -i
# then rename using the inode (TODO can use mv {} with xargs??)
find . -inum 41734 -exec mv {} thenrmthisfile \;

# Find out types of files/executables in ~/bin:
for i in ~/bin/*; do file $i; done;

# Find multiple pattern filenames and open all in vi
vi `find . -name '*merge*' -o -name '*join*'`  # DON'T USE ...| xargs vi
# Find and edit vb source files in one swoop - good for code review:
find -mtime -7 -type f -name '*.vb' -print0 | xargs -0 vi  # DON'T USE ...| xargs vi -
# May be easier to edit the .tgz in vim:
find -mtime -7 -type f -name '*.vb' -print0 | xargs -0 tar cvfz junk.tgz

# Simple find and edit search string (like my bgrep but without duplicate filenames):
find /sasdata/Cron/Daily/HPTask -name '*.sas'|xargs grep 'any deceased pat' |awk -F: '{print $1}'|sort|uniq >|~/bob/tmp/1

vi `find . -name "*" -exec grep -l "bobh" {} \;`
# or just show filenames:
find . -name 'dlt*' -o -name 'tst*' -exec grep -l REVISER {} \;
# Find regex bobh or babh, etc. in all html docs, then edit each with vi.
vi `find . -type f -name "*.html" -print | (xargs grep -il "b[a-z]bh" 2>/dev/null)`
vi `grep -[r]il findthisstring *.html 2>/dev/null`

# Find newish files without a 'generated' string and prepare them for a code review form e.g. LotTracking/LotTracking/ASPNETWebApplication/Banner.ascx.vb,Jul-29-2009 13:47
$ find LotTracking/ -name '*.vb' -mtime -90 -print0 |xargs -0 grep -RZL 'This code was generated by a tool' | xargs -0 ls -l | awk '{print $9","$6"-"$7"-2009 "$8}'

# Change owner from me to you:
chown yourid myfile.txt
# Change owner and group simultaneously:
chown oracle:dba disownme.txt  # (or oracle.dba)

# Mount CDROM
mount -t iso9660 /dev/cdrom /mnt/cdrom
# Mount Android
sudo mount -t vfat /dev/sdb /media/Nexus -o uid=1000,gid=1000,utf8,dmask=027,fmask=137
# Unmount Android
sudo umount /media/Nexus

# Zero pad a list of numbers with leading zeros to produce e.g. 0012 0123...:
awk '{printf "%04d\n",$0}' listofnumbers.txt
# Comma delimited zero padded:
awk '{printf "%04d,",$0}' listofnumbers.txt

# Trap window resize:
kill -l    # to find the number for SIGWINCH
trap "echo caught SIGWINCH" 28  # then resize the window
# Trap Ctrl-c:
trap "echo caught SIGINT" 2

# Send mail from command line:
echo 'ok' | mailx bob@taeb.com
echo 'body' | /bin/mutt -s "subject line" robertheckel@solectron.com

# Cygwin.  Place a file's contents onto Clipboard:
cat clipboardme.html | putclip
# Cygwin. Place Clipboard contents into a file:
getclip > clipped.txt

sed 's/day/night/' <old.txt >new.txt

# Remove all double quote quotation marks.
sed 's/"//g' foo.txt > dequoted.txt

# Prints the line to terminal if found:
sed -n '/LADE/p' bladerun_crawl
awk '/LADE/' bladerun_crawl  # awk '/LADE/ {print $0}' bladerun_crawl

# Preview, debug, lines that will change:
sed '/eplic/{p;s/eplic/XYZ/}' bladerun_crawl

# Print only specific range lines 2, 3, 4 and 5:
sed -n '2,5p' bladerun_crawl
# Delete specific line numbers:
sed '2,5d' bladerun_crawl
sed '2,3d;7,8d' bladerun_crawl

# Chain multiple sed substitutions together:
sed 's/replic/xxx/i; s/retire/yyy/i' foo.txt |tee foo.txt >/dev/null 2>&1

# On lines containing the word 'were', do a double substitution:
sed '/were/{s/Repli/foo/;s/not/bar/}' bladerun_crawl >|bladerun_crawl2

# Save just the changed lines to file (for debugging dryrun):
sed 's/Repl/YYZ/w onlythechanges' bladerun_crawl >/dev/null 2>&1

# Double space doublespace a file:
sed G foo.txt
awk '{print ; print ""}' foo.txt

# Split on, parse, colon delimited file:
awk -F: '{print $1 " and " $2}' /etc/passwd
# Same
perl -ne '@x=split /:/; print "$x[0] and $x[1]\n"' /etc/passwd

# Print the entire line, $0, if the second field contains 'John' or 'Fred'.
awk '$2 ~ /John|Fred/ {print $0}' foo.txt

# cat file until the first blank line:
awk '$0 ~ /^$/ {exit;} {print $0;}' foo.txt

# Shift first entry to last entry (rearrange columns).
awk '{print $2, $3, $4, $1}' resortme.txt

# Find bash user's real names
awk 'BEGIN{FS=":"} $7 ~/bash/ {print $5}' /etc/passwd
# Better
awk -F: '$7 ~ /bash/ {print $5}' /etc/passwd

# Select a range of rows:
awk 'NR < 5 {print}' 8_2_ntlx72ba.bom
awk 'NR >5 && NR <11 {print}' 8_2_ntlx72ba.bom

rpm -qip foo.rpm          # query
rpm -qf /usr/sbin/bind    # give the installed pkg name & num
rpm -Uvh foo.rpm          # install
rpm -qa | grep -i pine    # determine if a pine RPM has been installed
rpm -e emacs              # remove

Athena scrollbars        middle mouse to drag the scroll bar up and down
Athena scrollbars High   left mouse scrolls one line up
Athena scrollbars Low    left mouse scrolls one page up
Athena scrollbars High   right mouse scrolls one line down
Athena scrollbars Low    right mouse scrolls one page down

# Checkout a repository on a remote machine:
export CVSROOT=:ext:rheckel@parsifal:/home/rheckel/repository && cvs co eandb

# Debian (at least) date undocumented set time (as root):
$ date --set=17:03:01

# Determine how much memory (in MB) you have:
$ free -m  # 193397 is 193G of RAM
vi /proc/meminfo
# Determine how much swap (in MB) you have on Solaris:
/usr/sbin/swap -s
# Determine how much memory (in MB) you have on Solaris:
prtconf -v | grep Memory
# Determine what platform you have on Solaris:
isainfo -v
# Determine processor you have on Solaris:
psrinfo -v

# Determine the maximum non-swap memory (in MB) you have on Solaris:
/usr/sbin/prtconf | grep Mem
# Vendorid/deviceid
prtconf -pv

# Echo rxvt text in color (type  echo "foo" with this after foo and before the closequote:  Ctrl-V Esc then [0;31;40mThis Is In Red")

A reasonable xterm font:
-b&h-arial-medium-*-*-*-12-*-*-*-*-*-iso8859-1

Cygwin/Linux - to get man -k working, must run makewhatis, Solaris must run catman

# Cut a specific part of a line of text (assumes you know number of fields):
echo 'foo_bar_baz' | cut -d'_' -f1     <---returns baz
echo 'foo bar baz' | cut -d' ' -f1-2   <---returns foo bar

# Can't do this with cut if you don't know your total number of fields:
echo 'foo bar baz' | awk '{print $NF}'
echo 'foo:bar:baz' | awk -F: '{print $NF}'
# And you sure as hell can't do this with cut to get the next-to-last field:
echo 'foo bar baz' | awk '{print $(NF-1)}'
echo 'foo:bar:baz' | awk -F: '{print $(NF-1)}'
# But you can't easily rebuild a tab-delimited file with awk so do this:
head TransactionDetails.dat | cut -d'	' -f2-4

# Determine if disk is almost full (Debian at least):
df -m|awk '{if ($5>=70 && NR>1) print $5,"      " $6 }'

# Remove files based on specific date of Jun 12 (GNU ls):
rm -i ` ls -Al | grep "Jun 12" | awk '{print $9}'`
# Or remove all files except for specific date of Jun 12 (GNU ls):
rm -i ` ls -Al | grep -v "Jun 12" | awk '{print $9}'`
# or just list files (note need 2 spaces for single digit date) modified on a
# specific date:
\ls -AlR | grep "Nov  7" | awk '{print $9}'

# Sort all files created in August by size (col 4, numeric):
ls -l | grep "Aug" | sort +4n

# Poor man's recursive ls:
for i in builddir datadir;do cd $i; ls; cd ..; done

# List all filesystems (e.g. /dev/sda2 ...)
df -k | awk '{print $1}' | sed -n "3,14 p"
# List all *supported* filesystems
cat /proc/filesystems

# Find your MAC address on Debian (via the network, not the card itself).
/sbin/ifconfig eth0       <---shows HWaddr
# or to find daeb's MAC address from a W2K box:
ping daeb
arp -a

# Don't copy exclude from copy all .bak files:
cp OpenRefreshSave.*[^bak] ~/code/vb/

# To format floppy:
mkfs -t ext2 /dev/fd0                <---at least Linux
fdformat -U -H                       <---at least Solaris, formats
newfs /vol/dev/rdiskette0/7alfprodu  <---at least Solaris, creates filesystem
volcheck                             <---at least Solaris, creates /floppy
cd /floppy/floppy0                   <---Windows formatted floppy is ok
eject floppy                     <---when done, don't need volume manager GUI

# Zero out (empty) a file, leaving zero bytes
>| wipeout.txt

# Combine and compress two files (better compression than using -c)
cat doserr2bat.sh open_write.c | gzip >foo.gz

# Rename files with spaces in their names:
for i in *; do mv "$i" `echo $i | sed 's/ /_/g'`; done
# or recursively rename files with the word 'one' in their name:
for i in `find -name '*one*'`; do mv "$i" `echo $i | sed 's/ /_/g'`; done

# Date calculation - add one day to today
echo `date +%s` + 86400 | bc
# Compare convert Unix and SAS epochs (10 years apart):
date +%s;echo `date +%s` + 315569520 | bc
# Convert a string date to a Unix datetime number.  Go from words to numbers.
date +%s -d'05/12/1998'
# Convert a string date to a SAS datetime number.  Go from words to numbers.
echo `date +%s -d'05/12/1998'` + 315569520 | bc

# Sort then sum a column
sed 's/[)(]//g' junk | awk '{print $2}' | sort | xargs | sed 's/ /+/g' | bc
# Sum disk sizes:
df | tail -6 | awk '{print $4}' |  xargs | sed 's/ /+/g' | bc
# Best summing of single column (elim trailing '+' problem):
du -sk  *.sas7bdat|awk '{sum += $1} END {print sum}'
find . -name '*sas' | xargs du -sk|awk '{sum += $1} END {print sum}'
# If spaces in filenames:
find . -name '*sas' -print0 | xargs -0 du -sk|awk '{sum += $1} END {print sum}'

# or not summing all lines:
cat foo.txt | awk '/OnlyTheseLines/{t+=$1} END{print t}'
# or sum list
for u in bxj9 cmc6; do du -sk $u|awk '{print $1}'; done | awk '{t+=$1} END{print t}'

Poor man's editor (create new file only) using HEREDOC:
cat > myfile.txt <<.    <---<CR>, then type, then end with . on it's own line

# Print user id who created file
ls -l | grep foo | awk '{print $3}'
# same (faster?)
ls -l | awk '/foo/ {print $3}'

# Create tarball of all files in pwd that contain string 'ESSENTIAL':
tar cvfz ~/tmp/essential.tgz `grep 'ESSENTIAL' * | awk -F: '{print $1}'`

# Determine total size of selected files.  Add sizes of files together.
wc *.txt

# Find lines that have string '21' in column position 7 and 8 (assumes file too big for vi):
sed -n '/^.\{6\}21/p' BF19.ZZX0166.MORMER
# Find lines that have a blank where ALIAS should be then find the records with February deathdates then count the number of records:
sed -n '/^.\{46\} /p' MORMER | sed -n '/^.\{48\}02/p' - | wc
# Same approach using Perl (perl -ne wraps an implicit loop around the file):
perl -ne 'print "1\n" if /^.{287}Y/' NATMER |wc
# Specific column.  If the file is small enough, repeated global commands in Vim database searching is easier:
:g!/^.\{46}02/d

# Like a database query subtotals counts by group i.e. proc freq textfile:
for i in `seq -w 01 57`; do echo -n $i:; sed -n "/^.\{76\}$i/p" foo.txt|wc -l; done
# Then drill down to view subset of state 14:
sed -n "/^.\{76\}14/p" fri2.txt >| small.txt

# Delete the first 42 columns from a textfile:
sed 's/.\{42\}//' foo.txt  # 1,$s/.\{42\}//  <---or from within ed

# More readable environment variable output:
echo $PATH | tr ":" "\n"

# Substitute only the second appearance of a string on a line:
sed 's/replaceme/FOO/2' foo.txt

# Convert Windows to Unix file format:
sed 's/\r//' CLIDLIST_DOSFMT.txt >| $CLIDLIST_UNIXFMT.txt
# Convert Macintosh to Unix file format:
tr '\015' '\012' <file.mac >file.unix

# Compress 2 or more spaces into 1:
echo 'long   str' | sed 's/ \{2,\}//'

# Make sure user is root:
val=`id | sed 's/uid=0(.*/ROOT/'`; if [ "$val" != "ROOT" ] ; then ...

# Translate convert EBCDIC to ASCII
dd if=myinfile.txt of=myoutfile.txt ibs=800 cbs=80 conv=ascii
dd if=myinfile.txt of=myoutfile.txt conv=ascii
# Translate convert ASCII to EBCDIC
dd if=myinfile.txt of=myoutfile.txt conv=ebcdic

# Canonical zip - foo.zip comes FIRST in parameter list (original is left unchanged!):
zip foo.zip foo.txt
zip foo.zip *
# Canonical recursive zip:
zip -r foodirrecursive.zip mydir/

# Find longest maximum widest line length in textfile. Subtract 1 if ff=dos (or use wc -L):
cat t.txt | awk '{ if (x<length()) x=length() } END{ print x }' 
# Or if want individual max line lengths:
for f in *.sas; do echo $f; cat $f | awk '{ if (x<length()) x=length() } END{ print x }'; done

# Tarball specific filetypes only:
cd $z/datapost && find . -name '*.csv' -a -not -name 'TR*' |xargs tar cfz ~/tmp/datapost.tgz
cd $x/datapostdemo && tar xvfz ~/tmp/datapost.tgz

# Get the value of the last parameter passed into a korn shell script:
eval last=\${$#}

# Find the Windows PIDS, not just the Cygwin ones (good for using  $ winkill 123 ):
ps -W|grep -i rtv

# Ignore all whitespace (the -c context is always good idea).  Best diff outside of vi -dR 1 2:
diff -cw f1.txt f2.txt

# Find info on Internet ports:
netstat -nl --inet
netstat -af  # Windows (can't use Cygwin)

# Which modules have been compiled-in an Apache webserver:
/usr/local/apache/bin/httpd -l

/sbin/runlevel  # RedHat
who -r  # runlevel on Solaris:

# Cycle among virtual consoles: Left Alt+[left or right arrow]

# Unix heredoc here doc:
cat <<HEREDOC
ok blah blah, this could extend many lines
HEREDOC

cat <<HEREDOC >| $UTMPDIR/t.sas 
  libname l "$UTMPDIR";data l.${2}BKUP(genmax=${4});set l.${2};run;
HEREDOC

# Find alphanumeric characters using character class:
grep [[:alnum:]] foo.txt
grep [A-Za-z0-9] foo.txt
# Numeric character class
echo 19 | sed 's/[[:digit:]]/x/'

# Is a process running (in this case SAS)?
while true; do ps -W | grep sas; date; sleep 3; done
# Better
sas &;  wait %1; echo "SAS process terminated"

# Throwaway skip delete remove first 3 lines of a file:
tail -n +4 foo.txt
# or 
cat foo.txt | awk "{if(NR>3)print}"

# Test procmail regex:
echo 'to: bheckel@worldnet.att.net, bheckel@att.net' | egrep '^to:.*bhe[a-zA-Z]+@(worldnet)*att.net'

scp rheckel@otaku.freeshell.org:.muttrc _muttrc.otaku  # remote to local
scp rsh8680@tpsh004://var/adm/scripts/shutlims.sh .  # remote to local
scp procexp.exe rheckel@sdf.org:html/ && ssh rheckel@sdf.org chmod 755 html/procexp.exe  # local to remote

# Combine mkdir with chmod:
mkdir -m 755 foodir

# Print column 3 if column 1 matches Ian (a database-like search):
awk '($1=="Ian") { print $3 }' foo.txt
# compare with Perl's
perl -ne '@f=split; if ($f[0] eq "Ian") { print "$f[2]\n"}' foo.txt
perl -ane '@x=split /\|/;print $x[0], "\n";' foo.txt

Ctr-x Ctr-c  # exit emacs (hopefully never to return...)

# Syntax check the Apache config file:
/usr/local/apache/bin/apachectl configtest

# Is a package properly installed on Sun Solaris:
/usr/sbin/pkgchk -l -p `which gcc`

# A one time cron(1), at(1)
at 17:09 today            #<---press enter
echo 'foo' >/dev/console  #<---type commands followed by ctr-d

# Find dead webpages based on a space delimited textfile of users:
for u in `cat users.txt`; do lynx -dump "http://158.111.250.31/~$u/"; done | m

# Canonical recursive websuck mirror gets linked pages, puts all in toplevel dir www.accesstoinsight.org/ convert to local viewing (-k)
wget -m -p -k -np 'http://www.accesstoinsight.org/lib/authors/thanissaro/wings/index.html'

# Follow only relative links and skip GIF images:
wget -m -L --reject=gif http://www.catb.org/~esr/writings/taoup/html

# Pretend to be IE
wget --header="User-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)" http://msie.only.url/here

# Loop in shell:
while : ; do echo bob; sleep 6; done

# Create several simple dummy files:
for i in 1 2 3;do echo "i am $i" >foo$i; done

# Sequence loop while number is less than 6
for i in `seq 5`; do mem; sleep 3; done

# Monitor speed of database connections over time:
for i in `seq 16`; do date; sqlplus -S sasreport/sasreport@sprd25 @donothing; date;date; sleep 1800; done
for i in `seq 16`; do date; a=`date +%s`; sqlplus -S sasreport/sasreport@sprd25 @donothing; date; b=`date +%s`; c=`expr $b - $a`; if [ $c -gt 7 ];then echo $fg_redbold GT 7 SECONDS! $normal; fi; sleep 1800; done

# Display terminal output on two xterms simultaneously (untested):
sh -c "$prog|tee -a $mytty" 1>$othertty 2>&1 0>$othertty

# Append two files vertically side by side:
paste -d' ' foo1.txt foo2.txt

ifconfig eth0 down
ifconfig eth0 up
route add -host 192.168.1.30 eth0
route add default gw 192.168.1.1 eth0

# Find and tarball only textfiles:
file -F '' * | grep text | awk '{print $1}' | xargs tar cvfz bin.tgz

# Without an enlightened tar xvfz or gtar e.g. Solaris tar gunzip:
gunzip <stable.tar.gz | tar xvf -
tar cf - findutils-4.1-srcdir | gzip >compiled.bobh.tgz
# Unenlightened tar that was compress'ed 
uncompress <Oct08.tar.Z | tar tvf -

# Environment variable check - use $VISUAL or $EDITOR or vi:
${VISUAL:-${EDITOR:-vi}}

# Check valid users via FTP:
for u in bxj9 ckj1 ; do echo "testing $u "; ncftp -u $u -p dAebrpt5 rdrtp; done

ncftp -u myuid -p mypasswd intergate.com

# Force Apache errors to syslog Solaris at least:
*.err;kern.notice;auth.notice;daemon.notice   /dev/sysmsg <---/etc/syslog.conf
ErrorLog syslog:daemon                              <---/etc/apache/httpd.conf

# man replacement (Solaris, not Cygwin):
nroff -man smbd.8 | more

# Broadcast message to all users:
wall < mywallmessage.txt

/sbin/init 0  # shutdown to allow poweroff
/sbin/init 6  # reboot w/o going to BIOS
# or fancy assuming you have users logged in
shutdown -g120 -i0 -y "shutting down server"  # at least Solaris

# Cygwin convert DOS path to Unix path
sed 's/\r//' t.txt >|t2.txt
cygpath 'c:\Documents and Settings\Bob Heckel'
ls `cygpath 'c:\Documents and Settings\Bob Heckel'`
vi `cygpath 'c:\temp\cygwin.txt'`
notepad.exe "$(cygpath -aw "Desktop/Phone Numbers.txt")"
javac -cp "$(cygpath -pw "$CLASSPATH")" hello.java

ufsdump 0uf /dev/rmt/0ubn /home  <---initial
ufsdump 9uf /dev/rmt/0ubn /home  <---incremental

# Solaris Volume Management:  $ eject cdrom  If used paperclip must:
/etc/init.d/volmgt stop; /etc/init.d/volmgt start
# Insertion of a floppy disk (UNIX or MS-DOS format) has to be communicated
# to the Volume Manager manually:
volcheck

# If ls -lS isn't available:
ls -l | sort +4r | grep -v "total"

# Give multiple users the same group and password:
useradd -g daebstat -m -p N6lPzsXhb5TLg dwj

mailx -s 'email subject type CTRL-D or dot on blank line to end' root@daeb
mailx -s "mysubject" -r LMITHELP@cdc.gov -c 'boswell@cdc.gov rheckel@cdc.gov' 'ck@cdc.gov kj@cdc.gov' <junk
? touch *    # mark all as read and write to mbox in mailx...
mailx -f ~/mbox   # ...and read them
ssh tpsh005 'ls -l /home/gaaadmin/GAAAdapter/gaa/receive/Output_Data | mailx -s 'subject' rsh8680@sgk.com'

# Monitor system status (Solaris at least):
echo `uptime|awk '{print $11 $12 $13}' && df -k|grep /data|awk '{print $5}'` | mailx -s "load and /data space [cron tstdev]" 'bqh0@cdc.gov'

# Without an external file redirected in:
$ echo 'ok' | mailx -s 'test4' rsh8680@sgk.com

awk '/#/ {print "Got a comment SOMEWHERE in the whole line"}' /etc/hosts
awk '$1 == "#" {print "got a lone, leading pound sign"}' /etc/hosts
awk '$1 ~ /#/ {print "got a pound sign, SOMEWHERE in column 1"}' /etc/hosts
awk '/#/ {print "Found a comment"} $1 == "#" {print "Found comment in first column"} /^# /  {print "Found comment at beginning"} ' /etc/hosts
# Find the highest number of columns (i.e. fields, words) on one line in a file:
awk 'BEGIN{max=0}{cols=NF;if(cols>max){max=cols}}END{print max}' ~/bladerun_crawl 
awk '/^(From:|Subject:)/{print $2,$3,$4"\n"}' PotentialSpam | m

# bash enhancement like basename()
the_var=amanuensis.sas
echo ${the_var%.*}   <--- amanuensis
# or for mainframe transfers where you don't want the .sas extension on mf:
for f in *.sas;do bfp $f "bqh0.pgm.testlib(${f%.*})"; done

# Unback restore more than one file:
for f in *.bak; do cp $f ${f%.*}; done

# HTMLify recently created files:
find /home -newer /tmp/f1 -name '*PDF' 2>/dev/null | perl -ne "print if s#......(....).............(.*PDF)#<A HREF=http://158.111.250.37/~\1/\2>\1 \2</A><BR>#" >| /home/rheckel/public_html/email_down_list.html

# Which package did a file come from (Solaris):
grep /my/missing/file /var/sadm/install/contents

# Tape drive swap tapes
mt rewind; mt offline

# Solaris patches information
showrev -p 

# Nested for loop to build test directories:
for y in 2003 2004 2005; do for e in NAT MOR FET; do mkdir -p mvds/$e/$y; done;

# Paragrep.  Print select blank line separated paragraph if word is found:
sed -e '/./{H;$!d;}' -e 'x;/illegal/!d;' bladerun_crawl
# Less unintelligible but ff=unix is mandatory:
perl -ne '$/="";@p=<>;for $p(@p){print "$p\n" if $p=~/illegal/;}' <bladerun_crawl

# Debug .bashrc trouble on Cygwin without sourcing config file clean bashrc
C:\cygwin\bin\bash.exe --norc

# Convert uppercase to lowercase:
echo UPPERTOLOWER | tr [A-Z] [a-z]
echo UPPERTOLOWER | tr 'A-Z' 'a-z'
echo "THIS is a STRIng to be LOWErcased" | tr [:lower:] [:upper:]

# Lowercase a filename:
mv FOO.txt `echo FOO.txt | tr A-Z a-z`

# Lowercase an environment variable.  E.g.  export PS1=BAR  already set:
export PS1=`echo $PS1 | tr A-Z a-z`
export PS1=`echo "$LOGNAME@CDCJES$ " | tr A-Z a-z `

# Uppercase all directories (assumes no files in the dir):
for d in *; do mv $d `echo $d | tr a-z A-Z`; done

# Cleanup projects dir before it gets backed up at night:
find ~/projects -name 'junk.*'|xargs rm

# Monitor a directory tree for new pdf files:
find /home -type f -name '*.PDF' -a -newer /tmp/fx -exec ls -lo {} \; 2>/dev/null
# Monitor a box for logons:
while true; do last|head|grep -v rheckel; sleep 60; done

# Monitor process load and get the cpu info you need that xload and uptime don't tell you:
top -d 2 | col -b | grep states

# Print to syslog:
echo 'as root print this message to console' >/dev/console

# Prompt user yn:
read yesno; if [ $yesno = 'y' ]; then echo 'he said yes'; fi

# Find ls only hidden files:
ls -a | grep "^\."

# How much disk space of quota is being used by user
/usr/sbin/quot /dev/dsk/c1t1d0s0

# Convert manpage to text:
man lp | col -b > lp.txt

# Split into pieces.  xaa and xab are max of 1.4MB to fit floppy. Make sure no x* files already exist in the directory:
split -b 1400000 orig.tgz
# Unsplit rejoin the 1.4MB pieces
cat xa* > origrebuilt.tgz

# Original file is not saved.  E.g. footext.gpg is readable in vim if use passphrase
gpg -c foo.txt  # encrypt
gpg -d foo.txt.gpg >foo.txt  # decrypt

# Recursive wc recursive find - safe for Windows filenames w/ spaces (Cygwin) canonical total count lines of code (alternatively use :vimgrep /foo/ **/*.vb)
find . -name '*.vb' -print0 | xargs -0 grep -i 'databound web'
find . -name '*.sas' -print0 | xargs -0 wc -l  # canonical count lines of code

# File attributes - simple access in shell
unixtime=$(find foo.txt -printf "%AT" ); echo $unixtime
size=$(find foo.txt -printf "%s" ); echo $size

# Determine name of NIC
dmesg|grep eth

# Keep checking for job completion HFS
while sysout -v JOB15722|grep -c EXECUTION; do sleep 2; done

# Read file line by line in shell.  Feed textfile to a (single?) shell command.
while read f; do echo $f; done <myfile.txt
# Bulk upload converting extension on the fly upload to mf (fq paths ok)
while read f; do bfp $f "bqh0.pgm.lib(`basename $f .sas`)"; done <filelist.txt

find . -name '*DEL' | while read fn; do echo "found file $fn"; done
find . -type d  | while read dn; do echo "found dir $dn"; done

# Combine all users crons in .txt cron into a new .txt:
while read f; do echo "---$f---"; crontab -l -u $f; done </mnt/nfs/home/bheckel/users.txt >/mnt/nfs/home/bheckel/crontabs20150619.txt

# ROT13 encryption
cat "$@" | tr 'a-zA-Z' 'n-za-mN-ZA-M'   # "a" goes to "n", "b" to "o", etc.

# Find all files opened by a process (Solaris at least):
/usr/proc/bin/pfiles mypid

# Create tarballs out of just text files in multiple directories:
for d in c html misccode perl sas vb; do cd $d && file -F '' * | grep text | awk \
'{print $1}' |xargs tar cfz ../$d.tgz && cd - ; done

for f in c html misccode sas vb; do scp $f.tgz sverige.freeshell.org:~/code/; done

# Where are the files in this (properly installed) Cygwin package?
cygcheck -l apache

# Use a default if no parameter is passed via command line
KNOPPIX_DIR=${1:-/home/rheckel/tmp}
BAR=notemptylikeFOOis; echo ${FOO-$BAR}  # use $bar if $foo doesn't exist

# Determine file size in bytes
filesize=$(find $1 -printf "%s")
if [ $filesize -lt 200000000 ];then echo bigger than 2MB; fi

# Canonical Cygwin updatedb.  alias loc='locate --ignore-case --database=/var/lib/locatedb.code '
$ /bin/updatedb --localpaths='/home/rsh8680/code' --prunepaths='/home/rsh8680/code/misccode/.git' --output='/var/lib/locatedb.code'
# Canonical Linux
$ sudo updatedb --database-root='/home/bheckel/code' --output='/var/lib/locatedb.code'

# Calculate the day before assumes GNU date(1):
date -d '20050801 2 day ago' +"%Y%m%d"

# Solaris 10 SMF rc file replacement
svcs -a   # which daemon services are running on Solaris 10:
svcs -x   # which failed to start
svcadm disable sendmail
svcs -v sendmail

# Compare two Word docs using a temporary fifo(?) pipe.  Probably bash only.
$ vi -d <(antiword 1.doc) <(antiword 2.doc)
$ vi -d <(antiword Client\ Feedback\ Report\ clm_ID0509_TXT.doc) <(antiword Ctwo.doc)

screen -r  # reattach screen
Ctr-a d  # detach (from within screen session)

# Set a shell variable's default even if it is not set, or is missing:
f=foo.txt; if test "x$f" = "x" && f=bar; then ... fi

# Push, flush, sync bash history from one xterm to another
history -a  # append this xterm history
history -n  # read in the other xterms appended history

# Insert, append, add a header line to first line of an existing file:
for f in *.html; do echo "<b>$f</b>" >| new$f && cat $f >> new$f; done;
# or insert, append, add a header line to first line of a single new file:
for f in *.html; do echo $f >>100581.html && cat $f >>100581.html; done

# Print file name and first two fields 
for f in *.xls; do awk '{print FILENAME ": " $1 " and " $2}' $f; done
for f in *.xls; do awk '/search4me/{print FILENAME ": " $1 " and " $2}' $f; done
# Which CSV files contain the string SAPILYN?
for f in *.xls; do awk '/SAPILN/{print $1 ": " FILENAME}' $f|sort|uniq; done

# Don't need an eval()
bytes=$(find $TMPLST -printf "%s") ; if [ $bytes -gt 0 ];then echo 'ok';fi
timestamp=$(find arch.tar.gz -printf "%t" )

# Conditional find(1) on any files older than 60 minutes exist check
if [ `find $PTH2 -maxdepth 1 -not -mmin -60  -printf "%s"` ];then ...
# Conditional find(1) on any files newer than 1 day old check
BTCHS=$(find $PTHBTCH -maxdepth 1 -name '*.xls' -mtime -1) if ! [ -z "$BTCHS"  ];then ERRMSG="$PTHBTCH xls files are less than one day old" catchWarning break fi

diskpct=$(df /cygdrive/c|tail -1|awk '{print $5}'|perl -pe 's/%//'); if [ $diskpct -gt 98 ];then echo 'may have full disk';fi

# Solaris 10 dark background and source my .bashrc (from Console)
/opt/sfw/bin/rxvt -rv -e bash&
rxvt -bg white -fg black -geometry 80x40+159+46 -fn "Andale Mono-12"

# Typing speed
START=`date +%s`;WORDS=`cat|wc -w`; STOP=`date +%s`; SPEED=`echo "$WORDS / ( ( $STOP - $START ) / 60 )"|bc`;echo "You have a typing speed of $SPEED words per minute."

# Configure ssh for no password:
ssh-keygen -t dsa  # on mario but  ssh-keygen -t rsa -b 4096  is a standard for 2012
cat /home/chronos/.ssh/id_dsa.pub | ssh rheckel@sdf.org 'cat - >> ~/.ssh/authorized_keys'
# Better ssh no password,  Ignores mkdir if ~/.ssh/ already exists:
ssh user@host "mkdir -p .ssh && cat >> .ssh/authorized_keys" < ~/.ssh/id_rsa.pub

# Performance benchmark:
time echo "scale=5000; 4*a(1)" | bc -l -q

# Maximize / minimize rxvt font: Shift++ or Shift+- (+/- is using numeric pad with numlock on)

# Zip and remove original file on success
for c in 1 2; do zip lelim$c.sas7bdat.zip lelim$c.sas7bdat && rm -v lelim$c.sas7bdat; done
# Zip and remove original file on success (better)
for f in `find . -name '*.sas7bdat'`; do zip -mT $f.zip $f; done

# Human readable ctags listing:
$ ctags -x * > ctagsoutput.txt

# Create ctags (Exuberant Ctags 5.2+ - only those files whose names are mapped to languages will be scanned):
ctags -R <---probably  $ ctags *  for other versions, not sure how to recurse
# Then Ctr-] and Ctr-t in Vim to navigate or find function whose name you only know part of (assumes you've run ctags *):
:ta[g]/iknowpartialregex

# Canonical awk
awk -F ' ' '{print $1}'  # -F ' ' is unnecessary for space delimiters
awk '{print $1}'

time w3m -dump bashref2_05.html &>/dev/null

# Decompress from pwd to another dir
unzip '*sumr*zip' -d ../tmp

# Just do a simple extract
unzip -jo lelimssumres01a$ds.sas7bdat.zip

# Date formatted using stftime
$ DATE=`date '+%Y%m%d'` DAY=`date '+%d'` HOUR=`date '+%H'` MONTH=`date '+%m'` MIN=`date '+%M'`
$ date +'%Y%m%d' # print formatted date (e.g. 20010622)
# or find Unix epoch time on a specific human date:
$ date +%s -d'Jul 7 2000'
# Make a local timestamped copy and zip only that new file
$ cp '\\rtpsawn323\SQL_Loader\Logs\LGI.log' LGI$(date +%Y%m%d%S).log; zip -ru log.zip . -i \*.log

# Print only a part, section, range, paragraph, of a file. Sort of like paragrep.
awk "/^xxSASx START/,/^xxSASx END/ {print}" ~/code/misccode/oneliners
ipconfig /displaydns | awk "/tpsh005/,/143.193.6.5/ {print}"
# Scan xml tags that span multiple lines, looking for list of material codes. Sort of like paragrep:
awk "/<ExtractString>/,/<\/ExtractString>/ {print}" cfg/DataPost_Configuration.xml | awk "/'[[:digit:]]+'/ {print}" > mats.txt

# Create backup filename with today's date datestamp
touch foo`date +%d%b%y`.txt
mv //192.168.52.128/callcenter-compile/{Custody.pl,Custody.`date +%d%b`.pl}

# Any errors to the bit bucket:
find / -name '*.mac' 2>/dev/null

# Reset, blank titlebar title bar
unset PROMPT_COMMAND; echo -ne '\033]0;\007'
# Change, write to, rxvt titlebar (won't work in a script, must paste to term):
unset PROMPT_COMMAND; echo -ne '\033]0;ora\007'
unset PROMPT_COMMAND; echo -ne "\033]0;${PWD}\007"

# For quick email attachment transfers across boxes (head gives dividers between each file)
head -n 1000000000 .inputrc .vimrc .bashrc ~/code/misccode/_vtorrc >|essential_combined.txt
find . -name '*.sas'|xargs head -n 10000000 >| datapost.allcode.sas

# Grow enlarge a file to copies of itself (especially good if Vim's undo whacks _viminfo when it gets huge)
for i in `seq 1 500`; do cp FW_ONLINE.txt $i; cat $i >> FW_ONLINE.big.txt; rm $i; done

# Fix backspace in shell (for vi)
$ stty erase ^H intr ^C kill ^K  # or sometimes ^? instead of ^H

# Tampering check:
$ md5sum * > tampering.md5                        # build
$ md5sum * > check.md5; diff tampering.md5 t.md5  # check
$ md5sum * | diff - tampering.md5                 # better check

# Canonical sh bash if then else
if [ expression ];then commands elif [ expression2 ];then commands else commands fi

# Wrong number arguments parameters passed to shell script:
[ $# -lt 2 ] && echo "Usage: $0 arg1 arg2" && exit 1
[ $# -eq 1 ] || echo "Usage: $0 arg1" && exit 1
if [ $# = 0 ]; then ... fi

# Length of string is 1 character:
if [ ${#month} -eq 1 ];then echo 'ok'; fi

if [ 'foo' = 'bar' ]; then... fi  # shell string comparison
if [ 2 -eq 42 ]; then... fi  # shell integer comparison

# Shell arithmetic addition:
$increment = `expr 42 + 1`

# Determine if a file has a certain suffix, extension (mnemonic # on keyboard is to the left, % is to the right).  Bash only.
if [ "${1##*.}" = 'tar' ]; then ... fi

# Untar single file from tarball
$ tar -x extract_only_me.txt -vf my.tar

CSVS=$(find $PTHPAR -maxdepth 1 -name '*.csv' -not -mtime 0)
if [ -z "$CSVS"  ];then # string is zero length, no files meet stale criteria, so now echo 'files have been touched today...'

# Determine Cygwin version:
$ cygcheck -c | grep ygwi

# Input/output IO redirection ( < and > ) connects processes with files, while the pipe ( | ) connects processes with other processes
diff <(sort file1) <(sort file2)
diff <(md5sum *.sas) <(cd tmp;md5sum *.sas)
diff <(md5sum *.mp3) <(cd /cygdrive/e/Decade/Disc\ 1;md5sum *.mp3)

# Yesterday in bash:
TODAY=`date +%b-%Y`
YESTERDAY=$(expr `date +%d` - 1)
echo "$PTHZIP/${YESTERDAY}-${TODAY}.zip"
# Better Postgres quoted string yesterday:
yesterday=`date -d "yesterday 13:00 " '+%Y-%m-%d'`
... created >= date('now')-interval '1 day'
yesterdayq=`echo \'$yesterday\'`
psql -h db-06.twa.taeb.com AETBMART -c "select avg(enrolledratio) from analytics.tmm_enrollmentperf where measure_enddt=${yesterdayq}"

# Remove leading zero:
$ date +%d | sed "s/0//"

# Substring first character:
$ if [ ${foo:0:1} = 9 ];then echo first char is 9;fi
# For ksh use sed (e.g. "NOTE: 0_MAIN_ValtrexCaplets.sas SYSCC: 0 ( ended: 17APR09:07:01:48 / minutes elapsed: 1.78826666673)" ) returns 1.78826666673
grep 'minutes elapsed' Valtrex_Caplets.log |awk {'print $11'}| sed 's/)//g'

# Substring in bash shell:
 [[ ${GS:0:17} != 'nothing to commit' ]] && echo '*'

# Not equal in bash
if [ $x != a ]; then echo not equal; fi

# ksh commandline completion - In vi-mode use <ESC> to control mode and then \ to complete or = to list.

# If stuck with csh use this to escape (an improved $ /bin/ksh )
exec ksh -o vi

# Is today Monday?  If today is Monday.  Use  !=  to negate.  Date filter by day of week.
if [ `date +%a` = Mon ];then echo ok; fi
if [ `date +%a` = Mon -o `date +%a` = Wed -o `date +%a` = Fri ];then echo ok; fi
# Is today the 15th?  Use  !=  to negate. Date filter by day of month.
if [ `date +%d` = 15 ];then echo ok; fi

# Watch for process, send warning email if it's not there
ps -ae | grep lms_nmgr | grep -v grep | read pid && echo "process found `date`" || echo "Subject: LIMS down on ushp9h" | mail lmswatch@ussung9

sz=$(find $PTHQT -maxdepth 1 -name '*.jpg' -print0 | xargs -0 ls -l | awk '{s+=$5}END{print int(s/1000000)}')

# Parse run-time out of a string and calculate if it's within threshold
tm=$(grep 'minutes elapsed' //Rtpdsntp032/DataPostArchive/Ventolin_HFA/CODE/log/Ventolin_HFA.log|awk {'print int($7)'})
if [ $tm -lt 70 -o $tm -gt 95 ];then echo 'uh oh outside time threshold';fi

# Rename powerpoint files with today's datestamp:
d=`date +%d%b%y`; for i in *.ppt; do mv "$i" `echo $i |sed "s/^......./${d}/g"`; done

# Cygwin bash at least
export PS1='\u@\h\$ '
# HPUX ksh at least
export PS1=`whoami`'@'`hostname`' '

# Barebones modified /Cygwin.bat (DO NOT specify  -fg white, rely on .Xdefaults):
$ rxvt -sl 10000 +j +sk +si -bg black -fn "Andale Mono-13" -e bash --login -i
# Normal Cygwin.bat rxvt in a single line:
@echo off & C: & chdir C:\cygwin\bin & start /B rxvt.exe -geometry 80x45+295+135 -fn "Andale Mono-13" -sl 10000 -sr -bg black -fg wheat -e /bin/bash --login -i

# Escape second and higher spaces (echo "cd /fo o/ba r" | sed 's/ /\\ /2' only gets 2nd one)
echo "cd /fo o/ba r" | sed -e 's/ /\\ /g' -e 's/cd\\/cd/g'

# For each file, do something to it like remove carriage returns using temp files:
for file in $(find /path/to/dir -type f); do tr -d '\r' <$file >temp.$$ && mv temp.$$ $file; done

# Canonical for each loop bash shell array [@] quotes array elements.  Arrays need not be decalared.
funcarr=(DPGeneral Valtrex); for f in ${funcarr[@]}; do $f; done

# Determine Windows Box uptime:
$ systeminfo /U 'wmservice\uxx1903' /P pw /S rtpsawn32 | grep Time

# Prepend 'vi' to beginning of line:
$ locate --ignore-case --database=/var/lib/locatedb.code foo|sed 's/^/vi /'

if [ -d '\\rtpdscel01dm06\rsh8680$' ];then echo 'directory exists'; fi

# bash for loop 
 for i in 1 2 3; do echo 'foo'; done;
# bash for loop shell array
for x in "${MAPFILES[@]}"; do ...; done

# Canonical timestamped backup quick tar quick backup:
cd $c && tar cvfz /cygdrive/u/bkup/dpCdrive.`date +%d%b%y`.tgz datapost/ ; cd -  # use "datapost/" instead of "/cygdrive/c/datapost" for easier untarring
tar cvfz /cygdrive/u/bkup/retain.`date +%d%b%y`.tgz $y/retainsamp_sas/

# Comma delimited items split into lines, one item per line (convert wide to long)
awk -F, '{ print $1; print $2; print $3 }' t.csv

# Count unique batches, in column 1, from CSV file:
tail +2 "CSV vlatrex_FreeWeigh.csv"|cut -d ',' -f1|sort|uniq|wc -l

# Is database up?
while true; do date;sqlplus -S sasreport/sasreport@sprd25 @donothing; echo 'ok';date;echo;sleep 300; done;
# Poor man's progress bar timer - how long does it take to connect to database:
i=0;x=0;y=0;while true; do x=`date +%s`;sqlplus -S sasreport/sasreport@sprd25 @donothing; y=`date +%s`;for i in expr $y - $x; do echo -n '.'; done; echo;sleep 300; done;

# Passed-in shell variable $1 starts with 'http'
... elif [ "${1:0:4}" = 'http' ];then ...

# Iterate shell array list of filenames (bash only?)
dotfiles=( .bashrc .vimrc ); for f in ${dotfiles[@]}; do echo $f; done

ssh tpsh005 ps -ef | grep lms_client*|wc -l  # count LIMS users

# Print HPUX
lpr -dprinter_name file_name

# Cygwin w3m compile finish
find . -name "*.dll" -or -name "*.exe" | xargs -r strip

# Choose a random line from a file (bash provides $RANDOM)
F=dhammapada.txt; TOTLINES=`wc -l $F | awk '{print $1}'`; LINENUM=$[($RANDOM%${TOTLINES})+1]; sed -n "$LINENUM"p $F

# bash ls skip do not show .orig files.  TODO not sure how robust this is - may need  $ find . -not -name '*orig'
ls tzu!(.orig)

# Canonical bash function definitions
myfunction () { ... }
function myfunction { ... }

urxvt-X.exe -display 127.0.0.1:0.0 -bc -e /bin/bash --login

# Create empty directories and subdirs (skip files) TODO NOT SAFE FOR DIRS WITH SPACES:
mkdir -p $c/datapost && find * -type d | while read d; do mkdir $c/datapost/${d}; done

# bash calculator:
echo $[(5*3)-2]

# For Windows users who don't have tar and gzip:
find . -name '*png' |xargs zip plots14jun11.zip 
# Ignore the directories, all files go in single zip (make sure we don't have dup filenames in subdirs!)
find . -name '*png' |xargs zip -j plots14jun11.zip 
find datapost/ -name '*.sas' -o -name '*.xml' -o -name '*.xslt' -o -name '*.map' |xargs zip -j ~/code/misccode/datapostcode.zip  # -j eliminate folder structure
# TODO handle spaces in names -print0 and -0 aren't working
find $z/datapost/ -name '*.sas' -o -name '*.xml' -o -name '*.xslt' -o -name '*.map' |xargs tar cvfz ~/code/misccode/datapostcode.tgz

# Whack files named "!THIS IS DEMO" in all subdirs (record separator becomes null character instead of space):
find . -name '!THI*' -type f -print0 |xargs -0 rm

# Write file as root if you opened it accidentally as rheckel:
:w !sudo tee %

# Brace expansion - good for creating several new dummy files:
touch {a,b,c}{a,b,c}{a,b,c}

# Append to a remote text file via ssh:
ssh rheckel@sdf.org 'cat >> remotefoo' < localfoo

# System monitoring tools: top iostat ps vmstat (memory) lsof (list open files)

export PROMPT_COMMAND=; echo -ne "\033]0; override change rxvt window title\007"

# Is log file writeable?
[ -w log ];echo $?  # interactive testing
test -w log;echo $?  # interactive testing
if [ -f $file  ] && [ -w $file ]; then ...  # script

# Details on which Linux distribution architecture release codename am I using:
lsb_release -a

$ 7z a Android-4.4.pdf.7z Android-4.4.pdf

# Unzip 7zip
$ 7z x proust.7z

# Avoid the bash Ctrl-s key combo of death that requires a Ctrl-q to escape its clutches
stty -ixon

# Temporary file:
$ PROCSFILE=$(mktemp) && echo $PROCSFILE && ps -ef >$PROCSFILE

# List all installed apt-get packages:
sudo dpkg -l

# Install debian ubuntu
sudo dpkg -i google-chrome-stable_current_i386.deb

# Query apt-get
sudo apt-cache search vim
sudo apt-cache show vim
sudo apt-cache policy vim

# See if a new Chrome is out there:
sudo apt-get install google-chrome-stable

# Debian, Ubuntu regular update mantra (not dist upgrade):
sudo apt-get update && sudo apt-get upgrade

# Process substitution ssh diff across network:
vi -d <(ssh bheckel@sas-01.twa.taeb.com "cat /Drugs/Personnel/bob/t.sas") <(cat /Drugs/bheckel/t.sas)
vi -d <(ssh bheckel@atlon3 "cat /Drugs/EGP/Humana_weekly_task_Freds.sas") <(cat Freds_priority_enrollment.orig.sas)

# Diff two files across the network on two boxes:
ssh user@remote "cat /path/to/remote/file.txt" | diff - /path/to/local/file.txt

# Does vi exist on this box? (avoid which(1):
hash vi &>/dev/null if [ $? -eq 0 ]; then export EDITOR=vi fi

# bash.  Increment +1 ++ like C:
i=$(($i+1))

# Do these batches exist in any of these csv files? Just list filenames if so:
for f in 2ZM3089 2ZM3090; do find . -name 'asampext*' |xargs grep -l $f; done;
# Then filter them in vim:
g!/Bat\|2ZM3089\|2ZM3090\|2ZM3091\|2ZM3092\|2ZM3093/d

# Canonical touch file time stamp date stamp datestamp.
touch -d 'May 2 2008 15:03' foo.txt
touch -d "Sep 24 2006" foo.txt
touch -d "Sep 24" foo.txt
find . -not -name '*co'|xargs touch -d 'Mar 24 2011 13:26'
touch '\\rtpsawnv031\pucc\ALTREX_Caplets\INPUT_DATA_FILES\tmp\DPRunFlg.txt'
touch  //rtpsawnv031/pucc/ALTREX_Caplets/INPUT_DATA_FILES/tmp/DPRunFlg.txt

# Sort on column 11:
find -ls | sort -k 11

# Which processes are running on port 80:
lsof -i :80
# shows pid 25226
ls -l /proc/25226/exe

# Inplace edit (without vi):
sudo sed -i -e "s/# deb/deb/g" /etc/apt/sources.list  # caution sed will turn ff=unix
sed -i '/ifwordonline/s/changeme/tothis/' t.pl  # caution sed will turn ff=unix
sed -i '/polic/s/squad/pod/' bladerun_crawl

# Avoid having to cd / to untar a cygwin package:
tar -C / -xvf connect-proxy-1.101-1.tar.gz

# Ubuntu system information:
df -h && free -m && grep name /proc/cpuinfo | uniq && lspci | grep VGA && xrandr | grep connected && uname -rms

# Easy work synch backup using the previous tarball as a sentinel - Cygwin:
ls -l ~/c && sleep 10 && cd ~ && find code/ -type f -newer c |xargs tar cvfz c && cd -

# Easy work synch backup using the previous tarball as a sentinel - Ubuntu:
cd ~ && find -L code/ -type f -newer ~/Downloads/c.PREV |grep -v '/.git/'|grep -v '.swp'|xargs tar cvfz ~/Downloads/c.NEW  # Ubuntu simple synch
cd && find -L code/ -type f -newer ~/Downloads/c.PREV |grep -v '/.git/' |grep -v '.swp' |xargs tar cvfz ~/Downloads/c.NEW && scp ~/Downloads/c bheckel@dsf.org: && ssh bheckel@dsf.org mailx -a c -s c rsh8680@sgk.com && cd -  # Ubuntu complex synch

sudo fdisk -l
sudo dd if=lubuntu-desktop-12.04-1-miniand.com.img of=/dev/sdb1 && sudo sync

# Imagemagic PNG to PDF conversion:
meth=`find /cygdrive/x/ethylcellulose/ -maxdepth 1 -name '*.png'` && convert $meth -append -compress zip /cygdrive/x/ethylcellulose/Methyl.pdf

ln -s /cygdrive/c/fooreal foosymlinkedfake

# Find filetype by date:
find $z/datapost/dataDose/ |grep 'lims_.*t_.*sas7bdat' |xargs ls -l |awk '{print $10 "\t\t" $8 $7}'|sort

# Build HREF using substitution
find /cygdrive/c/datapost/data/SGK/Zebulon/ -name '*.pdf'|sed 's/\/cygdrive\/c//' |perl -pe 's/(.*)\/(.*)/<a href=http:\/\/zdatapostd.sgk.com\1\/\2\/>\2<\/a>/'

# Cygwin X
xinit -- -multiwindow
ssh -l bheckel -Y 10.11.12.13  # then in resulting xterm /sas/sashome/SASManagementConsole/9.4/sasmc

# Exceed Hummingbird replacement is Cygwin X (for CDE desktop access):
$ XWin.exe -query trpsh005  # don't use startxwin unless want commandline only

# Build cp commands to replicate files to another tree:
find data/sgk/zebulon -name 'ols*.sas7bdat'|sed 's/\(.*\)/cp -i \1 \/cygdrive\/x\/datapostdemo\/\1/'

echo $$  # the process id of the current process

# Date calculate date that was 3 years ago from today:
~/code/perl/datecalc -1080
# Date calculate 42 days from Xmas eve:
~/code/perl/datecalc 12/24/05 42

# Add a line to first line in each file:
for f in ja_e_*.htm; do cp $f tmpf; echo '<link href="../ja.css" rel="stylesheet" type="text/css" />' >| $f; cat tmpf >> $f; done;

# Search a webpage for text string:
w3m -dump file:///C:/datapost/cfg/Data.xml|grep foo

# Exclude TR* from find but do include OLS*:
find datapost/ -name '*.csv' -a -not -name 'TR*.csv'|grep OLS

# 607378 /cygdrive/z/datapost/data/SGK/eZbulon/DMPI/dAvairiDskus/OLS_0016T_dAvairiDskus   607379 /cygdrive/z/datapost/data/SGK/eZbulon/DMPI/dAvairiDskus/OLS_0016T_dAvairiDskus
x=`diff -ybB -W180 $u/tmp/{ols_PREV.txt,ols_CURR.txt} |perl -pe 's/(^\d+) [^\d+]*(\d+)[^\d+]*(\d+).*/$3-$1/e'`
[[ $x -lt 0 ]] && echo 'FAIL - reduced record count'; [[ $x -ge 0 ]] && echo 'ok'

# Multiple if then choices:
... elif [[ "$HOSTNAME" = 'EZBWL12H26564' || "$HOSTNAME" = 'EZBWD12H01067' ]]; then ...

echo "${fg_redbold}SERIOUS FAILURE - GDM has reduced record count${normal}"

# Insert a CSS include before the closing HEAD tag:
perl -pi.bak -e 's#</head>#<link href="../english.css" rel="stylesheet" type="text/css" /></head>#g' *.html

# Frequency count:
egrep -o "(replic|was)" bladerun_crawl |sort|uniq -c|sort -r

Pico save and exit immediately: Ctrl-x

# Set up ssh ssl tunnel:
ssh -f -L 110:localhost:110 -l rheckel mail.freeshell.org

#     1072    4384    1072       4948    0 1003   Feb  1 /usr/bin/bash
ps | awk '$8 ~ /bash/' -

# Sum column of a CSV file:
awk -F"," '{x+=$2}END{print x}' t.csv
awk -F"," '{x+=$2;print}END{print "Total,"x}' t.csv
# Sum column of a CSV file for only myItem1:
awk -F, '$1=="myItem1"{x+=$2;}END{print x}' t.csv

# Unique values of the first column (SELECT DISTINCT * FROM COL1). awk database:
head -n1 t.csv |sed 's/,/\n/g' |nl  # determine field nums
awk -F, '{a[$1];}END{for (i in a)print i;}' t.csv  # filter only that field
# Only list 2014 dates (SELECT DISTINCT * FROM COL28 WHERE COL28 LIKE '%2014%'):
awk -F, '$28 ~ /2014/ {a[$28]} END{for (i in a) print i}' mondayOLS_0016T_vairDiskus.csv |sort |tail -n20| tac
# Find test dates for this mat cod:
grep 100000089317 t.csv | awk -F, '{a[$19];}END{for (i in a)print i;}' - |uniq |sort

# Are we on Cygwin?:
x=`uname`; if [ ${x:0:6} = CYGWIN ];then echo isCygwin; fi

# awk vs. cut:
git show-ref --heads |cut -d' ' -f2
git show-ref --heads |awk 'print{$2}'

# Calculate mirror size 4884 1.0123+10 is 10GB in 4884 files
curl -s ftp://mirror.cs.vt.edu/pub/cygwin/cygwin/x86/setup.ini | awk '/^install: / { T = T + $3 ; N++ }; END { print N, T }'

# Open most recent file:
vim $( ls /tmp/*.__* | sort -r | head -n 1 )

# Default an empty missing bash environment variable:
test "x$no_of_days" = "x" && no_of_days=10

# Check for any default pararmeters arguments passed:
[ -z "$1" ] && echo "No argument supplied" && exit 1

# Don't complain if file does not exist:
[ -e $1.txt ] && rm -i $1.txt

# Check for stale (week old+) image files:
find /cygdrive/z/DataPost/data/SGK/Zebulon/ -name '*.png' -mtime +7 |xargs ls -gGh

# Extract .xz file
tar xvfJ foo.xz

# Does file exist?:
$ [ -e t.sh ] && ( echo file exists; exit 1 )

# if then using only brackets:
[ -e /rugs/eports/Health\ Plans/Archive/foo.txt ] && echo file exists

# Add user to another group:
usermod -a -G sas bheckel

# scp recursive scp:
scp -r bheckel@sas-01.twa.taeb.com://Drugs/Cron/Daily/update_shortname_ds/ .
scp -r /Drugs/Drugs/AcmeControl bheckel@sas-01.twa.taeb.com:tmp/

# Send email without an input file as body:
0 * * * * echo 'ok' | mailx bob.heckel@taeb.com > /dev/null 2>&1

# CentOS package manager installer:
sudo yum install vim-enhanced.x86_64
sudo yum install postgresql  # psql

# CentOS reboot
sudo shutdown -r now

# Sync a remote directory to the local system.  -a syncs recursively, preserves symlinks, special and device files, modification times, group, owner, and permissions, -P gives progress bar for the transfers and allows resume interrupted transfers
rsync --dry-run -avP bheckel@talon3://mnt/nfs/home/bheckel/tmp/1440187439_21Aug15/dir1/ dir1  # pull - trailing slash important
rsync -avP dir1/ bheckel@talon3://mnt/nfs/home/bheckel/tmp/1440187439_21Aug15/dir1/  # push
rsync -avP --delete dir1/ bheckel@talon3://mnt/nfs/home/bheckel/tmp/1440187439_21Aug15/dir1/  # true sync - also rm remote files like local ones already deleted manually

# Megfile about 100MB
dd if=/dev/zero of=biggarbage bs=10000 count=10000

# Find a partial contains string:
if [[ "$f" == *"elet"* ]]; then  # wildcard
if [[ $string =~ .*My.* ]]; then  # regex

# Shell parse string suffix capture text from 'average:' to end of string:
MYUP=`uptime`
LOAD="${MYUP##*average:}"

# Shell parse string suffix capture text from space to end of string:
JOB='clients.sas -foo 256'
CLIENTID="${JOB##*foo }"  # 256

tmux list-sessions  # we see sas0-ses2 is not '(attached)'
tmux -2 a -t sas0-ses2  # attach if session exists, note sas0-ses2 may be a digit if originally created anonymously
tmux -2 a  # if only one exists to reattach to
tmux -2 new -s sas0-ses3  # if we need a new session

if (( `df -h /saswork|grep saswork | awk '{print $4}'|sed s/%//g` > 90 )); then echo warning | mail -s 'workspace almost full' bob.heckel@taeb.com; fi

$ nice -n19 gpg --encrypt --recipient 'Obc (Out Dial App) <obc\@taeb.com>' t.gpg
$ gpg --output /Drugs/Imm/20160817/Output/GE_Imm_20160817.csv.gpg --encrypt --recipient pgp@smp.com /Drugs/Imm/20160817/Output/GE_Imm_20160817.csv

# Check a file extension:
if [[ $f = *.jpg ]]; then echo 'is a jpg' fi

# Check bash string for equality
if [ $s = 'foo' ]; then
# Check bash number for equality
if [ $? -eq 1 ]; then

# mintty taskbar properties
C:\cygwin64\bin\mintty.exe -i /Cygwin-Terminal.ico -

# tar a directory without retaining the directory structure:
tar cvfz tmp.tgz -C /cygdrive/e/TMMEligibilittPatientReport/20160517/Output .

# Extract the digits 329 coming after space for Log naming:
CID='-sysin /Drugs/Cron/Weekly/TMMCensusHPLoop/tmm_census_loop.sas -sysparm 329'
CLIENTID="${CID##*sysparm }"

watch -d 'ls -l ~ |grep sas'

# Read control file to determine which code to run:
while read -r clid; do nice -n19 $SAS -sysin ~/$clid.sas -log ~/$clid.log done <$FILE

# Count number of cores.  Cores = Cores per socket x Sockets
nproc --all
lscpu | egrep 'Thread|Core|Socket|^CPU\('
grep -m 1 'cpu cores' /proc/cpuinfo
# Count available memory:
vmstat -s | grep memory

# Name of this running program without the path:
THISPROG=${0##*/}

# Remove carriage return from filename:
$ rename $'\r' '' tmm_build_multiple_clients.44*
$ rename 'fdw.csv' 'fdw.ORIG.csv' *.csv

uuencode /Drugs/TMMEligibility/Studies/QC_DelhcaInc.pdf | mail -s 'mail attachment' bob.heckel@ateb.com

# Shell file test operators comparisons flags:
-e filename # exists
-d filename # is a directory. 
-f filename # is an ordinary file
-r filename # can be read by the process.
-s filename # has a nonzero length
-w filename # can be written by the process
-x filename # is executable
-L filename # is a symbolic link

xxUNIXxx END:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:


xxPERLxx START:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: {{{1

# Commandline switch -n says not to autoprint, -p says to print while looping, -a autosplits $_ into @F

# Perl as a filter so you don't need to worry about sed & awk regex syntax:
ssh trpsh005 ps -ef | grep lms_client*| perl -ne 'print if $_ =~ /\d?\d:\d\d:\d\d/'

perl -V  # determine the @INC path

find `perl -e 'print "@INC"'` -name '*.pm'  # which Perl modules are installed
find /usr/lib/perl5/site_perl/5.6.1/ -name '*.pm'  # which Perl modules I installed

# Test perl code (or a regex) interactively in the Perl debugger:
$ perl -de 0
DB<1> $x='a1'; $x=~/(\d)/; print $1 # must be on same line or lose $1

# Test perl from the command line without debugger (hardcore):
$ perl; $x='test string'; $x =~ /^(test).*/; $y=$1; print $y; <Ctr-d>
# Better
$x='test string'; ($y = $x) =~ s/^(test).*/$1/; print $y;
# Best (we get readline capability)
perl -e '$x="test string"; ($y=$x)=~ s/^(test).*/$1/;print $y;'

# Hash slice:
perl -e '@h{key1, key2} = (1,2); print $h{key2};'
# Copy hash h2 into hash h1 (silently overwrites any dups):
@h1{ keys %h2 } = values %h2;

# Regex to pick out the filename, i.e. basename, tail, and strip the path off:
$basefilename = $1 if $fullyqualifiedpath =~ m|[/\\:]+([^/\\:]+)$|;
# Pick out the fully qualified path and strip off the filename:
$directory = $1 if $fullyqualifiedpath =~ m|(.*[/\\:])+[^/\\:]+$|;
# Stem is $1 basename is $2
$file =~ m#((?:[^/]*/)*)(.*)#;

# Specify where to install Perl module (if you want a non standard directory):
perl Makefile.PL PREFIX=~/perllib
# then must later say  use lib '~/perllib';  or  export PERLLIB=~/perllib

# Determine if singular or plural word is required:
printf("Retrieving %d email%s...\n", $mailcount, $mailcount==1 ? "" : "s");

# Hook operator:
my $r = $rchg!=1 ? 'records' : 'record';

# Determine current day of the week:
$current_weekday = (Sun,Mon,Tue,Wed,Thu,Fri,Sat)[localtime(6)];

# Canonical directory read:
opendir D, "$dir" or die "$!"; @FILES=grep { !/^..?$/ && !-d } map "$dir/$_", readdir D;
# Quick directory read, skip dot files while reading directory:
@files = grep(!/^..?$/, readdir DIR);

# Put a pair of items into a hash:
$header{$1} = $2  while /(File|Node|Prev|Next|Up):\s*([^,]*)/g;
# Better
%h = /^(.*?): (.*)$/gm;

# Orcish maneuver v5.10 returns the value from the hash, if it exists. Otherwise, it calculates, caches, and returns the value:
my $id = shift; $user_cache{$id} //= create_user($id);

# Cache keys in a hash (the Orcish maneuver), sort on modified time:
@sorted = sort { ($modtimes{$a} ||= -M $a) <=> ($modtimes{$b} ||= -M $b) } @filenames;

# Rewind a file handle:
seek(FILEHANDLE, 0, 0);

# Cryptic OOP constructor:
sub new { bless({}, shift); }

# Do something every 5 times using modulus:
unless ( $i++ % 5 ) { print 'foo'; }
# Do something every 3000 times using modulus:
print $_ if ($i++ % 3000) == 0;
next unless ( $. % 3000 ) == 0;

# Only unique array elements:
%seen = undef; @uniques = grep(!$seen{$_}++, @items)
# Only unique array elements:
@uniques = keys %{ { map {$_ => 1} @items } };
# Only unique array elements:
undef @uniq{ @items }; @uniques = keys %uniq;  # best?

# Remove empty or undef elements from an array:
@x = grep { !/^$/ } @x;

# Format date string (see LibC for %b, etc.).  E.g. this rets 'May 25'
use POSIX qw(strftime);
$fmtdt = strftime("%b %d", localtime(991422942));
$matchdt = strftime('%Y%m%d%H%M%S', localtime(time));

# Time stamp the last modified date.
my $mtime = (stat($0))[9]; my $t = localtime $mtime; print "Last Modified $t";

# Inplace string substitution without clobbering whacking original variable:
($y = $x) =~ s/foo/bar/g;

# Default (unless a 0 is a valid possibility)
$leavealoneifset ||= $default;
$best_suffix ||= $soso_suffix || $notsogood_suffix || 'txt';

# Split a scalar into an array, saving only part of the split result.
$x = 'zero:one:two';
@z = (split /:/, $x)[0,2]    # @z contains 'zero', 'two'

# lvalue is in scalar context (right side is therefore evaluated in a scalar context, $a gets 8 !!!):
$a = (2, 4, 6, 8); 

# Prepend, concatenate, something to each element of array:
@x = grep { s/^/foosuffix/ } @x

# Input from args or stdin, smash several all parameter arguments into one:
$_ = (join ' ', @ARGV) || <>; 

# Source code passed in implicitly via standard input:
echo "print qq(Hello @ARGV)" | perl - World

exit 0  # <--- success  exit 1 <--- failure  both same as shell

# Determine which compiler Perl was compiled with
perl -e 'use Config; print "$Config{'cc'}"'

use whine qw(toobusy twokids codetooscarylookin);  # no commas!

# Iterate over an array:
for ( $i=0; $i<@colors; $i++ ) { ... }
# or Iterate over an array:
for ( $i=0; $i<=$#colors; $i++ ) { ... }
# or Iterate chomp over two arrays:
map { s/[\r\n]+$//; } @colors1, @colors2;

# Constant declaration:
use constant SECONDS_PER_DAY => 60 * 60 * 24;       # 86400 seconds
$delta = abs($stamp - $stamp_mirror) / SECONDS_PER_DAY;

# Constant used as filehandle (must use concatenation in the open()):
use constant OUTPUTTXTFILE => 'foo.txt';
open FILE, '>>'.OUTPUTTXTFILE || die "$0: can't open file: $!\n";

# Classes OOP
$request->redirect($new_url)
# same as
Request::redirect($request, $new_url)

# A subroutine's incoming parameters are held in @_  This includes flattened arrays, etc. (it may be inefficient since it is "pass by value").
my @parms = @_;

# Force, prepend, a non-standard directory onto @INC:
unshift(@INC, '.');
# More elegant prepending of @INC:
use lib ".";

# Don't be greedy on regex:
$x = 'multi, comma, line'
$x =~ /(.*,)/   <---greedily returns 'multi, comma,' in $1
# but replacing the dot with  [^,]  i.e. what you don't want is non-greedy
$x =~ /([^,]*,)/  <---$1 is "multi,"
$x =~ /(,[^,]*,)/;   <---$1 is ", comma,"

# Regex matches floating point numbers.
/^[+-]?(\d+\.\d+|\d+\.|\.\d+|\d+)([eE][+-]?\d+)?$/
# or regex that matches floating point numbers less Perlishly,
(\+|-)?([0-9]+\.?[0-9]*|\.[0-9]+)([eE](\+|-)?[0-9]+)? 

# Remember not to use = when you need =~
$x =  /foo/;  # searches $_, puts result in $x
$x =~ /foo/;  # searches $x, discards result

# Strip HTML tags from a string:
$string =~ s/<([^>]|\n)*>//g;

# Lookahead (?=) lookbehind (?!) regex assertions.
$x = "foobar";
$x =~ /foo(?!bar)/;  # doesn't match, 'bar' follows 'foo'
$x =~ /foo(?!baz)/;  # matches, 'baz' doesn't follow 'foo'
$x =~ /(?<!\s)foo/;  # matches, there is no \s before 'foo'

# On the fly substitution of array scalars with hash references:
@usernames = ('joe', 'ted', 'larry');
map { $_ = {$_ => length} } @usernames;
# Now @usernames is ( {'joe' => 3}, {'ted' => 3}, {'larry' => 5})
print $usernames[0]->{joe};  # rets 3

# Redirect STDERR error messages to STDOUT.
open(STDERR, ">&" . STDOUT) or die "Cannot Redirect STDERR: $!";

# Low-level alternative to print
write(2, "I'm using STDERR", 16);

# Want affirmative from user:
die unless <STDIN> =~ /^y|^yes|^ok/i;
# or
<STDIN> ne "n\n" ? print "ok\n" : die "Exiting\n";
print "keep going? "; <STDIN> eq "y\n" ? print "ok\n" : die "dead\n";

# Skip the first line of a textfile:
cat junk.txt | perl -e 'while(<STDIN>){print $_ if $.>1}'       # ok
cat junk.txt | perl -ne 'print if $.>1'                         # better
perl -ne 'print if $.>1'  junk.txt                              # best

# Lowercase a word from the command line:
$ echo ThisWord | perl -pe 's/(.*)/\L$1\E/'

# Uppercase (a.k.a rightcase titlecase smartcase) first letter of word in $all_lower:
($first_ltr_uppercased = $all_lower) =~ s/(\w+)/\u$1/g;

# Search and replace change background color of all webpages, recursively:
find . -name '*.html' -exec perl -pi.bak -e "s/BGCOLOR=\"#ffffff\"/BGCOLOR=\"#cccccc\"/" {} \;
# Then if all is well:
find -name '*.bak'|xargs rm

# Canonical search and replace (interactive :bufdo %s/foo/bar/gic may be better):
$ perl -pi.bak -e "s/foo/bar/" *.sas
# Search and replace inside multiple files (there is no UNDO so may want a backup 1st  $ tar cvfz ~/tmp/bak.tgz *ss_wee*):
find . -name '*ss_wee*'|xargs perl -pi -e "s/db6/jaspertwa/g"

# Delete multiple blocks paragraphs of text (consecutive with start and finish lines):  TODO why can't use xargs (it only mods first file)??
for f in `find . -name dn.01.0.bodh.html`; do perl -i -e 'BEGIN{$/=undef}$x=<>;$x=~s#<link rel="shortcut icon.*</link>##sg;END{print $x}' $f; done
for f in `find . -name 'testch*.htm'`; do perl -i -e 'BEGIN{$/=undef}$x=<>;$x=~s/Ukrainian Banner START.*?Ukrainian Banner END/FOOZBALL/sg;END{print $x}' $f; done

# Modify all html files by inserting a similar line below:
find . -name '*.html' |xargs perl -pi.bak -e 's:(<link rel="stylesheet" type="text/css" href.*css/screen.css"  />):MARKER_TO_DELETE$1\n$1:g  # 1-replicate line and prepend unique marker
find . -name '*.html' |xargs perl -pi.bak -e 'next unless /MARKER_TO_DELETE/; s:css/screen.css:css/fonts.css:g'  # 2-make change to new line
find . -name '*.html' |xargs perl -pi.bak -e 's:MARKER_TO_DELETE::g'  # 3-remove unique marker
find . -name '*html.bak' |xargs rm  # 4-if successful

# Swap array elements using an array slice:
@x = qw(a b c);  # produce a list of strings
@x[0,1] = @x[1,0];  <---holds bac now

# In Perl, unlike shell and C:
@ARGV contains the command-line arguments for the script but does not include the command name.  E.g. $ ./test.pl foo bar  <---$ARGV[0] is foo and $0 is test.pl
# Get at them like this:
foreach $arg ( @ARGV ) { ...work on param $arg one at a time... }
# or better:
map { print "$_\n" } @ARGV;
# Contrast with:
while ( <ARGV> ) { chomp; ...work on each line of each param... }

# Filter out all but plain text files from the command line parameters.
@ARGV = grep { -f && -T } @ARGV;

# Clear, initialize, an array:
@arr = ();  # assign an empty list to the array
# Clear, initialize, a hash:
%hash = ();  # NOT  %hash = {};

perl Makefile.PL && make && make test && make install  # perl install mantra - build module downloaded from CPAN

# Number of elements in hash:
print scalar keys %myhash;

# Perl variable heredoc
$stuff = <<"EOT"; ... EOT
# or Perl print heredoc
print <<"EOT"; ... EOT

# Variable interpolation of constants -- print (ugly but it works):
use constant FOO => 0;
print qq:The value of FOO is @{[ FOO ]}\n:;
# Variable interpolation of constants -- regex (ugly but it works):
use constant EXTENSION => 'PDF';
next unless ( $d =~ /.*@{[EXTENSION]}$/ );

# Search file for lines containing a specific 2 digit number in a specific column position, in this case 77 and 78
$ perl -ne '/.{76}(..)/; print if $1==15' foo.txt
# same as the verbose:
$ perl -ne '$_ =~ m/.{76}(..)/; print "$_" if $1 == 15' foo.txt
# or for character queries:
perl -ne 'm/.{174}(\w)/; print if $1 eq "Y"' foo.txt

# To sort on a specific column, see the Schwartzian transformation.

# Slurp an entire file into a single variable -- make sure ff=unix !!
my $contents = do { local $/ = <$fh> };  # old style
# Can use __DATA__ filehandle like SAS' CARDS; or DATALINES to slurp;
my $contents; { local $/ = undef; $contents = <DATA>; }  # old style
# Slurp an entire file into a single variable -- make sure ff=unix !!
my $contents = do { local $/=undef; open my $fh, '<', 'foo.txt' or die; <$fh>;};  # new style

# Current time timestamp since the Epoch:
print localtime();
# Current time timestamp human-readable:
print scalar localtime();

# Current date today:
$currentday   = (localtime())[3];
$currentmonth = qw(January February March April May June July August September October November December)[(localtime())[4]];
$currentyear  = (localtime())[5]+1900;

# Create a unique filename based on seconds since the Epoch using Perl:
print "foo" . time() . ".txt";

# Remove quotes from each element of an array of enquoted items:
my @fl = map /'(.*)'/, @filelist;

# Create a hash using map on the fly:
my %h = map /(BF19\.\w\wX(.*)\..*)/i, @fl;

# Add the first and last columns (@F comes from using -a):
perl -lane 'print $F[0] + $F[-1]' whitespace_separated_nums.txt
# Thanks to the switches, this is what it's doing:
while ( <> ) { @F = split(' '); print $F[0] + $F[-1]; } 
# Compare with
cat whitespace_separated_nums.txt | awk '{i = NF; print $1 + $i}'

# Simple debug comment out a large block of code:
=debugbobh  ...code...  =cut

require Data::Dumper;
print STDERR "HASH DEBUG:\n", Data::Dumper::Dumper( %h ), "\n";

# Set a cookie (after Content-Type: line):
print "Set-Cookie: lastused=foo; path=/; expires=$cookie_expire;\n\n";

# Set a default for an undefined value (using the ternary hook operator):
$x = ($x ? $x : 42);
# Maximum using ternary hook:
$max = $x > $y ? $x : $y;

# Left zero pad a number:
$j = sprintf("%02d", $i);

# C's break is Perl's last.  C's continue is Perl's next.

# Read or edit a Perl module:
vi `perldoc -l net::ftp`
# Documentation for a Perl function:
perldoc -f binmode
# FAQ search:
perldoc -q sort

# Syntax check a directory:
for f in *.pl; do perl -c $f; done

# Print field 3 like awk:
perl -F'\|' -lane 'print $F[2]' pipedelimited.data
# perl -l  # add a newline to results
# perl -a  # use @F which splits on whitespace
# perl -n  # while(<>){...} loop - use -p instead to print
# perl -e  # command line perl code in one line

# Are columns 1 and 3 equal?
perl -ne '@x=split; print if $x[0] != $x[2]' foo.txt
perl -ane 'print if $F[0] != $F[2]' foo.txt  # same, automatic @F instead of @x

# nl(1) number line replacement
perl -n -e 'print "$. $_"' foo.txt
# Better nl(1) number line replacement
perl -pe '$_ = "$. $_"' foo.txt
# Best nl(1) number line replacement
perl -pe 's/^/$.: /' file1 file2 file3

# Automatic LINE: label is available under -ne
perl -ne 'next LINE unless /eplicant/; print "$. $_"' bladerun_crawl 
# Simpler if don't need the label to break out of a nested loop:
perl -ne 'next unless /eplicant/; print "$. $_"' bladerun_crawl 

# Search a tab-delimited file (may want to use -a)
perl -ne '@x=split /\t/; print "@x" if $x[1]=~/foundme/' foo.txt
# Search a tab-delimited file after removing header line (may want to use -a)
perl -ne '@x=split /\t/; print "$x[0] and $x[1]\n" if $.>1' *.xls

# Automatic command line Perl module installation:
perl -MCPAN -e shell  # interactive mode
perl -MCPAN -e 'install DBI'
perl -MCPAN -e 'install DBD::mysql'

# Remove nulls (ASCII 0) from a file (also works as :'<,'>!perl -pe 's/\0//g')
perl -pe 's/\0//g' 
# Remove single quotes from a file.  Simple substitution on the fly printing
# changes to STDOUT
perl -pe "s/'//g" junk

# Replace all instances in files (without backups):
perl -pi -e "s:#\!/usr/bin/perl:#\!/usr/pkg/bin/perl:" junk
perl -pi -e "s/REPLACEME/foo/" dhammapada.rss

# Swap colon delimited items, looping over foo.txt
perl -pe 's/(.*):(.*)/$2:$1/' foo.txt

# Print capitalized words by looping over file and printing at end of file.
perl -ne 'push @w,/(\b[A-Z]\S*?\b)/g;END{print "@w"}' file.txt

# Parse a file for email address pattern (used for Palm Pilot Memo) by looping over file:
perl -ne 'print "|$1 $2" if /\w+ \w+ (.*)<(.*)>.*/' ~/.email_addr

# Uppercase all letters in file (works on foreign characters) to STDOUT:
perl -pe 's/(\w+)/\U$1/g' foo.txt
# Lowercase all words in a file to STDOUT:
perl -pe 's/(.*)/\L$1\E/' foo.txt
# Inplace edit to lowercase all words:
perl -pi -e 's/(\w+)/\L$1/g' desc.LST

# Current time in seconds since the epoch
perl -e 'print time, "\n"'
# Convert a Unix time (1970 is epoch) to RFC822 format.
perl -e "print scalar localtime(983595600)"

perl -e "print crypt('mummy','garbagesalt'),\"\n\""

# Test system function outside of code to debug (Windows examples):
perl -e 'system "attrib +R c:/temp/translate.tpg"'
perl -e "system 'mozilla file:///C:/cygwin/tmp/junk.html'"

# Extract the rightmost (last) column.  Split on whitespace.  Don't need to know how many columns exist.  @F is automatic via -a:
perl -ane 'print pop(@F), "\n";' foo.txt
# Extract the leftmost (first) column.  Split on whitespace:
perl -ane 'print shift(@F), "\n";' foo.txt

# Convert decimal to binary:
perl -e "print unpack('B32', pack('N', 12))"
# Convert binary to decimal:
perl -e "print unpack('N', pack('B32', substr('0'x32 . 1100, -32)))"

# Simple test regex test from commandline check regex without needing a variable (see ~/bin/regex_test.pl for complex tests):
perl -e 'print "found" if "a"=~/[^1-9]/'
# Test a multi-line string using a regex:
perl -e 'print "match!" if "This is my\nmultiline string" =~ /This.*string/s;'
perl -e 'BEGIN{$foo="avenue"};print "ok" if $foo=~/ave/'
perl -e '$foo="avenue";print "ok" if $foo=~/ave/'  # same

# Parse on specific fixed column positions -- also see parse_fixed_width.pl
perl -ne 'push @x, unpack "@1 A36 @37 A36",$_; END{$i=1;for(@x){print "$_\t"; if(++$i%2){print "\n"' foo.txt

# Extract a section of a file where you know the start and end patterns.
awk '/first word/, /last word/ {print}' startendpatt.txt
# Same (don't need  while(<>){...}  when using -ne)
perl -ne 'print if /first word/ .. /last word/' startendpatt.txt

# Extract print a section of a file where you know the start and end line numbers:
perl -ne 'print if 15 .. 17' foo.txt  # inefficient but simple
perl -ne 'print if $. >= 15; exit if $. >= 17;' foo.txt  # efficient but complex

# Print repeat string 5 times:
perl -e 'while($i++<5){print "ok "}'

# Convert ASCII num to char:
perl -e 'print pack "C", 97'
# Convert ASCII char to num:
perl -e 'print unpack "C", a'

# Count the exact number of occurrences of X:
perl -e '$s="ThisXlineXhasXsomeXxsXinXit"; $x=($s =~ tr/X//);print $x;'

# Print 0123456789:
perl -e 'print pack( "H2"x10, map { "3$_" } ( 0..9 ) )'

# Replacement for ls -l:
perl -e 'print scalar localtime((stat "t.pl")[9])'

# Convert a space delimited file to a pipe delimited (to STDOUT):
perl -ne 's/ /|/g; print' foo.txt
perl -pne 's/ /|/g' foo.txt > foopipes.txt

# Get info about a perl module using -M
perl -MCPAN -e 'print $CPAN::VERSION'
perl -MMail::Sendmail -e 'print $Mail::Sendmail::VERSION'

# Show days between modify and access for all files in dir:
perl -e 'map \{printf "%10.3f - $_\n",(-C)-(-A)},@ARGV' *

# wc replacement:
perl -ne '@w=split; $x+=@w; END{print $x}' foo.txt
perl -ane '$x+=@F; END{print $x}' foo.txt  # same

perl -e 'print "it is now @{[scalar localtime]}"'
perl -e 'print "it is now ", scalar localtime'
# m/d/yyyy formatted date like unix date +%m/%d/%Y
perl -e '($d,$m,$y) = (localtime)[3,4,5];print join "/", $m+1, $d, $y+1900'

# Parse string into an array:
perl -e '@words = "What did he say?" =~ /([A-Za-z]+)/g; END{print "@words"}'

# Use capturing parentheses to swap two items:
grep -v fips | perl -pe 's/(.*) (.*)/\2 \1/'
cat bladerun_crawl |sed 's/\(etire\)/FOO\1BAR /'

# Filter ls list.  Don't display any file containing dontlistme in it.
ls | perl -e 'while(<STDIN>){print $_ if grep(!/dontlistme/,$_)}'
ls | perl -ne 'print if grep !/dontlistme/,$_'  # better
ls | perl -ne 'print "$1\n" if /.*(2001_\d+).*/'
# Compare but do so less precisely since \d doesn't exist under awk
ls | awk '/2001_\w/{print $1}'

# Parse a date string:
($mon, $day, $year) = (localtime())[4,3,5];

# Do something alternating days, will return '1' every other day.
date | awk '{print $3}' | perl -e '$x = (<> % 2); END {print $x}'

# Does a file exist?  Pop message box if so
perl -e 'system msgbox if (-f "./myfile.txt")'
perl -e 'print "ok" if (-e "./bladerun_crawl")'

print "Maximum commandline index: $#ARGV\n";
print "Last commandline argument: $ARGV[$#ARGV]\n";

# Use a default if not provided on command line:
$ARGV[0] ||= 66;
$ARGV[0] = ($ARGV[0] ? $ARGV[0] : 66);  <---instead of this mess

# Insert an array inside roughly the middle of another array:
splice @arrayA, $#arrayA/2, 0, @arrayB;

# Create a module template (we only care about MyModule.pm unless CPANing it)
$ h2xs -AX Foo::MyModule

# 'our' allows you to circumvent strict for variables you want accessible from anywhere using the $Package::variable or @MyModule::ISA notation.

# Delete specific hash keys:
delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};

# Pipes (can avoid using system()):
open OUT, "|more" or *OUT = *STDOUT;
open IN, "ps|" or die "Can't start ps";

@x = split /:/,  "ab:cd:::ef:gh";  # two empty fields between cd and ef
@y = split /:+/, "ab:cd:::ef:gh";  # one big fat delimiter between cd and ef

# Find all installation directories:
perl '-V:install.*'

# Using rcs (automatically inserts revision sequence on co)
our $VERSION = sprintf("%d.%02d", q$Revision$ =~ /(\d+)\.(\d+)/o);

# Quick irenamer install: mkdir -p $HOME/perllib/File && cp -i $HOME/code/perl/Irenamer.pm $HOME/perllib/File/
perl -MFile::Irenamer -e 'InteractiveRename(verbose,recurse)'

# Reverse sort a hash:
@files = sort { $filehash{$b} <=> $filehash{$a} } keys %filehash;

# Determine a script's module dependencies (add to eof):
END { print join( $/, values %INC ), $/ }

# Social security ssn number regex:
[0-9]\{3\}-[0-9]\{2\}-[0-9}\{4\}

# Poor man's tac(1) to reverse lines in a file:
perl -e 'print reverse <>' foo.txt

# Use reverse video for debugging (this doesn't require ctrl chars, just paste)
print "DEBUG> \e[7mUnexpected format of 'mystr':\e[m\n";

m/$foo/o  # compile interpolation pattern only once o regex switch:

system('/bin/bzip2', '-k', @zipme);
system('cp', '-i', $maxname, 'c:/cygwin/home/rheckel/tmp/foo');

# Like SAS' scan():
$x = (split / /, $x)[0];

# Hash of anonymous arrays:
%h = ( one => [ 'a', 'b', 'c' ], two => [ 'd', 'e', 'f' ] ); print $h{one}->[1];  # b
# Anonymous hash of anonymous arrays:
$h = { one => [ 'a', 'b', 'c' ], two => [ 'd', 'e', 'f' ] }; print $$h{one}->[1];  # b

use Data::Dumper; print Dumper $myref;
open FH, '>foo' or die "$0: $!"; use Data::Dumper; print FH Dumper @a;

# Read a file into a variable:
open PID, '/usr/local/apache/logs/httpd.pid' or die"; $pid = <PID>;  close PID;

# Read a file into an array (one element per line):
@data = <FH>;
# Print 2nd line in that file:
print "$data[1]";

# push and pop == a stack   push and shift == a queue

push @meals, @breakfast, @lunch, @dinner;  # can push multiple lists, but pop one at a time

push @existingarray, 'more', 'stuff';

@array = ("anicca", "dukkha", "anatta");
%hash = (1=>'One', '2'=>'Two', '3'=>'Three');

$#array is the index of the highest defined array element
# Truncate an array
@whatever = ();  or  $#whatever = -1;

# Check webserver return code to see if it's down
perl -MLWP::UserAgent -e '$u=new LWP::UserAgent;$r=$u->head;print $r->{_rc}'

print "Content-type: text/html\n\n";  # web CGI (HTTP/1.0 at least)

# Split comma-delimited string into anonymous array and show 2nd element:
$a='one,two,three'; $aa = [ split /\s*,\s*/, $a ]; print $$aa[1];

# Unbuffer, i.e. make hot, the LOG filehandle (and switch back to the original):
select((select(LOG), $|=1)[0]);

# Is timestamp recent?:
perl -e 'print "ok" if (stat("prellg"))[9] > time-86400'

# Modify CPAN module settings (perl -MCPAN -e shell) TODO 2008-08-06 not working
cpan> o conf http_proxy http://setproxy.sgk.com/proxy.pac
cpan> o conf urllist push ftp://myurl/'

while ( ($key, $value) = each %myhash ) { ... 

# Is module installed properly?:
perl -MDBI -e 0

# Append 2 hashes (leftside hash takes precedence):
%comb = (%hashx, %hashy);

die 'debug archwitutl.pm', scalar localtime;

# Canonical system call
system("/bin/ls  $_") if $. eq 1;
system('mv', '-i', "$new", "$path/");

# Check return status of system call before proceeding:
if ( system("du -sh $basedir") != 0 ) { die "\n\n\nERROR: can't du $basedir\n\n\n" };

print 'deleted' if unlink '/cygdrive/x/sql_loader/junk';

my ($multiple, $vars, $must, $be, $parethesized);

# Canonical hash:
%hash = ("laurel" => "hardy", "nick" =>  "nora");
# Canonical array:
@array = (10, 20);

# Toggle warnings:
no warnings; $discSize=$W2LIni->{Recording}{mediaSize}; $mediaType=$W2LIni->{Recording}{mediaType}; use warnings;

# Call sub 100 times, and time it
use Benchmark; timethis(100, "MySub()"); 

# Why anonymous arrays are useful:
@children = (\%john, \%peggy); $sues{'children'} = \@children;
# becomes simply
$sues{'children'} = [ \%john, \%peggy ];
print $sues{children}->[1]->{age};  # Peggy's age
# Same
print $sues{children}[1]{age};

# Quick dump Main (see dumpmain.pl for hash included version)
open F, '>junkdumpmain'; for $s(sort keys %main::) { local *sym=$main::{$s}; print F "\$$s is $$s\n" if defined $sym; print F "\@$s is @$s\n" if defined @sym;}
# Then do a >junkdumpmain to "seed" tail and...  TODO tail part not working
$ tail -f junkdumpmain | grep -a potentialHeaderFields junkdumpmain

$array[7][12]				# array of arrays
$array[7]{string}			# array of hashes
$hash{string}[7]			# hash of arrays
$hash{string}{'another string'}		# hash of hashes
$hohoh{Robot}{Santa}{Claus}='mostly harmful';  # hash of hash of hash

# Parse a textfile grid:
perl -ne 'push @AoA, [ split ];END{print "$AoA[1][1]\n"}' junk.txt

# Number of elements (minus 1 so say (0 .. $#a) ) in array:
perl -e '@a=(1,2,3);print $#a'

# Round a number:
printf("%.3f", 3.1415926535);

# Convert a hash to an array to make unique eliminate duplicates:
%hash = map { $_, 1 } @array; @unique = keys %hash;

# Canonical perl translate
$novowels =~ tr/aeiou/!/;  # change any vowel in $novowels into !

($HOST = $host) =~ tr/a-z/A-Z/;  # uppercase en passant (but it's better to use \U and \L for Unicode)

# Sum the 3rd column of a file
perl -l -a -n -e '$n+=$F[2]; END{ print $n}' threecolumnsofnumbers.txt

Expressions - a sequence of literals, variables, function connected by one or more operators that evaluate to a single value-scalar or array. 
Statements are a complete unit of instruction for the computer to process. Statement modifiers: if, unless, until, and while.

# Canonical map:
my @tripled = map { $_ * 3 } @numbers;

# Canonical count number of elements in an array without a temp variable:
$count = () = myarray();

print 'hash key "c" is undefined and this will not autovivify it' if ! defined $h{c};

# Canonical print an array
@a = ('a','b','c'); print "Hello, $_" for @a;

# Canonical regex en-passant - EXTRACT first name (reads left to right)
my ($firstname) = $name =~ /($firstname_precompiledregex)/;
# Canonical regex en-passant - MODIFY first name (reads right to left)
(my $normalizedname = $name) =~ tr/A-Za-z//dc;

# Print the 3rd line in file:
while ( <FH> ){ print if $. == 3; }

# Print the shortest line
perl -ne '$s = $_ if $. == 1; $s = $_ if length($_) < length($s); END { print $s }' bladerun_crawl

local - saves the current value somewhere, creates a new value, and arranges that the old value will be restored at the end of the current block.
my    - lexical scope does not create an entry in the symbol table, variables that you declare in one subroutine can't be tampered with by other subroutines. 

# File into an array:
open FH1, 'junk1.txt' or die "Error: $0: $!"; @foo = <FH1>;

# Thin out, print 10 random lines from a file (good for creating small dummy files):
cat bladerun_crawl | perl -e '@line=<>; for(1..9){print $line[int rand @line]}'
perl -e '@line=<>; for(1..9){print $line[int rand @line]}' bladerun_crawl

# Simple canonical inplace edit replace like vim :g/trendid_/d or sed -i -e '/trendid_/d' foo.txt (caution: sed will turn ff=unix)
perl -i.bak -ne 'next if /trendid_/' foo.txt
# Replace all occurences of number 55 with a random number less than 100
perl -i.bak -pe "s/55/int rand(100)/eg"
# Recursively for specific extensions
perl -pi.bak -e "s/Output Compiled Data/Output_Compiled_Data/" `find . -name '*.sas'`
# Substitute, inplace edit, and make backup from command line.  NOT recursive.
perl -pi.bak -e "s/old/new/g" *.pl
perl -pi.bak -e  's/old/new/g' `find . -name "foo.txt"`

# Print a random number (automatically seeded by Perl):
perl -e 'print rand()'               # <---floating point from 0 to 1
perl -e 'print int rand 5'           # <---integer from 0 to 5
perl -e 'print int(rand(4)) + 1'     # <---integer from 1 to 4
perl -e 'print int(rand(51)) + 25;'  # <---integer from 25 to 75
# Print 3 random numbers which will be 1, 2, 3 or 4
for i in 1 2 3; do perl -e 'print int(rand(4)) + 1, "\n"'; done

# Random password generator
perl -le 'print map { ("a".."z")[rand 26] } 1..8'

# Print the longest line
perl -ne '$l = $_ if length($_) > length($l); END { print $l }' bladerun_crawl

# Paragrep - delete entire paragraph if word found in it:
perl -00 -lne 'unless (/genetic/) {print}' bladerun_crawl

# Word frequency counter:
perl -0777 -lape's/\s+/\n/g' bladerun_crawl | sort | uniq -c | sort -nr

# Choose a random array value (int is optional):
$surprise = $files[int rand @files];

# De-chomp un-chomp reverse chomp:
for ( @lines ) { $_ .= "\n"; }

# chomp improvement for Windows, remove <CR> and/or <LF> from the end of $_
s/[\r\n]+$//;

# Remove part of string and 'chomp' all elements in an array in one swoop.
map{ s/.*=// && s/[\r\n]+$// } @previousrun;

# Read user's input from the commandline:
chomp(my $transtyp = <STDIN>);

# Carriage return newline (i.e. linefeed) cleanup:
s/\015\012/\n/;

# Print hash:
while ( (my $k, my $v) = each %h ) { print "$k=$v"; }
# Print sort hash:
foreach my $k ( sort keys %h ) { print "$k=$h{$k}\n"; }

# Calculate record count change using eval:
diff -ybB -W180 $UTMPDIR/{ols_PREV.txt,ols_CURR.txt} |perl -pe 's/(^\d+)[^\d]*(\d+).*/$1-$2/eg'

# Install CPAN replacement to /usr/local/bin using itself (CHECK CODE MANUALLY 1ST):
curl -L http://cpanmin.us | perl - --sudo App::cpanminus
sudo cpanm Modern::Perl

print "$_" for 1 .. 10;  # horizontal listing of topic variable 
use v5.10; say "$_" for 1 .. 10;  # vertical listing of topic variable 

@chars = 'a' .. 'z';  @nums = 1 .. 10;  # range operator

undef is always false

# Initialize an array from a list:
@a = ('one', 'two', 'three');

my ($pkg, $file, $line) = caller(); print "DEBUG: this sub was called from $pkg in $file:$line\n";

# Enforce mandatory parameters:
$ARGV[1] || die "Usage: $0 90 Imports";

xxPERLxx END:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:



xxOTHERxx START:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: {{{1

:: DOS directory list ls by age, order by oldest last.
dir /p /o:d

:: Short 8.3 DOS names e.g. PROGRA~1
dir /x

' Visual Basic CRLF in decimal.  Octal is 015 and 012.  Hex is 0xD and 0xA.
Chr$(13) & Chr$(10)

Speed of a T1 line is 1.5MB/second.  Speed of a T3 line is 45MB/second.  10Base2  is 10 megabits/sec for 200 meters max cable length.  10BaseT  is 10 megabits/sec over twisted pair.

:: Find your MAC address on W2K (via the network, not the card itself).
> netstat -r
:: Find your W2K MAC address (I think it's directly from the card itself)
> nbtstat -A 47.143.210.171
:: or
> ipconfig /all

:: Connect map drive to a Windows share (cmd not rxvt). MUST BE UNMAPPED TO START.
net use x: \\rtpsawn321\e$ /persistent:yes /user:us1_auth\rsh86800n axhidhamx
:: Cygwin
net use x: '\\rtpsawn321\e$' '/persistent:yes' '/user:us1_auth\rsh86800n' conascent8
:: Disconnect unmap Windows shares (from a DOS prompt):
net use z: /delete /yes
net use * /delete

:: Browse current connections (need single quotes only on Cygwin)
net view '\\emiake'

Register a DLL on WinXP
c:\WINDOWS\system32\regsvr32.exe c:\WINDOWS\system32\MSRDO20.DLL

Microsoft's /dev/null
> attrib missingfile >nul

The colon ':' in a make Makefile can be read as 'depends on'

HTML email link:
<A HREF="mailto:mutt-users-digest-request@mutt.org?Subject=Subscribe Mutt Users Digest&Body=subscribe">mailme</A>
<A HREF="mailto:bqh0@cdc.gov?Subject=Subscribe">mailme</A>
<a href="mailto:&#98heckel&#64&#97&#116&#116&#46&#110&#101&#116">anti-spam email address</a>
<a href="mailto:&#98heckel&#64&#99&#112&#97&#110&#46&#111&#114&#103">rheckel@cpan.org</a>

<!-- Add an HTML button to go back in history: -->
<INPUT TYPE="button" VALUE="Back" onClick = "javascript:history.back()">
<!-- Go back 2 pages: -->
<INPUT TYPE="button" VALUE="Back" onClick = "javascript:history.go(-2)">

<input type="button" onclick="document.body.bgColor='lavender';" value="Change background color" />

' VB plural vs. singular display:
sPlural = IIf((iFileCnt > 1), "s" & Chr(32), Chr(32))

User settings are saved in the Registry here:
HKEY_CURRENT_USER\Software\VB and VBA Program Settings\

:: DOS BAT -- original errorlevel is always 0.  echo %errorlevel%
if c:/foobar exist goto foo_ok ... :foo_ok
:: This BAT test checks to see if the errorlevel return code is 1 OR HIGHER!
if errorlevel 0 goto y_is_available
if [%1] == [] echo 'no args passed to this .BAT'

' Determine which sheet you're using:
MsgBox "'" & ActiveSheet.Name & "' is the currently active worksheet."

:: Add append directory to DOS path:
set PATH=d:\newpath;%PATH%

' Find last used cell in an Excel worksheet:
Sheets("Centura").Cells.SpecialCells(xlCellTypeLastCell).Row

Run MySQL from command-line
$ mysql -t mydatabase < mysql.sql
Run PostgreSQL from command-line
$ psql invest < tmp.sql

' Iterate all Excel cells in a column range:
For Each c In [b1:b400]

Prevent other sites displaying your pages inside their frames:
<META HTTP-EQUIV="Window-target" CONTENT="_top">

<!-- HTML comment -->

<!-- Avoid console errors -->
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<!--Test an httpd Apache installation on localhost:-->
http://localhost/cgi-bin/printenv
http://127.0.0.1/cgi-bin/printenv

RGB hex  FF=100% (white)  CC=80%  99=60%  66=40%  33=20%  00=0% (black)
E.g. #00FF00 is 0% red, 100% green, 0% blue

Byte size increments: mega, giga, tera, peta, exa, zetta, yotta

' Excel -- recognize a letter in a cell.
=If(find("G",A1),1,0)

:: Test for existence of a file in BAT (note no quotes on echo):
if exist foo.txt echo ok

' Determine the date of the 1st day of the month 12 months preceding the
' current month was:
CDate(DateSerial(Year(Now), Month(Now) - 12, 1))

Dial-up connectoids by command line:
rasdial     <---to determine active connection name
rasdial "my connectoid" /d   <---or /disconnect

Hosts file on W2K: /c/WINNT/System32/Drivers/etc/hosts
Well know ports file on W2K: /c/winnt/system32/drivers/etc/SERVICES

<!-- Document may not be indexed, or used to harvest more links. -->
<meta name="ROBOTS" content="NOINDEX" content="1200">

Well known ports search (e.g. FTP is 21) on Unix:
cat /etc/services | grep -e ^http -e ^ftp -e ^ssh|grep tcp

Capture current Cygpath in Cygwin:
cygpath -w $PWD
cygpath -w `pwd`

Start PostgreSQL on Cygwin:
$ ipc-daemon & postmaster -D ~/pg/data >| ~/pg/data/pg.log 2>&1 &
Stop PostgreSQL on Cygwin:
$ pg_ctl -D ~/pg/data stop 
kill -9 [ipc-daemon's pid]

Show Windows pids (winpid) on Cygwin:
ps -W

' Does a directory folder exist?
If Dir(c.Value) = "" Then MsgBox c & " not exist"  End If <---FAILS!!!
' OK
If Len(Dir(c.Value, vbDirectory)) = 0 Then MsgBox c.Value & " not exist" Exit Sub

Determine a Windows user's hostname from an IP:
c:> nslookup 158.111.250.165

Pop up new window using only HTML
<A HREF="http://www.cdc.gov" TARGET=_BLANK>Spawn new window

Mozilla cookies:
/c/Documents\ and\ Settings/bqh0/Application\ Data/Mozilla/Profiles/default/

On CDC mainframe a cylinder is just less than 1MB:
Track==56,664 bytes  Cylinder==15 tracks (ie Cylinder==849,960 bytes)

# HFS JCL job submission:
submit 'bqh0.pgm.lib(include)' && for i in 1 2; do sysout -v|tail -1; sleep 7; done

format c: /S     <---also write autoexec.bat, etc.

Access parameter query:
like [Enter Partial Name] & "*" 
like "*" &  [Enter Partial Name] & "*" 

VB Date is 8 byte floating point value.  Integer portion is days since Dec 30,
1899. Fractional portion is pct of day completed.
E.g. 5/22/97 at 3:00pm is 35572.625

Copy cp entire dir from MVS (Z/OS) to HFS (hfsdir must already exist):
cp "//'dwj.vscp.pgmlib'" dwjlib/
Copy single file from MVS (Z/OS) to HFS mainframe.  Mainframe copy cp.
cp "//'BQH0.INC.SASLOG'" ~/tmp/testing/junk.sas && vi ~/tmp/testing/junk.sas
Copy cp single file from HFS to MVS (Z/OS)
cp tryaccess.sas "//'bqh0.pgm.trash(tryacc)'"
FTP navigation on MVS:
cd "//'dwj.util.library'"
FTP deletion on MVS (note fscked up quotes, must be "'... ):
del "'DWJ.FLNAT04.USRES'"

Unpack a normal unix tarball on EBCDIC HFS without tar:
pax -rvkf vim-6.0-rt2.tar -o from=ISO8859-1,to=IBM-1047

Copy and submit a mainframe job via Vim on USS.  Mainframe copy cp.  
Chain two commands in Vim.
:!cp % "//'bqh0.pgm.lib(%:t:r)'" \| :!sub 'bqh0.pgm.lib(tsaaaaq)'

Python help
>>> print open.__doc__
>>> help("open")

View an MVS mainframe file on HFS side:
cat "//'bqh0.pgm.lib(tsaaaaa)'" | vi -

Refresh fast quickly -- Windows registry.
LOCAL/System/CurrentControlSet/Control/Update/UpdateMode 00 not 01

-- Across database access syntax SQL Server SQLServer
select count(*) from [W23PSQL01\Production].bpms_va.dbo.claims_pharmacy

-- Outer joins preserve the rows that don't match and pad the remaining columns with NULLs.  OUTER keyword is optional.
-- These words replace the comma between tablenames in old style Oracle (+) joins:
LEFT OUTER JOIN

-- inner joins eliminate the rows that *don't* match

-- Built-in Scalar Function SQL Server SQLServer
SELECT CURRENT_TIMESTAMP

-- Only on one table (Oracle v8 can't use JOIN ON syntax!)
select a.numb, b.numb from tmp1 a LEFT JOIN tmp2 b on a.numb=b.numb where b.numb IS NULL

SELECT DATEDIFF (YEAR, '1/1/2002', '1/1/2005')

Fast exit icon c:\windows\rundll32.exe user.exe,ExitWindows

-- Yesterday (24 hours ago) SQL Server SQLServer
SELECT CURRENT_TIMESTAMP-1

-- SQL Server - similar to DESCRIBE in other databases SQLServer
USE sandbox
EXEC sp_help lu_prescriber
-- or less helpfully
EXEC sp_columns lu_prescriber

-- SQL Server whoami
select user_name()

SQL Server < 2005 alternative to Microsoft SQL Server Management Studio
osql -L   # list available SQL Servers on network
osql -E -S 'W23PSQL02\PRODUCTION' -i t.sql -o t.out
osql -n -E -w 200 -d bpms_nd -S 'W23PSQL02\PRODUCTION' -i ckbpmsoutliers.step07.sql 
Interactive (GO to run and QUIT to exit)
osql -n -E -S 'w23psql02\PRODUCTION' -d bpms_mt
Interactive but feeding it from the commandline:
osql -n -E -w 200 -d bpms_ak -S 'W23PSQL02\PRODUCTION' -Q "select count(*) from bpmsoutliers"

-- sqlserver 2005 command line, counterpart to oracle's sqlplus
$ sqlcmd -S zebsamoc00 -d uprd120 -i input.sql -o output.txt

-- ADO/SQLServer connection strings
Provider=OraOLEDB.Oracle.1;Persist Security Info=True;User ID=ods_zeb;Password=ZEBODS_ZB842;Data Source=ukprd613;
Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=sprd1208;Data Source=zebsamoc007

SQL Server 2005 (like Oracle's sqlplus, replaces osql & isql).  Must use cmd, not cygwin
U:\>sqlcmd -S zebsamoc00 -d sprd120
1> select top 5 * from fwn.variablestp    2> go   ...n rows affected...   1> quit

U:\>sqlcmd /?
U:\>sqlcmd -S rtpsamoc008 -d ustst1236 -i t.qry -o t.res

-- now() for SQL Server SQLServer
select getdate()  or  select current_timestamp

-- Size of table in SQL Server database SQLServer
EXEC SP_SPACEUSED N'rheckel.[bpmsoutliersnc60]'

-- Copy an SQL Server table into a new one that does not already exist:
SELECT * INTO xBpmsOutliersNC60 FROM BpmsOutliersNC60 

-- Copy first few rows of Oracle table into new one that does not already exist:
INSERT INTO bobhlm SELECT * FROM links_material WHERE rownum<11;

-- Delete Oracle table (even if records exist in it):
DROP TABLE bobhlm;

--Get Oracle database instance version rack etc information v9+
select * from v$instance;

:: AT command cron for Windows:
at 20:42 /interactive notepad

' Do not prompt user before overwriting:
Application.DisplayAlerts = False

-- Oracle prevent nulls from propagating:
SELECT ename, comm, sal, 12*sal+NVL(comm,0) ...

-- Oracle case insensitive
where ename LIKE UPPER('foo%')

-- Oracle exact date change
update mdpi_shift_downtime set mfg_shift_dt=TO_DATE('9/4/2007','MM/DD/YYYY') where Comment_Txt='Assembly Downtime Test'

-- Canonical Oracle SQL*Plus date examples (Oracle date less than etc)
WHERE e.hire_date < TO_DATE('12/31/1999', 'mm/dd/yyyy')
WHERE birth_date < TO_DATE('19400101', 'YYYYMMDD')
WHERE EntryTs >= TO_DATE('07-NOV-06 00:00:00','DD-MON-YY HH24:MI:SS')

-- Canonical Oracle date range:
WHERE prod_sel_dt BETWEEN TO_DATE('01-JAN-10','DD-MON-YY') AND TO_DATE('31-JAN-10','DD-MON-YY')

-- Oracle last few days search (if activity_dt is DATE formatted):
select count(*) from activity_log where activity_dt > (SYSDATE-3);

-- Oracle same as standard SAS DATE9.
select trunc(sysdate) from dual

-- Oracle date only this month:
WHERE order_dt > TRUNC(SYSDATE, 'MONTH')

select * from retain.fnsh_prod where prod_sel='Y' and trunc(prod_sel_dt)=trunc(sysdate);

-- Oracle generate random positive integer:
select ABS(round(dbms_random.normal*100,-1)) from dual;

select rpad('Melanie', 10, '*') Melanie, lpad('Caffrey', 10, '.') Caffrey

-- Oracle update query samples: 
update pks_extraction_control set pks_level='' where pks_level='.';
update retain.fnsh_prod set prod_sel = 'N', prod_sel_dt = NULL;

-- Oracle SQL*Plus (like SELECT TOP 10 *... in SQL Server)
select * from activity_log where rownum<10;

-- Oracle last month
select ADD_MONTHS(sysdate,-1) from dual;

dbms_output.put_line('rpt at: ' || TO_CHAR(sysdate, 'dd-mon-yy hh:mipm'));

-- Oracle Business hours only
...if (TO_CHAR(sysdate, 'DY') in ('SAT', 'SUN') or
(TO_CHAR(sysdate, 'HH24') not between '08' and '18') ...

-- Oracle CASE or IF-THEN-ELSE shortcut, replacement
--                                IF  THEN     IF       THEN  ELSE
select prod_nm, decode(prod_grp,'MDPI','m','Solid Dose','sd','unk') from samp;

-- Format Oracle format if column too wide that truncation occurs in sql*plus window:
sql> col[umn] MFG_SPEC_TXT_A format a15
sql> column MFG_SPEC_NUM format 999      -- number width w/o zeros

-- Oracle update
UPDATE user_role SET user_role=5 WHERE user_nm LIKE '%Heckel%'
-- Oracle substring replace
UPDATE pec SET pks_txt=REPLACE(pks_txt,'GEN','new') WHERE pks_txt like '%GEN%';

-- Oracle date
select to_char(sysdate, 'Dy DD-Mon-YYYY HH:MI:SS AM') as "Current Time" from dual;  -- Wed 19-Aug-2009 02:51:33 PM  TODO is the 'AM' correct??
select to_char(sysdate, 'Dy DD-Mon-YYYY HH24:MI:SS') as "Current Time" from dual;  -- Wed 19-Aug-2009 14:53:41
select TO_DATE('16-JAN-06');  -- uses Oracle's default date format
select TO_DATE('15-may-2006 16:00:01','dd-mon-yyyy hh24:mi:ss') from dual; -- 15-May-06 04:00:01 PM
select * from activity_log where trunc(activity_dt)=TO_DATE('16-JAN-06','DD-MON-YY');
select TO_DATE('15-may-2006 16:00:01','dd-mon-yyyy hh24:mi:ss') from dual; -- 15-May-06 04:00:01 PM

-- Oracle date between
(TEST_END_DATE BETWEEN TO_DATE('2012-09-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE('2014-06-13 23:59:59', 'YYYY-MM-DD HH24:MI:SS'))
SS.EntryTs >= TO_DATE('01-JAN-05','DD-MON-YY') AND SS.EntryTs <= TO_DATE('31-DEC-05','DD-MON-YY')
-- SQL Server date between
WHERE batch_time >= {ts '2011-01-03 00:00:00'} and batch_time <= {ts '2011-01-04 00:00:00'}

-- Oracle spool (Windows).  Save Oracle SQL*Plus output to file foo.LST
sql> spool %TEMP%/foo
...run qry
sql> spool off

-- SQL check for duplicates, returns nothing if all samp_id are unique:
select count(*) from samp group by samp_id having count(*)>1;
select taebpatientid from final_to_insert group by taebpatientid having count(*)>1;

-- SQL*Plus
sql> show all
sql> set linesize 1000;
sql> set pagesize 9999;

-- Oracle high level view all database tables you own (current schema)
SQL> SELECT table_name FROM user_tables;

-- Oracle high level view all database tables all available schema
SQL> SELECT owner, table_name FROM all_tables;

-- Oracle list all schemas:
SQL> SELECT username FROM all_users ORDER BY username;

-- Oracle select top 10 rows of a table in order:
SQL> SELECT * FROM (SELECT * FROM t ORDER BY c) WHERE ROWNUM <= 10;

-- Oracle describe table
SQL> desc mytable

-- Postgres describe table (no schema prefix)
select column_name, data_type, character_maximum_length
from INFORMATION_SCHEMA.COLUMNS where table_name='mytbl'

-- Oracle what are the view names
SQL> select * from all_views where view_name like '%SPEC%'

' Debug ASP debugging:
response.write "mfg" & Request("Mfg_Shift") & <br><br>""
response.write "foo" & lstrEntryType
' or outside of code (hidden from user if white):
<font color=white><%= Request.Form("menutype") %></font>
<font color=red> <%= "debug " & Request("menutype") %> </font><br>
<font color=red> <%= "debug " & Session("AdminRole") %> </font>

' Since VB does not have substr(), use this:
MyCheck = "aBBBa" Like "a*a"

<form method="POST" name="foo" action="t.asp?MenuType=Batch Data">

-- Oracle how many rows of data in table (with a safeguard):
select max(rownum) from pks_extraction_control where rownum<1000000;

-- WARNING: LEFT INNER JOIN is a syntax error

-- Oracle's MINUS is EXCEPT in ANSI SQL

INSERT INTO links_material (matl_desc) VALUES ('Waiting for update from SAP')
INSERT INTO links_material (matl_desc, matl_mfg_dt, matl_exp_dt, matl_nbr, batch_nbr, matl_typ) VALUES ('Waiting for update from SAP', '01-JAN-1960', '01-JAN-1960', '0737003', '6ZP8404', 'MANL')

-- Oracle prompt (1st time only) for saved environment substitution variable:
select * from tst_rslt_summary where samp_id=&&sampy;

:: abort auto shutdown on WinXP
shutdown.exe -a
:: or 
/cygdrive/c/WINDOWS/system32/shutdown -a

-- Canonical sqlplus
SQL> define_editor=gvim
SQL> ed foo  -- sqlplus adds an .sql extension so probably don't need the -c vim stuff
SQL> @foo

-- Canonical sqlplus save spool output to file
set termout off; set linesize 2000; set pagesize 9999; spool u:/serevent.out; ...SQL...; spool off; quit;

spool u:/ahfa60stab.out;

-- userid/password@hostname
$ sqlplus pks/ev123dba@sdev388
$ sqlplus pks/ev123dba@sdev388 @c:/cygwin//home/rheckel/code/misccode/_sqlplusrc.sql
$ sqlplus pks/ev123dba@sdev388 @t.sql --need an exit; in t.sql to run standalone

SQL> define_editor='c:/program files/vim/vim70/gvim -c "set filetype=sql"'
SQL> set linesize 1000;  -- avoid truncation of results

-- PL/SQL print
set serveroutput on BEGIN DBMS_OUTPUT.ENABLE; DBMS_OUTPUT.PUT_LINE('Hello Word'); END;

-- Oracle (at least) make a copy of a database table
CREATE TABLE mycopy AS SELECT * FROM origtbl

-- Oracle nonaggregated expression (rownum) in an aggregated query - SQL hack:
select rownum, a.* from (select cust, count(ord) from tbl group by cust) a;

-- Oracle view constraints if your drop table doesn't work:
select * from user_constraints where table_name = 'COUNTRIES';

86400 seconds in a day

// Scripting processing instruction (or use <![CDATA[ ):
<? ... >

// Javascript arrays
coffees = ["French Roast", "Columbian", "Kona"]
myArray = new Array("Hello", myVar, 3.14159)

# Where Ruby libraries are installed
ruby -e "puts $:"

Windows runs on little-endian platforms

Use gvim to edit source in Firefox:
about:config
search 'edit', toggle the boolean, add the path to the other one 
C:\Program Files\Vim\vim70\gvim.exe

On Error Resume Next  ' VB/ASP execute next line of code following the error

Dim multiple, vars, are, ok, onasingleline

ASP multiple statments on one line
<% x=3 : y=25 : z=x-y : y=x*z : z=x*x-z+y : y=5*3*z*2/x %>

ASP shorthand alternative to Response.Write(Date())
<%= Date() %>

SELECT * FROM funds ORDER BY transdt DESC  -- ASC is default

Foreign Key is that same value stored within MULTIPLE rows of the "detail" table
CREATE TABLE foo ( ..., employee_id INTEGER NOT NULL REFERENCES employee(employee_id), ... );

c:> echo %random%

Oracle YYYYMMDDHH24MISS date sample:
20070304184943

Hidden startup executables (not found in Programs:StartUp see also Powershell approach):
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
or under Cygwin:
$ regtool -v list '\machine\SOFTWARE\Microsoft\Windows\CurrentVersion\Run'

select top 10 * from tbl  ' SQL Server & Access
select * from tbl where rownum<11  ' Oracle

:: doskey in DOS == alias in Unix
doskey vi=vim $1

// Source an external JavaScript file:
<script type="text/JavaScript" src="sortable.js"></script>

// CSS import
<link rel="stylesheet" type="text/css" href="crc.css"/> 

// inline CSS inline
<div style="color:orange; font-size:150%; font-weight:bold; padding:10px 1px 1px 50px; border:0px dashed">Loading Data Explorer...</div>
                    top  right bot left
<div style="padding:40px 500px 1px 80px;"><image src='../PublishingImages/datapost128.png'/></div>
<div style="color:blue; font-family:monospace; font-style:italic; border:2px solid black; background-color:red; border-style:solid; padding:0px 1px 0px 1px;">foo</div>
<style="cursor:pointer; color:blue; font-family:monospace; font-style:italic; border:2px solid black; background-color:red; border-style:solid; padding:0px 1px 0px 1px;position:absolute">

// CSS in HEAD
<style type="text/css"> body { background:fixed #110110 url(../a_Cakka.gif); color:#FFFF99; } </style>

/* CSS id must be unique, class does not need to be unique */
<div id="myid">Content</div> 	#myid {css rules....}
<div class="myclass">Content</div> 	.myclass {css rules...}

<input type="button" value="On" onclick="myfn('msg',1); return false;">

Browser HTML File URL
file:///c:/cygwin/home/rheckel/tmp

' Autorun VBA macro - create empty workbook, add code via Alt-F11, click
' Window : Hide, save as bob.xls in 
' C:\Program Files\Microsoft Office\Office10\XLStart\

' Autorun an Excel VBA macro:
Private Sub Workbook_Open() ...

:: Windows XP Desktop path:
C:\Documents and Settings\rsh8680\Desktop

# uptime for Windows 
$ systeminfo|grep 'Up T'

:: Remote restart reboot a Windows workstation:
c:\> shutdown -r -m \\zebwd08D26987
# Remote restart Cygwin version:
$ shutdown -r -m '\\zebwd08D26987'
$ /cygdrive/c/WINDOWS/system32/shutdown -r -m '\\zebwd08D26987'

:: Remote shutdown a Windows workstation:
c:\> shutdown -s -m \\zebwd04480k6c

Don't load Mozilla Firefox3 extensions addons:
c:\> firefox.exe -safe-mode

' VBA
If lastgrp <> r.Value Then ... End If

' Write to a file instead of Immediate Window
fnum = FreeFile   Open "c:\temp\junk" For Output As #fnum   print #fnum "foo" & bar  close #fnum

' Wildcard like SQL
If lastgrp <> "none" And Not r.Value Like "T0*" Then ...

Word Doc equivalent to Ctrl-o in vim: Shift-F5

Points are a typesetter's standard unit of measure. There are 72 points to an inch. So a capital letter in 12 point font is one-sixth of an inch tall.  You can fit 6 of these 12 point letters stacked on top each other in an inch (12x6=72).

' Delete all selected items in a multiselect listbox
Private Sub cmdDeleteListItems_Click() Dim i As Integer For i = List1.ListCount - 1 To 0 Step -1 If List1.Selected(i) Then List1.RemoveItem i Next i End Sub

Vimperator Firefox:
C:\Progra~1\Mozill~1\firefox.exe -vimperator "+c ':h index'"
:dia console <--open error console :emenu <TAB> :h index :mes[sages] :se[t] :se[t] all :pref[erences] :pref! <--open about:config :res[tart] :addo[ns]  (<TAB> for all choices then <TAB> & <Shift><Tab> to navigate) :dia history
Vimperator autoload Windows shortcut Properties target box:
"C:\Program Files\Mozilla Firefox\firefox.exe" -vimperator "+u 'u:\code\misccode\_vimperatorrc'

Windows shortcut Properties target box:
"C:\Program Files\Vim\vim72\gvim.exe" -u u:\.vimrc

XML declaration header: <?xml version="1.0" ?> or <?xml version="1.0" encoding="UTF-8"?>

-- Oracle version:
SELECT * FROM v$version

-- Also allows determination of which oracle version(s) are installed
/oracle/app/oracle/product/9208HP64DB1_PAR/bin/tnslsnr LISTENER
/oracle/app/oracle/product/8.0.6/bin/tnslsnr LISTENER -inherit

c:\oracle\ora920\network\admin\tnsnames.ora

-- Oracle are you listening listener?
$ ps -ef |grep lsn  # /oracle/app/oracle/product/8.0.6/bin/tnslsnr LISTENER -inherit
$ tnsping usdev100

-- Oracle are you pingable?
$ while true; do tnsping sprd25|grep OK|awk '{print $2}'|sed 's/^.//'; sleep 120; done;

$ telnet locahost http
# or
$ telnet locahost 80
GET / HTTP/1.0
<CR>

:: Count network hops
c:\> tracert yahoo.com

Windows Task Manager alternative key combination: Ctrl+Shift+Esc 

Open Windows Event Viewer from command line:  eventvwr

<!-- Redirect moved forward new address, 0 indicates immediately -->
<meta http-equiv="refresh" content="10; url=https://connect.sgk.com/Pages/Default.aspx">

Windows Task Manager: Ctrl+Shift+Esc 

:: Purge get new network IP address WinXP
ipconfig /flushdns; ipconfig /release; ipconfig /renew

:: computername, userid, domain, OS version ...
net config workstation

' VB date constant
Dim date1 As Date = #4/10/2008 6:30AM#

=WORKDAY(TODAY(),B17)  ' Excel where B17 is number of business days into the future

-- Oracle calculate business non-weekdays days:
(TO_CHAR(b.sample_status_date,'J')-TO_CHAR(b.sample_received_date,'J'))+1 - ((((TRUNC(b.sample_status_date,'D'))-(TRUNC(b.sample_received_date,'D')))/7)*2) -
  (CASE WHEN TO_CHAR(b.sample_received_date,'DY')='SUN' THEN 1 ELSE 0 END) - (CASE WHEN TO_CHAR(b.sample_status_date,'DY')='SAT' THEN 1 ELSE 0 END) as BusinessDays

-- Oracle if then else
(CASE WHEN TO_CHAR(b.sample_status_date,'DY')='SAT' THEN 1 ELSE 0 END)

' Excel count workdays date range only (e.g. custom format '03-Apr-09 16:00 06-Apr-09 10:30 spans wkend and returns 0.77
=NETWORKDAYS(C2,D2)-1-MOD(C2,1)+MOD(D2,1)
' or total business hours to resolve
=(NETWORKDAYS(C2,D2)-1-MOD(C2,1)+MOD(D2,1))*8

' Subquery (Oracle at least)
select * from eforms_extract.zebulon_request_detail where request_id=(select max(request_id) from eforms_extract.zebulon_request_detail)

Oracle SQLPlus
SQL> ed  -- edits afiedt.buf (assuming a query has already been run)
SQL> r  -- run query

-- SQL Server date datetime literal or  { d '1990-10-02' }  { t '13:33:41' }
WHERE fwn.VariableStp.dtSplTakenTime= {ts '2008-11-21 15:46:59.727'}
-- SQL Server like Oracle TO_DATE: 
WHERE  batch_time > {ts '2008-02-13 00:00:00.000'}
-- but if simple SQL Server date just use:
WHERE batch_time > '2008-02-13'

-- SQL Server version:  SELECT @@VERSION

<!-- Clear textbox on entry click -->
<INPUT NAME="the_batch" TYPE="text" VALUE="Enter batch" onClick="javascript:value=''; return false">
<INPUT NAME="mytextbox" TYPE="text" VALUE="Click to begin editing" SIZE=70 onClick="this.value='';return false">

:: Last logon login times
dir "%userprofile%\ntuser.dat.LOG" /ah /s

-- Who is logged into Oracle:
select * from v$session;

start /b /min /wait notepad.exe
:: waits for Notepad to exit before starting a new one
start /b notepad.exe

XML namespaces:
<xyz xmlns:books="http://www.myco.com/books.dtd" 
     xmlns:paintings="http://www.yourco.com/paintings.xsd">

<xsl:for-each select="Configuration/Extracts/Extract">
<xsl:for-each select="catalog/cd[artist='Bob Dylan']">

<xsl:when test="contains(ExtractID,'dpv1')"><td><div id="dpv1"><xsl:value-of select="ExtractID"/></div></td></xsl:when>

XML transformation/stylesheet linking .XSL(T) (other file) to the .XML doc (this one)
<?xml-stylesheet type="text/xsl" href="DataPost_Configuration.xslt"?>
<?xml-stylesheet type="text/xsl" href="file:///c:/datapost/cfg/DataPost_Configuration.xslt"?>

<xsl:variable name="Str_OutputFilePath">

<!-- DEBUG XSLT 2.0 -->
<xsl:message>!X!<xsl:copy-of select="$addresses"/>!Y!</xsl:message>
<xsl:copy-of select="$DataPostServerURL"/>

<xsl:if test="ExecuteFrequency != 'sunday'">
<xsl:if test="ExtractEnabled &gt; 0 and Folder='LIFT'"> 

Given this xml for xslt to evaluate: <poem author="jm" year="1667">
<xsl:template match="poem"> <xsl:if test="@author='jm'"> 1. The poem's author is jm.  </xsl:if> </xsl:template>

Traditional languages: y = f(x); are this XSLT v1.0:
<xsl:variable name="y"><xsl:call-template name="f"><xsl:with-param name="x"/></xsl:call-template></xsl:variable>
XSLT v2.0 (assumes <xsl:function>... somewhere):
<xsl:variable name="y" select="f($x)"/>

:: Run checkdisk check disk on USB drive E: without rebooting:
chkdsk /f e:

:: Check for a parameter passed
if "%1"=="" goto noparms

To see logged on users in Windows 2003 - "Computer Management" "Shared Folders" view current open shares and sessions 

^ is DOS cmd line continuation... like a backslash at the end of the line in unix

-- Pass a parameter to sqlplus
... AND spid='&1'; ...

-- Oracle sqlplus do not display query results (usually when sending output to .out file)
set termout off

<div style="font-family:arial; color:blue; text-decoration:underline; font-weight:bold; font-size:200%">Newer approach - HTML using CSS</div>

@font-face { font-family: 'myf'; src: url('PRISTINA.ttf') format('truetype'); font-weight: normal; font-style: normal; }

 /* If only one column is listed, return the value of that column. If all the values of all arguments are missing, return a missing value. */
COALESCE(field1, field2, field3-field5) /* checks the value of each column in the order in which they are listed and returns the first nonmissing value */
COALESCE(field5-field1) 

<script type="text/javascript">document.getElementById('txtCDInfo').innerHTML="new text!";</script>

 /* CSS */
body { background-image:url('../images/DataPost.png'); background-color:grey; background-attachment:fixed; background-repeat:no-repeat; background-position:center; }

:: Delete a Windows XP Service:
c:/> sc delete <the svc name>

Factorial: 6! is 6*5*4*3*2*1

Fibonacci each number is the sum of the preceding two: 0 1 1 2 3 5 8 13 21 ...

OldNew percentage change: Take the new, "current value" and divide it by the old, obsolete value. Subtract 1.00 (or 100%) from the result.

Disable screensaver lock Windows XP (see also code\misccode\ScreenSaverIsSecure_Make0.reg)
\HKCU\Software\Policies\Microsoft\Windows\ControlPanel\Desktop
ScreenSaverIsSecure 0

Windows Explorer shortcut Target box override force tree view:
%windir%\explorer.exe /e,u:\_go

WinXP icons
%SystemRoot%\system32\SHELL32.dll

:: Google DNS
nslookup hostname 8.8.8.8  or  nslookup hostname 8.8.4.4
:: OpenDNS
nslookup hostname 208.67.222.222  or  nslookup hostname 208.67.220.220
tracert -d 8.8.8.8

DNS test http://18.62.0.96/

:: Windows - determine what runs at startup etc.
msconfig

# Benchmark a network speed problem
$ time vi -c :q $u/junk

-- Increment counter in Oracle
ROW_NUMBER() OVER (ORDER BY MATERIAL_BATCH_NUMBER ASC) AS myindexN

runas /User:Administrative_AccountName"mmc %systemroot%\system32\inetsrv\iis.msc"

Check XML file for well formedness errors parse validate:
http://www.w3schools.com/xml/xml_validator.asp

MIME type:
application/xhtml+xml

<!-- HTML5 -->
<!DOCTYPE html>
<html lang="en"> ... </html>

-- Oracle regex - returns 250/50 MCG
select regexp_substr(upper('A Disk Inh Pwdr 250/50 mcg 60D'),'\d+/[^/]* *MCG') as strength2 from dual

Virtual Box after setting \code (put the mount cmd in /etc/rc.local for debian distros)
mkdir ~/code; sudo mount -t vboxsf -o uid=1000,gid=1000 code /home/rheckel/code

-- Oracle not equal !=

/* Linking to external CSS stylesheet: */
<head><link rel="stylesheet" type="text/css" href="stylesheet.css" /></head>

/* Embedding CSS styles within an html page: */
<style type="text/css"> body { color: #555; font-family: Trebuchet, "Trebuchet MS", "Lucida Grande", "Lucida Sans Unicode", sans-serif; font-size: 85%; margin: 0; padding: 0; } </style>

/* Example of defining style for an entire page: */
body { margin:0; padding:8px 4px 12px 4px; color:#ffbf11; background:#000000 url(images/space.gif); }

:: Win7 enable hibernation
> powercfg /hibernate on

Ctrl-r odbc commandline odbcad32

-- Build Oracle GRANT statements for @myfilesql (run as pks)
select  'grant select,insert,update,delete on ' || tname || ' to pks_user' from tab

-- Build Oracle SYNONYM statements for @myfilesql2 (build these as pks but run them as pks_user) $ sqlplus pks_user/pksu388@ustst581 @synonyms.sql
select 'create synonym PKS_USER.' || tname || ' for PKS.' || tname || ';' from tab

Remote Desktop C:\WINDOWS\system32\mstsc.exe /admin
Remote Desktop restore full screen from maximized window: Ctr+Alt+Break
Remote Desktop Ctr+Alt+End is Ctr+Alt+Del

:: Delete all files in a directory using .bat
DEL z:\Data_Trending\MDPI\*.* /Q

-- SQL Server
WHERE datepart(year,insert_date)='2005' AND datepart(month,insert_date)='7' AND datepart(day,insert_date)='31'

--SQLPlus formatting
column meth_spec_nm format a80;

:: Determine dotnet .NET Framework version - look for e.g. v4.0/:
dir %windir%\Microsoft.NET\Framework\
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\InstallRoot

-- Oracle schema info
select object_type, count(*) from dba_objects where owner='PKS_USER' group by object_type;

// Font size attributes CSS
h4 { color:#FFFF99; font-weight:bold; font-size:110%; font-style:italic; width:70%; border:1px dashed #333 }

-- Be careful with asterisks if tables aren't named identically
SELECT foo FROM tblfoo  UNION      SELECT bar FROM tblbar; -- stacks two tables and eliminates dups
SELECT foo FROM tblfoo  UNION ALL  SELECT bar FROM tblbar; -- stacks two tables and keeps dups (rare since records are then ambiguous)

DELETE FROM pks_extraction_control WHERE meth_spec_nm LIKE 'ATM02102%';

Excel uses exponentiation e.g. 1E+13 for large numbers - avoid by Format Cells : Custom : Enter "#" in Type field

:: Find DNS info for a site (or IP)
nslookup zdatapost.sgk.com

What version of java are you running:
c:\> C:\ProgramData\Oracle\Java\javapath\java -fullversion

-- Oracle concatenation
select column_name, data_type || '(' || data_length || ')' as fancy_type

:: Which Windows files are open on server?:
psfile '\\okpsawn557' -u uxx1903 -p uxx06tes
:: Force Windows unlock open file closed (stupid reverse paramter required for closing a file):
$ psfile '\\rtpaswn321' -u uxx1903 -p uxx06tes 25060 -c

xmllint --noout Bookstore-DTD.xml
xmllint -schema Bookstore.xsd --noout Bookstore-XSD.xml
au BufRead *.xml map <F3> :silent 1,$!xmllint --format --recover - 2>/dev/null

alias lims='sqlplus sasrepor/sasrepor@sprd25'

:: SELECT constant to provide an empty column 
select '' as test_result, ...

Ubuntu purple color hex: #290020  RGB: 41 00 32
Ubuntu brown color hex: #965224  or RGB: 150 82 36

" Vimscript's wacky by-ref...:
let sorted_list = reverse(sort(unsorted_list))
" ...is almost always supposed to be:
let sorted_list = reverse(sort(copy(unsorted_list)))

Pretty print indent XML
xmllint --format t.xml

-- Compare Oracle schemas
select count(*), object_type from dba_objects where owner='PKS' group by object_type;

<div id="divTestArea3" style="width:50px; height:50px; display:none; background-color:#89BC38;"></div>

<a href="javascript:void(0);" onclick="alert('Hello, world!');">Test</a>

-- Rename oracle table
ALTER TABLE user_role3 RENAME TO user_role2;

-- Expire Oracle user password
ALTER USER LIMSARCH PASSWORD EXPIRE;

-- Change Oracle user password
ALTER USER limsarch IDENTIFIED BY new2dayJuly;
ALTER USER limsarch IDENTIFIED BY "new2dayJuly" REPLACE "oldpw";

-- Change password Postgres password
ALTER USER heckel WITH PASSWORD 'syP@ss';

-- Oracle copy table
CREATE TABLE user_roleTEST AS SELECT * FROM user_role;  -- do something to TEST...
DROP TABLE user_role;  -- ...if it worked do this...
CREATE TABLE user_role AS SELECT * FROM user_roleTEST;  -- ...and this

-- Oracle days from today, two days ago
select to_char(sysdate-2, 'DD-MON-YY') from dual
select sysdate-2 from dual

Windows work gvim GUI Target: icon:
"C:\Program Files\Vim\vim73\gvim.exe" -u u:\code\misccode\_vimrc
or better just point to your .vimrc using D:\Program Files (x86)\Vim\_vimrc:  source d:/cygwin64/home/bob.heckel/dotfiles/_vimrc

Windows commandline CPU monitor (must do locally, can't do it remotely with /U /P /S like systeminfo)
c:\> wmic cpu get loadpercentage

cygcheck -cv w3m  # is package OK?

git stash && git stash apply  # git snapshot

git config user.name  # whoami
cat ~/.gitconfig # whoami
git config user.email

git log --pretty=oneline
git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short
git log --since="3 months ago" --pretty=format:"%Cblue%h %ar |%Cgreen %s%Cblue %d [%an]" --graph --date=short

# wget-ish:
git clone git://busybox.net/busybox.git
git clone git://github.com/bheckel/dotfiles.git
git remote set-url origin git@github.com:bheckel/dotfiles.git

# git new branch:
git branch mynewbranch; git checkout mynewbranch # or just branch and checkout in one swoop: git checkout -b mynewbranch

# git switch branches
git checkout master

# git commit mantra git mantra:
git add . && git commit -m 'cleanup' && git push
git add . && git commit -m 'mod'  # or better  git commit -a -m 'mod'
git add cfg/DataPost_Configuration.xml && git commit -m 'mod single file'

# github commit mantra (github is origin):
gs |grep modified
git add _bashrc _vimrc oneliners && git commit -m 'mod' && git push origin master

# git merge something into current branch:
git checkout master && git merge mynewbranch && git branch -d mynewbranch

# git discard throw away trash changes:
git checkout -- DataPost_Configuration.map  # BEST single file trash changes
git checkout .   # abandon all pending changes "not staged for commit"

# git whatif changes:
git stash
git stash save 'saved because too lazy to branch';  # then  $ git stash drop  or to delete ALL stashes later when You Are Sure: $ git stash clear 

# git canonical stash and restore:
git stash; git checkout emergencybranch; ...hack... ; git checkout branchistashed; git stash list; git stash pop

# git stash restore
git stash apply stash@{1}
# Throw away a restored stash (or any changes really):
git checkout .

# git delete branch if merged (-D if not):
git branch -d killthisbranch

git ls-files  # list which files are tracked under git source control not just staged

# Edit git existing previous git commit messages:
git commit --amend -m 'this changes your last, wrong, commit message to this'

# List git branch dates sorted descending
git for-each-ref --sort=-committerdate refs/heads/ --format="%(committerdate:short) %(authorname) %(refname:short)"

# Diff anything uncommitted:
git diff 97a158d 5e4abd2 # or git diff (assumes HEAD) or git diff cfg/ or git diff cfg/DataPost_Configuration.xml
git difftool  # uses vimdiff if previously  $ git config --global merge.tool vimdiff

# Diff with last commit:
git show
# View git old version of file from different branch (in pager):
git show eacbd91:code/ods_0002e.sas
# View git old version of file from different branch (in editor):
git show master:cfg/DataPost_Configuration.html |vi -

# git edit modify rewrite previous existing git commit message:
git commit --amend -m 'change your previous, last, wrong, commit message to this'

# git compare a file from another branch:
git difftool anotherbranch code/DataPost_Trend.sas  # see what's different, if that's ok then...
git fshow anotherbranch  # see just the last mod filenames in anotherbranch
git checkout anotherbranch code/DataPost_Trend.sas  # ...replace the current branch's file
# Compare old version of file from different commit to this commit - current (hash-less) commit must come 2nd!!:
git difftool eacbd91:code/ods_0002e.sas code/ods_0002e.sas

# Rename branch local (current) branch:
git branch -m mynewbranchname

git branch mynewbranch master  # copy branch from a specific branch, in this case master, to new branch

git add README  # use git add -f README to force add if it's excluded by .gitignore

# git on a foreign box:
mkdir dotfiles; cd dotfiles; git init; git remote add origin git@github.com:mygithubacct/dotfiles.git; git pull origin master; ...edit/add/commit git push origin master

# Test AJAX etc that won't work using file:// etc.
$ python -m SimpleHTTPServer  # http://0.0.0.0:8000 now exists

-- SQL Server hideous datepart splitout complement of Oracle TRUNC:
dateadd(dd,0, datediff(dd,0, fwn.VariableStp.dtSplTakenTime)) as dt

<!-- Predefined character entities -->
&lt; &gt; &quot; &amp; &apos;  &#169; or &#xA9 is copyright symbol

<![CDATA[ ...protected stuff goes here... ]]>

<ExtractString><![CDATA[
      foo
]]></ExtractString>

private static final String[] items={"java", "strings", "in", "array"};

Canonical test lorem ipsum debug string:
"lorem", "ipsum", "dolor", "sit", "amet", "consectetuer", "adipiscing", "elit", "morbi", "vel", "ligula", "vitae", "arcu", "aliquet", "mollis", "etiam", "vel", "erat", "placerat", "ante", "porttitor", "sodales", "pellentesque", "augue", "purus"
Lorem ipsum dolor sit amet consectetuer adipiscing elit.

Log.d(getClass().getSimpleName(),"my debug wtf");

ISO 8601 date format (UTC)
2008-08-30T01:45:36.123Z

--Count all test_end_date and non-null test_end_date at the same time:
SELECT material_description, count(*), count(test_end_date)

--Oracle select literal underscore
WHERE UPPER(mat_desc) LIKE '%\_TH%' ESCAPE '\'

// JQuery debug print
console.log("the_form.cbo.value=%o", the_form.cbo.value);
var foo="hello"; var bar="world"; console.log(foo + " " + bar);

// JQuery chainable
$('.myclass').css('background','red'}).height(100);

select count(distinct sampname) from result where sampcreatets between to_date('01-JAN-12','DD-MON-YY') and to_date('31-DEC-12','DD-MON-YY')

:: Which version of Windows are you running?: c:\> ver

 /* Javascript object */
:javas var jedi={ name: "Yoda",age: 899,talk: function(){alert("foo");} };
 /* Javascript object usage */
:javas alert(jedi.age)
:javas jedi.talk()

Cygwin Windows free diskspace free
while true; do df -h '//opsawn557/e$'; sleep 60; done

 /* Javascript concatenation */
strcat = '<a href=http://www.dhammawheel.com/viewtopic.php?f=20&t=>' + rnd2 + '</a>';

ISO 8601 date time format: 2013-04-27T18:00:00-05:00  2013-04-27T18:00:00,1-05:00

-- PL/SQL Developer user prompt msgbox:
... AND UPPER(a.sample_id) like &< name = "Sample Id or mask.  Wildcard is %" hint = "Entry not required" type = "string" uppercase = "yes" default = "%" ifempty = "%" > ...

-- Exit sqlite3: .q
-- View attached sqlite3 databases: .databases
-- View available sqlite3 tables: .tables
-- View various sqlite3 settings: .show
-- View field names sqlite3: .schema mytbl
$ sqlite3 test.db "SELECT * FROM Cars;"

Modulo finds the remainder of division of one number by another:
11 % 3, is 2, because 3 goes into 11 three times with a remainder of 2.

-- Cartesian inner join:
SELECT Name, Day FROM Customers, Reservations;

http://simplynoise.com/classic/noiseVol.swf

There are two cscript.exe in the 64-bit OSes. One is located at
%WINDOWS%\System32, other one is located at %WINDOWS%\SysWOW64.  The one under
System32, is a 64-bit version. The one under SysWOW64 is the 32-bit version.

" VBA concatenation:
Obj_ADOTrns.ConnectionString = Wscript.Arguments(0) & "_ADO_" & Wscript.Arguments(1) & ".con"

// Java concatenation
System.out.println("Hello " + name);
System.out.println("Return".concat(" of").concat(" the king."));

// Java array
int[] array = new int[5] { 1, 2, 3, 4, 5 };

Administrator cmd.exe: Run / type cmd / Ctrl-Shift-Enter

:: Win7 slow network debug (as Administrator):
netsh interface tcp show global
netsh interface tcp set global autotuning=disabled
:: restore
netsh interface tcp set global autotuninglevel=normal

:: Force delete remove rm Windows hidden file that Cygwin can't rm:
u:\misc> del /A:H Thumbs.db

-- Oracle set zero to null:
to_char(CASE WHEN a.result_number=0 THEN null ELSE a.result_number END) as result_number

Javascript floating point numbers:
var n1 = 100.12

# Read a csv file in R language:
d <- read.table('/home/rsh86800/t.csv',header=TRUE,sep=',')
d2 <- read.csv(file="readfile.csv.r.txt",head=TRUE,sep=",")  # same

-- Canonical SQL count function 
COUNT(*)                returns the number of rows in a table
COUNT(DISTINCT ColName) returns the number of unique values for column ColName
COUNT(ColName)          returns the number of rows that have a non null value for ColName

-- Only those columns explicitly listed in the GROUP BY clause may appear un-aggregated (i.e. not as a parameter of an aggregate function) in the SELECT or HAVING clauses.  That usually means the SELECT is equal or shorter to the GROUP BY.

UPDATE Professor SET Salary=Salary*1.1, Dept="IT" WHERE Dept='555';

<iframe src="https://zdatapostd.gsk.com/datapostDEMO/DataPost_Results.html" width="850px" height="10000px" frameborder="0"> <p>Your browser does not support iframes.</p></iframe>

<!--  «  a left-pointing double angle html entity -->
&#171;

<!-- xslt if AND -->
<xsl:if test="ExtractEnabled &gt; 0 and Folder='LIFT'"> 
<!-- xslt if AND LIKE -->
<xsl:if test="TrendEnabled &gt; 0 and contains(TrendDescription, 'HFA')"> 

# Edit a Windows file using UNC path under Cygwin
vi '\\okpsawn557\d$\oracle\ora81\network\ADMIN\Tnsnames.ora'

' Excel:
=VLOOKUP(B11, A2:B4, 2, FALSE)
' B11 holds a code you dont understand, A2:B4 is the lookup "table" whose 1st col contains B11, its 2nd col contains the lookup value to put in the current cell. "2" indicates the table lookup value is in the 2nd column. FALSE=not sorted.

' Excel difference in cell values:
=IF(A6<>BD6, "yes", "no")

-- SQL sum count a group flag:
sum(case when status = 'CANCEL' then 1 else 0 end) as cancelflag

-- Postgres dates:
where storeid in(&SID) and created > date('now') - interval '1 year'
select date('now') - interval '1 month' as x
-- Postgres data from last 2 days:
select clientid, taskdate, hpprogramid, count(*) from naalytics.ehalthplanpatients_test where taskdate > date('now')-interval '2 day' group by clientid, taskdate, hpprogramid order by taskdate desc

-- Postgres jobs status of jobs I am running:
select current_query from pg_stat_activity where usename='bheckel'

-- Postgres change datatype:
select stre_id as stid, cast (value as integer) as Waitime ...

-- Postgres commandline ODBC:
isql -v jaspre bheckel mypw

-- Postgres commandline:
psql -h ajsperdb1.edp.atbe.com TEBMART
psql -U atbleau -h db-02.twa.taeb.com teb
psql -h db-06.twa.taeb.com ATEBMART -c "select * from analytics.reportinglog where reportname='TMMRep_Reporting_Automation' order by lastmodified desc LIMIT 1"

-- Postgres empty a table:
TRUNCATE bigtable, fattable;

-- Postgres remove leading zeros to find 01, 1, 03, 3:
where trim(leading '0' from storeid) in ('1','3')

-- Postgres cast convert type:
select * from stores where clients_fkid=999 and storeid::int4=3

-- Postgres version
select version();

:: Send To folder c:\temp
%APPDATA%\Microsoft\Windows\SendTo

-- SQL GROUP BY count more than one
select patientid, count(*) from analytics.health group by patientid having count(*)>1
-- Select only those with 2 or more maskedkey for one patient:
select id, count(distinct maskedkey) from xrfilldata where id in ('999','888') group by id having count(distinct maskedkey)>1;

-- SQL convert timestamp to date then sum pickeduptimestamp if picked up in a during month, a range of dates:
sum(case when date(pickeduptimestamp) between '01MAY2015' and '31MAY2015' then 1 else 0 end) as May2015, ...
...and (date(pickeduptimestamp) between date('2016-02-01') and date('2016-04-30'))...

-- Set binary date flags in SQL:
sum(case when date(pickeduptimestamp) between '01MAR2015' and '31MAR2015' then 1 else 0 end) as Mar2015

-- Terminate query, self-kill a Postgres kill query:
select current_query, procpid from pg_stat_activity where usename = 'bheckel'
select pg_cancel_backend(8501);

-- SQL take only the highest value:
where listdate = (select max(listdate) from test.master_npi)

-- Postgres date range, pull data from last year for patients over 50:
filldate > date('now') - interval '1 year'  and  patientdob < date('now') - interval '50 year'

-- Postgres date range specific start date, go back 18 days:
and filldate>=(date('2016-05-15')-18) and filldate <='2016-05-15'

-- Postgres determine birthdate age range:
case when extract(years FROM age(patientdob))>=90 then 90 else extract(years FROM age(patientdob)) end as age
date_part('year',age(patientdob))>=41 and date_part('year',age(patientdob))<=75

-- Postgres calculate age:
date_part('year'::text, age(pd.dateofbirth::timestamp with time zone)) AS age
... patientdob < date('now') - interval '18 year'

-- Postgres min max calculate age:
select min(date_part('year',age(dateofbirth))), max(date_part('year',age(dateofbirth))) ...

-- Postgres date truncate:
date_trunc('day', etl_ts)

-- Postgres date selection, capture all activity for the 14th
select * from generate_series('2015-12-13'::timestamp without time zone, '2015-12-15'::timestamp without time zone, '1 second'::interval)
where date(generate_series) <= date('2015-12-14')

-- Postgres psql save write output to file:
select distinct pmapuserid, loginname as pmapusername, defaultclientid as clientid
\o saveoutput.txt  (\o to quit)  then run query

curl -o ~/tmp/breaching_whale.jpg -OL https://cdn.learnenough.com/breaching_whale.jpg

-- Postgres date truncation:
where date_trunc('minute', ahpp.lastmodified) = '2016-02-23 08:56:00'::timestamp

-- Postgres help
-- psql help  \?

fulljoin FULL JOIN: an INNER JOIN that has been augmented with rows in either table that are not in the other table

selfjoin SELF JOIN: a recursive join that results when a set of data is joined back to itself.
Typically encountered when a parent-child relationship in a hierarchy needs to be traversed.
When using ANSI syntax to accomplish this, only the JOIN...ON syntax will work, and the keyword INNER can be used for clarity.

-- Activate blank Windows screensaver from a .bat:
start %windir%\system32\scrnsave.scr -s

-- Find next Postgres sequence number:
select nextval('analytics.tmm_enrollmentperf_tmm_enrollmentperfid_seq');

-- Postgres remove seconds from timestamp:
psql -h db-06.twa.taeb.com ATEBMART -c "select to_char(lastmodified, 'yyyy-mm-dd HH24:MI') from analytics.reportinglog where reportname='TMMRep_Reporting_Automation' order by lastmodified desc limit 1"

-- Postgres between two dates date range:
where created>='2016-05-11' and created<'2016-05-12'
-- Postgres 2016-09-01 thru 2016-09-30 date range:
select min(filldate), max(filldate) from sdfarchive where filldate >= date_trunc('MONTH', now())-'1 month'::interval and filldate < date_trunc('month', NOW())-'1 month'::interval+'1 month'::interval;

-- Postgres extract months:
select clientstoreid, to_char(filldate, 'YYYY-MM') as mymonth, count(*) as cnt ...
select SUM(amount) as sales, date_trunc('month', created_at)::date as date from orders group by date order by date DESC;

-- Postgres substr:
select distinct substring(cr.gpi,1,10)

-- Postgres reformat date no dashes:
select 'EXPIRE='||to_char(date('now')+365,'YYYYMMDD') as x2

-- Yesterday in Postgres date:
and lastmodified >= CURRENT_DATE-1

To save postgresql output to comma pipe delimited csv file (warning - multiple runs append):
psql> \f '|' \a \o /Drugs/Personnel/bob/t.csv
psql> \f ',' \a \t \o ~/tmp/bob/withoutheader.csv
psql> \e

-- Postgres commit transactions (case-sensitive).  Or use:  BEGIN; update tbl set field=0; COMMIT; (or ROLLBACK;):
\set AUTOCOMMIT off
commit;

-- Zero pad a number in postgresql:
select distinct lpad(clientstoreid::text, &sidlen, '0') as clientstoreid, ...

-- Postgres double pipe || alternative it does a SAS compress(clientstoreid)||compress(pharmacypatientid): 
select patientdateofbirth, concat(clientstoreid::text,pharmacypatientid::text) as upid
select patientdateofbirth, concat(trim(leading '0' from clientstoreid::text),pharmacypatientid::text) as upid

-- Windows System Information Tool
msinfo32

-- Find duplicates Postgres
select * from analytics.healthplanpatients hp where row(hpprogramid, externalpatientid, cardholderid, pharmacyid) in (select hpprogramid, externalpatientid, cardholderid, pharmacyid from analytics.healthplanpatients_test);

-- List describe Postgres tables in psql:
\d

-- Comma separated column
select string_agg(distinct atebpatientid::varchar,',') from cce.ccepatientstaging where clientid=22;

# Make tmux windows tile evenly:
:select-layout even-horizontal

' Excel multiply two columns and produce a scalar: =SUMPRODUCT(O37:O38,P37:P38)

-- Postgres first day of last month:
select date_trunc('MONTH', now())-'1 month'::interval;

-- Postgres bulk load a textfile to a table:
\COPY analytics.obcdaily (client_name, , job_type_extra, att_count) FROM /Data/psql_import_temp.csv CSV HEADER

-- Postgres windowing function, attach department average calculation to each row by department:
SELECT depname, empno, salary, avg(salary) OVER (PARTITION BY depname) FROM empsalary;

masked_patientkey = encode(digest(coalesce(split_part(patientnamefirst, ' ', 1),'') || patientnamelast || (case when patientdob is not null then to_char(patientdob,'yyyy-MM-dd') else '' end) || substring(coalesce(patientposctalcode, ''), 1,5), 'sha256'),'hex')
select digest(patientnamefirst,'sha1') from rxfilldata_parent limit 1;

xxOTHERxx END:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:
