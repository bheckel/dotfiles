###############################################################################
#     Name: $HOME/code/misccode/oneliners
#
#  Summary: Programming and sysadmin fragments I've collected over the last 
#           two decades.  Section-searchable via ~/dotfiles/gone.sh.  Comments 
#           are often written for searching, not proper English.
#
#                 °
#          ~~~~~~~~°~~~~~~~~~~~
#                 ° °
#              ° °°
#            {°^°}=~~€ .. .
#
#          ^^^^__^^^^^__^^^_^^^
#
#  Created: 02-Jun-1998 (Bob Heckel)
# Modified: 25-Sep-2021 (Bob Heckel)
###############################################################################

xxVIMxx START:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: {{{1

" Delete blank empty lines:
:g/^$/d
" Delete blank empty lines (including nonprinting characters):
:g/^\W\+$/d

" Thin out a file by deleting every other line:
:g/^/ + d 
" or to delete 2/3 of the file:
:g/^/ +, ++ d 

" Doublespace a file:
:%s/$/^M/g

" Insert a line, interleave, after each line in a file:
%s/$/^Mfoo bar/gc  <--^M is control char Ctr+v + Return

" For each line containing UPRD37, do this substitution if rtpsduxrax exists:
:g/UPRD37/s/rtpsduxrax/us1sduxray/c

" Delete line 10 and the 3 lines following it (total 4 lines deleted)
:10d 4

" Delete all spaces from the lines between, but not including, After and Replicant:
:g/After/+,/Replicant/- s: \+::g
 
" Delete all *lines* containing the word emacs.  E.g. 'Boot the emacs OS'
:g/\<emacs\>/d

" Delete all lines NOT containing any part of either of these words.  global command uses the OR operator \| (chaining alternation multiple conditions):
:g/^foo\|^bar/d

" Yank all lines containing Emily into buffer a (must use uppercase register or only get last yank). Clear register A before beginning:
:let @a='' | :g/Emily/y A
" Delete line above a blank line (e.g. last line in a block or paragraph) into register a:
:let @a='' | :g/^$/-1 d A

" Highlight, view, trailing whitespace:
:se hls | /\s\+$/

" Strip all trailing whitespace (especially useful in MVS SAS files):
:%s:\s\+$::gc

" Surround each word with single quotes.  E.g. foo, bar, baz, boom:
:%s/\(\w\+\)/'\1'/gc

" Find lines with 'Replicant', substitute.  Then copy those lines to the bottom of the file:
:g/Replicant/s/were/WERE NOT/ | copy $

" Move all lines containing foo to EOF:
:g/foo/ co $
" Copy the line (or lines) preceding foo to the last line in the file:
:g/foo/- copy $
" Go up 2 lines to do the copy:
:g/foo/-- co $

" Moves a section of text below another section of text.
:g/StartOfBlockToMove/,/NextBlockStartHere/-1 mo /MoveToAboveThisLine/-1

" Append all (potentially non-contiguous) lines containing foo to junk.txt.  Do NOT forget the '.' (current line address):
:g/foo/ . w >> t.txt
" or using marks:
:'a,'b g/foo/ . w >> t.txt

" Specify which lines, starting with Th, should have their e turned to E:
:,+15g/Th/s/e/E/gc

" Reverse all lines in a file (the zero is a noop where the matching lines, i.e. all of them, are continually placed):
:g/^/m0

" HTMLify (htmlize htmlify).  TODO requires 2 passes.  Misses first line:
:g/^$/+ s/^./<P>&/
:g/^$/- s:.$:&</P>:

" Show matches with context, nondestructive:
:g/replicant/z#.5|echo "==========" 

" Confirm paranoia global :g actions:
:g/global delete with prompt/ if input("del line? " . line(".") . ":" . getline(".") . " y/[n] ")=="y" | delete | endif

" Delete a block range, sort of like paragrep, if you can determine start and end of blocks (must use slashes):
:g/^\s\+The SA/;/^ProdSp/d

" Non-inclusive delete.  Only delete everything between these two lines:
:?firstword? 1,/lastword/ -1 d

" Chain two searches, find the first 'peak info' appearing the following only AFTER 'am0908'
/am0908/;/peak info

" Delete everything except these two strings:
:g!/SC04\/013-25\/60-24-01\|6ZM1234/d

" Insert specific lines of an external file into the top of your file.
:0r !head -n15 foo.txt
" Insert specific range of an external file at very top of your file.
:0r !awk'/start/,/end/{print}' foo.txt

" Delete everything prior to vim, keep the rest of the line:
:%s/.*\(vim.*\)/\1/gc

" Lowercase each letter in file (use u for uppercasing):
:%s/./\l&/gc
" Use L for lowercasing each line (use U for uppercasing):
:%s/.*/\l&/gc
" Lowercase or uppercase with \U all single line C-style comments:
:,$:s:\(/\*.*\*/\):\L\1:gc
" Lowercase a specific word (use \U for uppercasing):
:%s:\(LIST\):\L\1\E:gc
" or better
:%s:CODES:\L&\E:gc
" or shorter
:%s:CODES:\L&:gc
" Uppercase whole word
:0,$:s:foo:\U&:gc

" Restrict the pattern search and line marking to a stretch beginning three lines past the last previous line that starts with the string 'Exercises' and ending at the end of the file.  +++ means previous 3 lines: 
?^Exercises? +++ , $ g/foo/d

" Uppercase (a.k.a propcase rightcase titlecase smartcase) first letter of specific word:
:%s:upcaseme:\U&:cg
:0,$:s:foo:\u&:gc
" Uppercase first letter of all words:
:%s:[^ ]*:\L\u&:g
" or propcase all capitalized words as well:
:%s:\([A-Za-z]\)\([A-Za-z-]*\):\u\1\L\2:g

" Search across linebreaks:
/the\nword

" Search and replace across lines (e.g. replace Acme Distributors with Barrett...):
" First get instances NOT split over 2 lines...  :%s/Acme Distributors/Barrett and Sons/g
" Then get those split across newlines...  :g/Acme$/+ s/^Distributors/and Sons    :g/^and Sons/- s/Acme$/Barrett

" Fix Perl comment on current line to start with a capital letter and end with a period:
:s:# \(.\):# \U\1: | s:$:\.:

" Turn line containing only a url into an HREF
:0,$:s:\(.*\):<a href=\1>\1</A>:gc 

" Put angle brackets around an email address.  E.g. <rheckel@yaho.com> but not <bheckel@dsf.lonestr.org>
:0,$:s: \(\w\+@\w\+\.\w\+\)$: \<\1>:gc

" Write current line to file:
:. w foo.txt

" Write file to two different places (current dir and other) simultaneously:
:w | :w!/home/rheckel/tmp/%:t

" Quick date stamp on tail
:w %:t.YdS   <---assumes my strftime vim map is available

" Insert date between stem and tail extension (still have to type the tail)
:w~/projects/%:t:r.oct08.sas

" Mainframe uses stem basename only (INCLUDE.sas goes as INCLUDE):
:!bfp % 'bqh0.pgm.lib(%:t:r)'

" Reorder a comma separated (CSV) file:
:%s:\([^,]*\),\([^,]*\),\([^,]*\),\(.*\):\1,\3 \4,\2:
" Then remove the spaces:
s/[ \t]*,[ \t]*/,/g

" Change really, really, really or really, really, really, really... to very
:%s/\(really \)\(really \)*/very /

" Insert a literal null (ascii 0).  In insert mode:
Ctrl-v then 0

" If you know the column number which you want to act on (pipe here is vim magic not normal use of it):
" Replace columns 1 thru 70 with an X:
v70|rX
" or delete from current position to column 20
v20|d

" Find parts of a word like re or retu or return:
/\<re\%[turn]\>
" In code:
if wrd == "re" || wrd == "ret" || wrd == "retu" || wrd == "retur" ...do something... endif
" is now more cleanly represented as:
if match(wrd, "\\<re\\%[tur]\\>") > -1 ...do something...  endif

" Alternate unicode foreign character digraph method (better if don't know the code):
:dig         <---determine digraph's decimal code on (right side)
Ctrl-v 174   <---in insertmode e.g. copyright © symbol is 169
To do unicode, must do this first:
set encoding=utf-8
:se digraph
Then in insertmode (e.g copyright symbol):
C<BS>o   <---Produces ©
s<BS>s   <---Produces German ß 

" Show where all tabs EOLs control hidden chars are on a whole a file:
:se list

" Scroll scrollbind windows together vertical default:
:se scb   <---each window
" Horizontal scrollbind
:se sbo=hor
:se scb   <---each window

" Change width of vertically split windows:
:vert resize 80

" Vim view all instances of this keyword anywhere in file.  Think '[ is easier to reach on keyboard - lazy default show all'.
[I

" Recursively load files matching a pattern (like :e *.c but that doesn't work)
:args **/*.c
:argdo %s:'\\\\trpsawnv0312\\pucc:'C\:\\cygwin\\home\\rheckel\\projects\\datapost\\tmp:ge | update
" Bulk update substitute single quotes for double quotes in all open buffer files
:argdo g/libname/s/'/"/g | update
" Bulk update convert fully qualified path to SAS macrovariable in all open buffer files:
:argdo %s:C\:\\cygwin\\home\\bheckel\\VAIR_HFA:\&DIRROOT:ge | update
" Simple bulk update - must have used :args - the e flag in ge keeps vim quiet if no match (c confirm doesn't work-THERE IS NO CONFIRMATION), do a  :vimgrep /foo/g **/*.sas  first to verify what will change:
:argdo %s/foo/bar/ge | update
" Best search and replace in multiple files:
:args `grep -l foo *.sas`  " open files
:argdo %s/foo/xxx/g        " change w/o saving
:argdo update

" Remove blocks, paragraphs of text from a series of files. Edit multiple files:
$ vim -c 'argdo /begin/+1,/end/-1g/^/d | update' *.c

" Slow and mostly useless sed replacement unless we've loaded up :args instead of hardcoding foo.csv:
$ vim -c 'argdo set nomore | g!/-2008/d | update' foo.csv

" Count words word count (returns e.g. '4 matches on 3 lines'):
:%:s:replicant:&:gn

" After you've forgotten to check file permissions:
:w !sudo tee %

" Search find a word and move cursor offset to one or more char positions from match.
/myword/b     <---cursor is on m (default -- beginning)
/myword/b+1   <---cursor is on y
/myword/e     <---cursor is on d -- end (good for "delete thru this char": d /.../e )
/myword/e-2   <---cursor is on o
/myword/e+    <---cursor is on first char after myword -- end plus 1 char

" Insert date on current line:
!!date

" Display color syntax:
:so $VIMRUNTIME/syntax/colortest.vim
" Display current syntax groups (best):
:so $VIMRUNTIME/syntax/hitest.vim

" Non-standard regex: \= in Vim is ? in normal regex-land.

" Write a specific range to a new textfile using marks a and b:
:'a,'b w newfile.txt

" Regex if two or more: \{2,}
" Regex match the previous atom from 0 to m times: \{,m}
" Regex match the previous atom from 0 to m times but as little as possible i.e. non-greedy: \{-,m}
" Regex match the previous atom n to m times but as little as possible i.e. non-greedy: \{-n,m}
" Non greedy search, match 3 to 5 a's but prefer the shortest match: /a\{-3,5}
" Non-greedy Vim search (use :se hls to see the results better):
/a.*b     <--- E.g. string axbxb greedy finds axbxb
/a.\{-}b  <---non-greedy finds axb
" Better non-greedy (e.g. foo|bar|baz returns foo).  Replace the first  .*  with  [^|]*:
:,$:s:\([^|]*\)|.*:\1:gc
:%s/[^|]*|.*/xxx/gc

" For non-greedy .* becomes '[^']* to return 'foo' and 'bar' from this string:
"   Match 'foo' and 'bar', including the quotes.
/'[^']*'

" Remove last column from a pipe delimited file:
:%s/.*\zs|.*//

" Modeline.  Trailing ':' required for multiple set's.  /* vim: set tw=72 ft=sas ff=unix: */ # vim: set list syntax=off foldmarker=#{{{,#}}} foldmethod=marker tw=78:

" Create a unique filename based on seconds since the Epoch:
$ vi foo`date +%s`.txt

" Find two blank empty lines:
/^$\n^$

" Simultaneously turn flip change Yes to 1 and No to 0 in one swoop:
:0,$:s:No:0:g|0,$:s:Yes:1:g

" Use calculator inside Vim:
:!echo 4+3+6 | bc

" Search for either string Yes or string No (alternation):
/\(Yes\)\|\(No\)
" Replace both strings Yes and No with foo:
:0,$:s:\(Yes\)\|\(No\):foo:gc

" Encrypt file for first time: :X  then immediately :w (disable :set key=)

" Open file and place cursor at the search word ERROR or WARN:
vi -c '/^ERROR\|^WARN/' foo.txt
" Open file while copying and pasting (yanking and putting) the first line at the same time.
vi -c ':y | put' foo.txt
" Open file to last line of file, set textwidth:
vim -c 'set tw=68 et' +  foo.txt
gvim -c 'set lines=20 columns=150'
" Easy quit:
vi -c 'map q :q!<CR>' foo.txt
vi -c 'map q :q!<CR>' -c 'map z noop' foo.txt

" Add non-standard help files to Vim Help 1- cd to the .txt 2- :helptags . 

" To read in fewer than all lines use the shell:
:r !head -n30 foo.txt

" To print from GUI W32 Vim:
:hardcopy

" Halve, cut in half the current file:
:%norm jdd

" Simple canonical increment depending on my custom .vimrc fn.  Ctrl-v highlight from your start num then:
vnoremap <C-A> :Inc<CR>
" Increment a left zero padded column of numbers (0000, 0100, 0200...), highlight them then:
:'<,'>Inc(100)  <---Ctrl-a won't maintain the left zeros
" Increment a pattern ('pattern' is usually '@').  My .vimrc default is just highlight and :Incpat but to override defaults:
:1,4call IncPattern('p@','s0','i1')  <--(p)attern, (s)tart at number, (i)ncrement by 

" Yank the one single character that cursor is on:
yl

" Create fold zf, open fold zo, close all zx, delete zd, :set foldcolumn=2

" Open all folds zR (think 'release').  Close all folds zM (think 'mash').

" netrw most common keystroke cycling - s sort, i ls details, r reverse sort order
" netrw plugin if vim already open (beware there is NO file locking here):
:Nwrite "daeb rheckel Tistyb4p tmp/testing/junk2z"
:Nread "mf bqh0 Tistyb4p pgm.trash(junk)"
" Netrw using vim with ssh:
$ vi scp://rsh8680@tpsh005//opt/QCServer/A.05.00/svr/files/Inspec_Lot-0108.log  # note no colon and double slash

" Debug shell script by doing an echo line below declaration:
:,$:s:\(export \(\w\+\).*\):\1echo '\2 ' \$\2:gc
" Debug perl script:
:,$:s:\(my \(\S\+\).*\):\1print '\2 ', \2;:gc

" Convert file to html using a .vim file:
:runtime! syntax/2html.vim

vi -c 'syntax off'

" nl(1) number line replacement
:g/^/exec "s/^/".strpart(line(".")."    ", 0, 4)

" If vim -d is not available resort to:  $ diff -ybB -W160

" Sort all non-blank lines from here down (alternative to visual mode & '=' ):
:.,/^$/-1!sort

" Count bytes and words to cursor:
g Ctrl-g

" DEPRECATED. Edit all .c files containing the word frame_counter:
vim `grep -l frame_counter *.c`

" Search Vim help:
:echo $VIMRUNTIME   # e.g. /usr/share/vim/vim74
" Better (no quotes or slashes used here like vimgrep !), case insensitive, :cn to iterate results
:helpgrep holy-grail\c
:vim[grep] /holy-grail/ /usr/share/vim/vim70/doc/*

:vimgrep /\CSELECT.*into/j *.plsql  " uppercase case sensitive search, j to not auto open first match
" then :cw or :cope to open quickfix results window
" Recursive search using star-star (slashes optional if not using a regex):
:vimgrep /select.*into/ **/*.plsql
" Alternatively on systems with grep(1) - faster but won't recurse:
:grep -i unexpected *.sas 

" Search and replace all open buffers:
:bufdo %s/findme/changeme/gi
:bufdo update

" clear quickfix:
:cexpr []

" Canonical search across open buffers (then :cw)
:call setqflist([]) | silent bufdo grepadd! findme %

" Delete everything but the first 2 fields in a CSV
:%s:\(.\{-}\zs,\)\{2}.*::

" Canonical vim convert a file to HTML, opening the results in a new window:
:1,$TOhtml

" Crosshairs bullseye
:se cuc|se cul (or better :se cuc cul )

" View debug web page HTML/SAS Log output in Vim (using Vim instead of less)
w3m -dump 'http://rtpsawn321/sasweb/cgi-bin/broker.exe?_service=default&_program=LINKS.bobhmenu.sas&_debug=131&_server=rtpsawn321.corpnet1.com&_port=2738&_sessionid=HrYW7jQ7K52&pecORspec=Specification&menu=LACtlTblRd&Submit=++Read+LINKS+Specification+Table'|vim -R -c "se ft=saslog|map q :q<CR>" -

" Convert a comma delimited list to LIKE statements (TODO how to do IN('%ADVAIR%',...) ?
:,$:s:'\(\w\+\)[^,],:OR prod_nm LIKE '%\1%'^M:gc

" Swap tab-delimited field 5 with 4 position (use :se list to view these tabs):
,$:s:^\([^	]*\)	\([^	]*\)	\([^	]*\)	\([^	]*\)	\([^	]*\)	\(.*\):\1	\2	\3	\5	\4	\6	:gc

$ vim -u NONE -U NONE -N   <---no .vimrc and plugins ('clean' VIM)

Ctl-] and Ctl-t to navigate Vim Help links

" Insert timestamp at end of file
map ,d Go<CR><C-R>=strftime("%Y-%m-%d")<CR>

" Run vim commands from shell command line without opening file:
vim -c "s/hello/goodbye cruel/" -c "wq" fun.txt
vi -c ':se nohls' -c ':se tw=50'

" Matches any line meeting the constraints: 1) contains anything (.*) followed by ObjectName 2) starts (^) with something which isn't 'import' (\(import\)\@!)
/.*ObjectName\&^\(import\)\@!

Finds line longer than 80 characters:
/\%>80v.\+
" Determine length of longest maximum line (custom fn in my .vimrc):
:Maxl
:call MaxLineLen(1)

:DirDiff . //trpsawnv0312/CODE/
:DirDiff $y/datapost/code $z/datapost/code  ' not to be confused with vimdiff
" dp to 'diff put' change to the other window, arrow keys to nav (double arrow up to de-syntax)
To synch DirDiff: s  (in bottom pane with cursor ==>)
To synch DirDiff ranges of updates (internal DirDiff cmds like 'u' not working 2011-04-27):
:se nu
:5,42diffput

" Compare diff this vimdiff:
:vert diffsplit then switch to/open other buffer and :diffthis then force any changes :diffupdate when done reset :diffoff (:diffthis to restart vimdiff)
" vimdiff keymaps
do == :diffget
dp == :diffput

" Synch whole file
:%diffput

" Run info(1) on word under cursor. Good demo of running an arbitrary command on the current word.
map ;p :exe ":!info ".expand("<cword>")<CR>

" Convert a tab-stopped file to a space-formatted file:
:set expandtab
:retab!

" Find all leading tabs and replace with spaces.  Since every character in submatch(0) will be a tab we can replace each character with four spaces.
:%s/^\t*/\=substitute(submatch(0), ".", "    ", "g")
" Put the tabs back over the 4 spaces:
:%s/^ \+/\=substitute(submatch(0), "....", "\t", "g")

:map :w :mksession! \| :write<CR>
" Do not forget to save folds etc.
:au BufWinLeave * mkview
" To avoid forgetting to mkview before exiting
:map :w :w\|mkview

" Insert a sequential list of numbers:
:put =range(11,15)
:for i in range(1,10) | put ='192.168.0.'.i | endfor

" Syntax highlight %THINGS% like that in a doc
syn match TODO "%\u\+%" containedIn=ALL

" Choose font.  Font tester: Illegal1 = O0
:set guifont=*
:se guifont=Andale_Mono:h9

Omnicomplete default key combination using syntax files in insert mode C-X C-O

" Turn all open buffers into tabs
:tab ball

" This foldmethod doesn't modify the file:
:se fdm=manual
:setlocal foldmethod=marker

" Virtual edit (ctrl-v extended)
:se ve=all

" Open in new tab
:tab h quickref

" Delete every line except lines starting with a 6:
g/^[^6]/d

" Modify every 6 except those in column 1 (do not use 'c' switch!)
g/^[^6]/s/6/7/g

" My bc function map
vnoremap <C-P> "ey:call CalcBC()<CR>

:args **/*.sas | args cfg/* | args **/*.map

" Skip .vimrc:
vi -u NORC foo.txt
" Readonly:
vi -R foo.txt
" Verify runtime startup etc:
vi -V2                   

" On (K)eyword for help or man etc.:
K                        

" Then :cw[indow] to navigate results:
:helpgrep foo bar\c      

" c-] and C-t  ctags fwd back navigation:
:h quickref              

" Show previous messages, errors, etc.:
:mes[sage]               

" 1 if plugin is loaded (and 'let loaded_matchit=1' is in matchit.vim):
:echo loaded_matchit     

" All plugins and .vimrc locations:
:scriptnames             

" Test existence of Vim variables:
:echo has('gui_gtk3')         

" Boolean checking (scripts mainly):
:echo &modifiable        
" Is diff running:
if &diff                 

" Determine Vim's location:
:echo $VIMRUNTIME        

" Check if any z* keys are mapped:
:map z                   

" Reload me:
:so $MYVIMRC             

" View all current Vim variable values:
:let                     

" Chain two commands (unfortunately shortcircuits on 'Pattern not found'):
%s:<ExtractEnabled>1<\/ExtractEnabled>:<ExtractEnabled>0<\/ExtractEnabled>:g | :%s:<TransformEnabled>1<\/TransformEnabled>:<TransformEnabled>0<\/TransformEnabled>:g | :%s:<TrendEnabled>1<\/TrendEnabled>:<TrendEnabled>0<\/TrendEnabled>:g

" Chain global ex command regex
g!/10000000059062\|10000000060721/d

" Toggle HTML XML flags:
%s:<\(Extract\|Transform\)Enabled>1<:<\1Enabled>0<:gc

" Display search results with their line numbers:
:g/Line/#

" Highlight greenbar every other contiguous line:
map ,<Tab> :set hls<CR>/\\n.*\\n/<CR>

" Add more options to an existing vim setting:
set sessionoptions+=buffers

" Toggle vim setting:
nmap <silent> [[ :let &tabstop -= &tabstop > 1 ? 1 : 0<CR>

" Toggle a flag, creating it if it doesn't already exist:
let w:check_words = exists('w:check_words') ? !w:check_words : 1

" Sort file unique without external uniq:
:%sort u

" Force syntax coloring:
:sy off | se ft=sas | so $VIMRUNTIME/syntax/sas.vim

" Undo by time:
:earlier 5m
" Undo all file changes everything back to last write:
:ea 1f

:echom "Hello, " . "Vim concatenation world"
:mess

" List all files recursively:
:echo split(globpath('.', '**'), '\n')

" Very Magic parse convert disorganized list of numbers e.g. foo('1234', '5678')bar91011... into a CSV list:
:%s:\v\D+:,:g | :%s:^,\|,$::g
" Very Magic parse convert disorganized list of numbers e.g. foo('1234', '5678')bar91011... into a horizontal list:
:%s:\v\D+::g | g/^$/d

echon '.vimrc: unknown language: (' mylang ') so using default Commentout style'

" Vim fold folding
:se fdm=manual

" vim if then else:
if hostname() == 'yoniso' ... else ... endif

" Share ;w across network
scp b@sas-01.twa.taeb.com://mnt/nfs/home/bheckel/tmp/.vimxfer ~/tmp 

" Copy this file to another host from vim (no warning on overwrite!):
:w scp://b@sas-01.mrk.taeb.com/bin/%

# Share my vimxfer file across machines:
alias xfer='scp ~/tmp/.vimxfer b@talon3:tmp/.vimxfer'

# Set a shell variable:
WHEREISVIMRUNTIME=`vim -e -T dumb --cmd 'exe "set t_cm=\<C-M>"|echo $VIMRUNTIME|quit' | tr -d '\015'`
$ vim -e -T dumb --cmd 'exe "set t_cm=\<C-M>"|echo $VIMRUNTIME|quit'  

" Keep only the first 12 characters, delete any characters after column position 12:
:s/^\(............\).*/\1/g
:s/\(.\{12\}\).*/\1/

" vim scp diff scp across networks using vim:
vi -d /Drugs/update_shortname_ds.sas scp://b@sas-01.mrk.taeb.com//Drugs/update_shortname_ds.sas

" Find two strings in any order:
/.*reboot\&.*box

" Open Quickfix window:
:cw

" Vim array
let WORKBOXARRAY = [ 'L-ANA-BHECK', 'ZEBWL14H5','sas-01.taeb.com' ]
if matchstr(WORKBOXARRAY, THISBOX) == THISBOX

if $MYENVVAR =~ 'my vim regex$' ... endif

" Delete duplicate lines
:%s/^\(.*\)\(\n\1\)\+$/\1/

:mksession!
vi -S Session.vim      
" Custom Save Session:
:mksession! ~/ses/48130
" Restore project folds, windows, etc. :mksession!:
vi -S ~/ses/48130

" Open file from command line at specific search place location:
vim -c '/tmm_targeted_list_refresh' ~/template_print.sas

-- Edit Postgres stored procedure in vim:
b@db-dev-01.twa.taeb.com:TAEBMART \ef analytics.tmm_client_build_config

nnoremap ,hdr :-1read ~/code/sas/Headertmplt.sas<CR>

" Use vim as a filter:
$ printf 'a\nb\nc\nb\n' | vim - -es --not-a-term +'g/b/norm gUUixx' +2 +'norm yy2p' '+%p' '+qa!' | tr x z

" Vimscript's wacky by-ref...:
let sorted_list = reverse(sort(unsorted_list))
" ...is almost always supposed to be:
let sorted_list = reverse(sort(copy(unsorted_list)))

/find start of line after this search pattern/+1

" Change filetype from SQL to PLSQL for certain filenames directories:
au BufRead,BufNewFile,BufEnter *RION-* set filetype=plsql

au BufRead * if @% =~ 'oneliners$' 

if filereadable("~/tmp/SpecificFileExists") ...

vi -c 'map q :qa<CR>' ~/bin/allp

xxVIMxx END:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:

xxSASxx START:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: {{{1

proc contents data=sashelp._all_; run;

 /* Missing value '.' always sort lower than char or num and ._ sorts lowest of all.  A blank space ' ' is MISSING to SAS but not to SQL where it is a character. SAS special Missing Value (.A thru .Z) */
else if comment = 'refused to answer' then age = .A;...
if .z < labvalue < 3 then...
if .z < round(labvalue,0.0001) < 3.15 then...

 /* Write all variables to the Log with "foo=" notation on one line: */
put _ALL_;  /* print PDV to Log */
put 'WARNING: ' _ALL_;
put 'WAR' 'NING: ' _ALL_;  /* better if you're searching a Log for real WARNINGs not a SOURCE or MPRINT: */
 /* Write all variables to the Log with "foo=" notation on one line per var: */
put (_ALL_)(=)
 /* Use anywhere but can't combine to one %put */
%put !!!; %put _USER_;

 /* Macro -- no quotes! */
%put You find yourself in a maze of %upcase(twisty SAS passages) all alike;
 /* In a DATA step -- quotes, no commas */
put 'fname is ' fname=;
put '!!!' _ALL_;

 /* Writes specific variables to the Log.  NO COMMAS. */
put varname1= varname2=;
 /* Automatic concatenation: */   
put 'here it is: ' varname1=;
 /* Carriage return in output: */
put;
put '0D'x;  /* s/b the same */
put '0D0A'x;  /* carriage return line feed */

 /* Runaway GUI SAS killer: */
/* '; * "; */; %mend; quit; run;
;*';*";*/;quit;run; /*Quote and Comment Killer*/

 /* Free up space - delete datasets */
proc datasets library=WORK; kill; QUIT;  /* !not just RUN; */
proc datasets NOlist library=l; delete patmod_all_cha rxfilldata_all_cha; run; quit;

 /* Column input with some missing data -- use TRUNCOVER List input with some missing data at the rightmost edge -- use MISSOVER to keep SAS from trying the next line (e.g. when you're not using @@ and want it to keep going) "SAS went to a new line when" */

 /* Print list describe paths to SAS libname libraries: */
libname _ALL_ list;

 /* Clear libnames: */
libname _ALL_ clear;
libname L clear  /* only one libname allowed! */

 /* Determine where the WORK temp library is located on your system: */
libname WORK list;
 /* Determine where the WORK temp library is located on your system via macro: */
%let workpath=%sysfunc(pathname(work));

 /* Use more than one library, look in best first, then justok if not found: */
libname mylib (best justok);
 /* libname concatenation. Works on z/OS too. Only a WARNING: for idontexist/ */
libname CONCAT ('c:/temp' 'c:/cygwin/tmp/' 'c:/idontexist');

SAS debugger e.g. data foo / DEBUG; ...; run;

'07jul00'D              <---SAS date constant
'07JUL2000'D            <---SAS date constant
'04:15'T                <---SAS time constant (seconds since midnight 0-86400)
'04:15:66pm'T           <---SAS time constant (seconds since midnight 0-86400)
'07jul2000:04:15:00'DT  <---SAS datetime constant

SAS Functions work *within* an observation. SAS Procedures work *across* observations.

 /* Increment in macro.  Like yr++ */
%let YR1 = 2002;  %let YR2 = %eval(&YR1+1);

 /* Convert macrovariable (always string) to numeric: */
data _null_; age=input(symget('age'),12.); run;
%macro m;data _null_; age=input("&age"),12.); put age=; run;%mend;%m;  /* FAIL */

 /* SAS X command (ok in open code): */
x 'c:/util/vim/vim61/gvim.exe -c "set winsize=100 20" out.dat';
x 'psql -h db-dev-01.twa.taeb.com TAEBMART -c "\copy bobtable from ''/mnt/nfs/home/bheckel/t.txt'' (delimiter '','');"';

 /* Canonical dice generate random whole number between range 1 and 6 (must use ceil to get the 1): */
randomnum = ceil(ranuni(0) * 6);
 /* Generate random number floating point number between 100 and 123: */
randomnum = ranuni(-1)*23 + 100;
 /* Generate random number between 0 and 1 (but not 0 or 1): */
randomnum = round(ranuni(-1));

 /* Shuffle a ds: */
data t; set t; shuffle=ranuni(0); run;  proc sort; by shuffle; run;

 /* Interactive SAS on OS/390 (from TSO command line): */
==> sas options('dms yearcutoff=1905')
 /* Using 1920 default: 00...19 becomes 2000...2019 */

//* Use your own SAS System Options in JCL:
//STEP1     EXEC SAS,CONFIG='BQH0.PGM.DEV(MYCONFIG)',TIME=100, 
//          OPTIONS='MEMSIZE=0'                                

 /* Set option from command line: */
$ /sas/sashome/SASFoundation/9.4/sas -memsize 0 t.sas  /* t.sas is  proc options option=MEMSIZE value; run; */

 /* Sets the auto variable myfname, not the keyword FILENAME, to the physical name of the currently opened file! */
infile IN FILENAME=myfname;  /* lvalue assigns rvalue ! */

 /* SAS hexadecimal tab  '09'x  or  '05'x  or  '3132,3334'x  */
put aprclass '09'x '09'x APR_Count;

 /* It's an alphabetical character isalpha: */
if ship GE 'a' and ship LE 'z' then delete;
 /* It's a numeric character isnum: */
if indx GE '0' and indx LE '9' then delete;
 /* Keep only numbers from a mixed CHAR variable: */
isnum = verify(compress(storeid), '.0123456789'); if isnum eq 0 then put "pure numerical";

 /* Distributive range input statement: */
input @166 (r1-r15) ($CHAR1.);
input @166 (c1-c15) (:$1.);

 /* Distributive put statement */
put (ymd_no_ampm mdy_ampm ymd_ampm mdy_noampm)(= DATETIME18.);
put one_two= / trip= / (cat1-cat4)(= /);  /* slash insert newlines */

 /* Distributive length statement */
length foo $2  car1-car4 $9;

 /* %global is distributive */
%global foo bar;

 /* Super input statement uses the data itself to determine column position */
input @'IP Address' n1 n2 n3 n4 3.;

 /* Move cursor one column to the left, put a backspace, to squeeze colon against word: */
put @1 myname +(-1)":"  @30 myvalue;

 /* Multiple datasets on the set statement: */
data work.all; set %do j=1 %to 3; work.tmp&j %end; ; run;

 /* Get current year date: */
call symput('THISYR', substr(put("&sysdate9"d,mmddyy10.),7,4));
 /*                      1_______today into epoch num_______            */
%let thisyr=%sysfunc(putn(%sysfunc(inputn(&sysdate9,date9.)),year.));
 /*        2______________.................................._______     */
 /*             format epoch num to date format                         */
call symputx('THISYR', put(intnx('year', "&SYSDATE"D, 0, 'B'),YEAR.), L);

%let dtnum=%sysfunc(dhms('01JAN60'd,0,70,0));  /* 70 converts to 1 min 10 seconds */
%let dtformatted=%sysfunc(putn(&dtnum,datetime.));  /* 01JAN60:01:10:00 */

 /* Increment a symput generated macrovariable: */
call symput('RUNME'||compress(put(_N_,5.)), executemacro);

 /* Wild equal colon -- same as using LIKE 'mormer%' in SQL: */
set t(where=(region in:('As')));
if foo =: 'mormer';

 /* Uppercase a macrovariable: */
%let the_type=%upcase(&the_type);

 /* Mainframe filename */
filename OUT "DWJ.DCFET03.D04NOV03" DISP=NEW UNIT=TEMP LRECL=229 BLKSIZE=229 RECFM=FB;

 /* Fixed length file.  Pads to 70. */
filename f 'c:/temp/foo1' lrecl=70 recfm=f;
 /* Variable length file.  No padding. */
filename f 'c:/temp/foo2' lrecl=70 recfm=v;

 /* Today's SAS epoch date (range is 1582 - 20000 AD). Convert unix to SAS epoch date: */
$ date +%s |awk '{d=int($1/86400+3653)} END {print d}'

 /* Left zero pad a number: */
zerocert=put(certificate, Z6.);
select distinct put(zipcode,z5.) as zipcode ...

 /* Jumpstart proc report then tweak autogenerated code: */
proc report data=sashelp.class LIST NOEXEC; run;

 /* Reorder the variables in a dataset (alternatively use proc report): */
retain first second third;

 /* Create a C-like null terminated string: */
substr(mystr, mylen+1) = '00'x

 /* Name of this currently running SAS program file: (like $0 in shell): */
%put basename only of currently running program: &SYSPROCESSNAME
%put NOTE: fully qualified name of the currently this program running: %let thispgm=%sysfunc(getoption(SYSIN));

 /* CLASS categorical variables:  almost always stored as chars, identify classes (discrete categories) on which calculations are done.  E.g. gender, country, state, zip. */
 /* VAR analysis variables:  numbers, usually continuous, appropriate for calculating averages, sums, etc.  E.g. salary, number of orders. */

 /* Pick off 'MOR' from the suffix */
%let FN=BF19.FIX0342.MORMER1; %let EVT=%substr(%scan(&FN, 3, '.'), 1, 3);

 /* SAS exponentiation */
x = 2**3;

 /* Syntax check program (compile) without running or overwriting files (for debugging): */
options obs=0 NOreplace;
 /* Syntax check datastep (compile) without running or overwriting files (for debugging): */
run cancel;

 /* Do to first obs: */
if _N_ eq 1 then put 'data step has BEGUN EXECUTING once';
 /* Do to last obs: */
set l.sumventolin01a (obs=10) end=e; if e then put 'footer';
 /* Caution: _N_ is only counting begun iterations of the implied loop of the dataset, NOT the observations */

 /* Subsetting IFs can appear only in DATA steps but WHERE statements can appear in DATA or PROC steps */

 /* Run SAS from commandline without my ~/bin/sasrun */
$ sas -sysin t.sas; cat t.log
$ sas -sysin t.sas; vim -o -c '/^ERROR.*:\|^WARNING:/' t.log t.lst
" Run a .sas from Vim on an alien box
:!/cygdrive/c/Program\ Files\/SAS\ Instititute/SAS/V8/sas.exe -sysin %
:!/cygdrive/c/Program\ Files\/SAS\ Instititute/SAS/V8/sas.exe -sysin % -altlog %.log -altprint %.lst

 /* Run Version 9 V9 SAS from commandline */
c:/PROGRA~1/SAS/SASFoundation/9.2/sas.exe -sysin t.sas && vi *.l??

 /* String foo is available in &SYSPARM */
$ c:/PROGRA~1/SASINS~1/SAS/V8/sas.exe -nosplash -sysin t.sas -altlog Apr.log -sysparm foo
 /* Passing a comma separated list will require e.g.
  * %let samplist=%scan(%bquote(&SYSPARM), 2, '_'); 
  * in the code:
  */
$ date;c:/PROGRA~1/SASINS~1/SAS/V8/sas.exe -sysin indsumresCI.sas -altlog 01.log -sysparm 01_231973,231591,231476
 /* If you can't edit the command line, use these in start/end of the code to save Log and List (NEW to avoid append): */
proc printto LOG="D:\foo.log" NEW PRINT="D:\foo.lst" NEW; run; ...code... proc printto;run;
 /* Keep GUI open during the run.  Instead of -sysin */
c:/PROGRA~1/SASINS~1/SAS/V8/sas.exe -autoexec "\\trpsawnv0312\pucc\Serevent_Diskus\CODE\0_MAIN_Serevent_Diskus.sas" -sysparm "\\trpsawnv0312\pucc\Serevent_Diskus\CODE"

 /* Suppress discard SAS List .lst */
c:\PROGRA~1\SASINS~1\SAS\V8\sas.exe -sysin t.sas -log t.log -NOterminal -NOprint

 /* Communicate with SAS in a Windows .bat batchfile */
set sasexe="D:\SAS Institute\SAS\V8\sas.exe"
set dpv2root=E:\DataPost
set sascode=%dpv2root%\code
%sasexe% -WORK 'c:\temp\sas' -nosplash -sysin %sascode%\DataPost_Transform.sas -log %sascode%\DataPost_Transform.log -print %sascode%\DataPost_Transform.lst -sysparm "%dpv2root%"

# Cygwin quick dataset check:
echo 'options ls=180;proc contents data=?;run;' >| t$$.sas; C:/PROGRA~1/SASHome/SASFoundation/9.3/sas.exe -sysin t$$.sas && cat t$$.lst && rm t$$.???
echo "options ps=max;libname l '//Rtpdsn032/DataPostArchive/Ventolin_HFA/OUTPUT_COMPILED_DATA' compress=yes; proc freq data=l.ven60_analytical_individuals;table mfg_batch test;run;" >| u:/tmp/t.sas && c:/PROGRA~1/SASINS~1/SAS/V8/sas.exe -sysin 'u:\tmp\t.sas' -log 'u:\tmp\t.log' -print 'u:\tmp\t.lst'; cat 'u:\tmp\t.lst'

 /* Describe option settings in effect: (also sr ~/code/sas/options.cmdl.sas linesize) */
proc options option=&SYSPARM define value; run;

format vs informat: Whereas a SAS format converts an underlying data representation to a visual representation, an informat converts a visual representation into an underlying data representation.  Formats modify the external representation of a value (preexisting in a ds).  Informats convert raw data into SAS representations (to be put in a ds).

 /* Current dataset macrovariable formatted to "LIBRARY  DSNAME" */
&SYSDSN

 /* Print quotes around a variable, in this case, myvar */
put "!!! found quoted " myvar $QUOTE.;

 /* Check if a file has a SAS extension */
if index(lowcase(myfile),'.sas') > 0;  /* true */
if scan(lowcase(myfile),-1,'.') eq 'sas'

 /* Portability -- Use this JCL for SAS filename on MF: */
//IN   DD DISP=SHR,DSN=BF19.MOX0401.NATMER
 /* vs. this JCL-less method on the PC via Connect: */
filename IN 'BF19.MOX0401.NATMER' DISP=SHR;

 /* Include code plus display source w/o an options statment (%include is synchronous): */
%include 'tabdelim.sas' / SOURCE2;

 /* Find max using a SAS range: */
retain hi; hi=max(hi, DatastepVarWeWantMaxFrom);
 /* Find max using a SAS range: */
if max(of one1-one3) < 5 then ...

 /* SAS array declare and initialize */
array starr{*} $2 st1-st57 ('AL', 'AK', 'AR', 'AZ', 'CA', 'CO');
 /* SAS array access */
do i=1 to dim(starr); otherarr{i} = starr{i}; end;

 /* Get the HOME environment variables: */
%let myhome=%sysget(HOME); %put _all_; %let sasroot=%sysget(SASROOT); %put &=SASROOT;
%put %sysget(SASHOME) %sysget(SASROOT);

 /* Substring (if argument might contain a special character or mnemonic operator use %qsubstr()) */
%put %substr(2168, 3, 2);
data _null_; x=substr('2168', 3, 2); put x=; run;

 /* Good demo sample template dataset: */
proc print data=SASHELP.shoes (obs=10); var region stores sales returns; run;

 /* Macro with parameters parms: */
%macro Foo(bar, baz); %put &bar and &baz; %mend; %Foo(test ing, me);
%macro Foo(bar=, baz=); %put &bar and &baz; %mend; %Foo(bar=test ing, baz=me);
 /* Named macro call with good default parameters: */
%macro Foo(data=_LAST_, by=, vars=, out=_DATA_);

 /* Preserve leading whitespace ($3. would not) */
input foo $CHAR3.;

 /* Suppress any input errors in SAS Log and keep _ERROR_=0 */
input name $8.  number  ??;

 /* Operating system specific option: */
%macro os_detect; %if &SYSSCP eq OS %then %str(options NOs99nomig;); %mend;
%macro os_detect; %if "&SYSSCP" eq "LIN X64" %then %put Unix; %mend;

 /* Thin out cleanout SAS Log, can use \| to get >1 line at a time */
:g/\s*SYMB\|\s*MLOG\|\d\+\s*THE SAS/d

 /* Small shrink dataset to 5% random sample sampling for debugging huge ds to subset dataset (different result each run): */
data t2; set t; if ranuni(0) <= .05; run;

 /* Don't keep var with NULLs */
if sex = '00'x||'00'x||'00'x then delete;

 /* Most efficient block size on mainframe: Moderate to large DASD-stored datasets s/b blocked at half a track. Small ds and catalogs s/b blocked at 6144 bytes. Tape 32760 bytes. */
options blksize(dasd)=half;

no_controlchar_punctuation_digits=compress('foo,bar.8', , 'CPD');

%if not %index(&endyr, 20) %then %abort;
data _NULL_; abort abend 008; run;
/* Check for an empty dataset and abort if so */
data _NULL_; if num=0 then abort return; stop; set check_me_for_zeroobservations nobs=num; run;

 /* Remove trailing dot (bad: var, new!, old): */
myvar = trim(translate(myvar, '', '.'));
 /* Convert A to 1, B to 2, etc and then convert char2num: */
code2num = input(translate(jobcode,'12345','ABCDE'),1.);

 /* Simple datetime stamp: */
dts=put(datetime(),DATETIME16.);
%put %sysfunc(datetime(),DATETIME.);  /* same */
%put %sysfunc(putn(%sysfunc(datetime()),DATETIME.));  /* same, useless */

 /* Time a job: */
%let _start=%sysfunc(time()); %put NOTE: %sysfunc(getoption(SYSIN)) started: %sysfunc(putn(%sysfunc(datetime()),DATETIME.));
  ...code...
%put NOTE: SYSCC: &SYSCC (%sysfunc(getoption(SYSIN)) ended: %sysfunc(putn(%sysfunc(datetime()),DATETIME.)) / minutes elapsed: %sysevalf((%sysfunc(time())-&_start)/60));

 /* Quick sample dummy dataset */
data x; do i=1 to 5; do j=20 to 25; do k=100 to 101; output; end; end; end; run;

 /* Create an empty dataset */
data zeroobs_7vars; set SASHELP.shoes (obs=0); run;
data zeroobs_7vars; set SASHELP.shoes; stop; run;
data zeroobs_0vars; stop; run;  /* most empty */
data oneobs_0vars; run;

 /* BETWEEN statement is inclusive /*
where i between 1 and 5;
if 1 <= (dosedate-sampdate) <= 5 then ...

options pagesize=32767; options pagesize=max;  /* same */

 /* Comma separated, single quoted : */
select quote(strip(gpi),"'") into :formulary_gpis separated by ','

select froms, tos, dist into :ITEM1, :ITEM2, :ITEM3

 /* If you use this: */
LIBNAME FMTLIB "DWJ.NAT2003.FMTLIB" DISP=SHR WAIT=250;
 /* you also need this: */
OPTIONS FMTSEARCH=(WORK FMTLIB);

 /* Find and use custom format aerodtt. in c:/datapost/code/formats.sas7bcat */
options fmtsearch=(MYFMTLIB); libname MYFMTLIB 'c:/datapost/code';

 /* Calculate seconds since the SAS epoch */
data _null_; when=datetime(); put when=; run;

 /* Get last highest -1th element of string */
if substr(reverse(trim(revising_status)),1,1) eq 'N' ...

x='8ZM1234'; if substr(x, 2, 1) eq 'Z' then ...

 /* Remove last 4 characters of string */
stem_with_end_removed=reverse(substr(reverse(s), 4));

 /* Remove the last 4 chars of a mvar */
%let str=%sysfunc(reverse(%substr(%sysfunc(reverse(&str)),4)));

cat "//'bqh0.inc.saslog'" | vi -     # HFS

 /* Remove trailing comma: */
%let YRCNTS=%substr(%bquote(&YRCNTS), 1, %length(&YRCNTS)-1);

 /* Day of week number 1=Sunday 7=Saturday */
if weekday(today()) eq 2 then put "it's Monday";
%if %sysfunc(weekday("&SYSDATE"d)) ne 5 %then %goto NOTSATURDAY;  ...  %NOTSATURDAY:
 /* Conditionally run macro if it's Wednesday */
data _null_; if weekday(today()) eq 4 then do; call execute('%include "&CODE\PLOT_CODE\100__make_AdvHFA_STABILITY_PLOTS.sas";'); end; run;

str2 = '%include "' || left(trim(product)) || '\' || left(trim(product)) || '.sas"';
call execute(str2);
str1 = '%mymacro(' || left(trim(product)) || ',' || left(trim(server)) || ',' || left(trim(writeoutput)) || ');' ;
call execute(str1);

trim() returns a space for a blank string, trimn() returns a null

 /* Convert DATETIME variable to DATE */
mysasdate = datepart(mysasdatetime);
 /* Convert DATE to DATETIME */
mysasdatetime = dhms(mysasdate, 0, 0, mysastime);
mysasdatetime = mysasdate*86400  /* seconds in a day */
 /* Alternative to datepart(): 
  * ANYDTDTE informat extracts the date part: e.g. mydt='January 1, 2012' is 18993 using this: */
input mydt anydtdte21.;
 /* ANYDTDTM informat extracts the datetime part  ANYDTTME informat extracts the time part */

data _null_; myquarter =        floor((mymonthnumber-1)/3)+1; put mycurrentquarter=; run;
data _null_; mycurrentquarter = floor((month(date())-1)/3)+1; put mycurrentquarter=; run;

 /* Avoid missing failure if datetime inputs are incomplete */
mydttm = dhms(mydate, max(0,hour(mytime)), max(0,minute(mytime)), max(0,second(mytime)));

 /* Convert datetime floating point number to human e.g. 25AUG2005 date in open code */
%put %sysfunc(putn(1440588139.7, datetime9.));
%put %sysfunc(putn(1441637788, datetime14.));

 /* Canonical eformat date convert macro date in macro date arithmetic in macro: */
%let daten_max=20170510; %put %sysfunc(putn(%sysfunc(inputn(&daten_max, YYMMDD8.)), YYMMN6.));  /* 201705 */
%let thirty_days_ago=%sysfunc(putn(%sysevalf("&SYSDATE"d-30), yymmddn8.));

 /* Reformat date convert macro date in macro: */
%put %sysfunc(putn("&SYSDATE"d, DATE9.));  /* 05JAN2017 */
%put %sysfunc(putn("&SYSDATE"d, YYMMDDN8.));  /* 20170105 */
%put %sysfunc(putn(%sysfunc(inputn(20150101, YYMMDD8.)), YYMMDD10.));
%put %sysfunc(putn(%sysfunc(inputn(&daten_max, YYMMDD8.)), MMDDYYD10.));  /* 04-30-2017 */
 /* Reformat date convert macro date in macro: */
%let start=%sysfunc(putn('12JAN17'd, DATE9.)); %let end=&start; %put &=start &=end;  /* 12JAN2016 */
%let start2=%bquote(')%sysfunc(putn("&start"d, YYMMDD10.))%bquote('); %let end2=&start2; %put &=start2 &=end2;  /* '2017-01-12' */
select strip(short_client_name)||'_'||"%sysfunc(putn("&SYSDATE"d, YYMMDDD10.))"||'.pdf' into :Cname from build.clients_shortname_lookup;
call symputx('YEARMONTH', put(today(), YYMMN.), L);  /* 201707 */

 /* Check for success to this point before continuing to destructive section */
%if &SYSERR eq 0 %then %do ... %end

 /* Speed up proc sql delete v9+ */
libname SAND ... direct_exe=delete ...;

 /* Speed up proc append to database */
libname SAND ... bulkload=yes ...;

 /* Count number of characters in a string v9+. Like FIND & FINDC, COUNT counts the number of times a substring appears in a string, COUNTC counts the number of times individual characters appear in a string */
commas=countc(myvar, ',');

 /* Colon input specifier - we'll take anything between the delimiters but with a max of 40 chars: */
input ProviderLicenseNumber :$40.;  /* no preceding LENGTH statement needed */

 /* Capture part of a string */
captureUpToDash = substr(SampName,1,index(SampName, '-')-1);
 /* Capture part of a string - better */
captureUpToDash2 = scan(SampName,1,'-');  /* be explicit on 2nd parm or it'll use default of split on  spaces . < ( + & ! $ * ) ; ^ - / , % | */

 /* Capture part of a ampersand delimited string:
  * _service=default&_program=links.LRQUERY.sas&rpttype=RE&UID=xgw69262&UserRole=LevelB
  *                                                            ________
  */
uid = substr(scan(h, 4, '&'), 5);

 /* If sampname is 0000345198-01 not 0000345198-890000022217-01 skip it */
if not scan(SampName, 3, '-') then delete;

Same but handle spaces differently
http://yourserver/cgi-bin/broker?_SERVICE=default&_PROGRAM=sample.webhello.sas&person=john+doe
http://yourserver/cgi-bin/broker?_SERVICE=default&_PROGRAM=sample.webhello.sas&person=john%20doe

 /* View all formats */
proc format library=work FMTLIB; run;

 /* Canonical diff two datasets compare */
proc compare base=l.materialOLD compare=l.material BRIEFSUMMARY out=t; run;

SELECT COUNT(DISTINCT samp_id)  /* good */
SELECT DISTINCT COUNT(samp_id)  /* bad - syntax is ok but probably not what you want */

 /* Cannot use to rename a ds in same lib */
proc copy in=OLDLIB out=NEWLIB memtype=data; select myds1 myds2...; run;
 /* so use this instead of proc copy */
proc append base=newdstocreate data=olddsname FORCE; run;

 /* Canonical proc append */
proc append base=ci_oth data=ci_oth_&strength FORCE; run;

 /* format= relies on e.g. ls=N cannot have ls=max to pull this off */
options ls=80; proc sql; select specname FORMAT=$20. from v ; quit;

proc sql NOprint; select id, (dis-adm)+1 AS mycalc LENGTH=4 LABEL='foo' from bar; quit;

 /* Canonical freq */
proc freq data=SASHELP.shoes(where=(region like 'A%')); run;
proc freq data=t(where=(specname like '%2064%')); table specname*varname / LIST NOCUM NOROW NOCOL NOPCT; run;
proc freq data=t order=freq; tables name / nocum; run;  /* show order by most frequent first */

 /* Where IntrNet keeps its datasets for a session */
%let spath=%sysfunc(pathname(SAVE));

 /* Canonical IntrNet URL */
http://myserver/cgi-bin/broker.exe?_SERVICE=default&_DEBUG=131&_PROGRAM=MYLIB.mypgm.sas&mymvar=foo

 /* Display SAS Intrnet ENVIRONMENT */
http://rtpsawn321/sasweb/cgi-bin/broker.exe?_DEBUG=16384&_SERVICE=default

 /* Wake up, ping restarted IntrNet server */
http://rtpsawn321/sasweb/cgi-bin/broker.exe?_service=default&_program=ping&_adminpw=

 /* SAS version of Oracle ROWNUM<5 or Postgres LIMIT 5 */
... WHERE monotonic() < 5 ...
proc sql outobs=5; select * from sashelp.shoes; quit;  /* but only affects printing results, still rips thru all records */

 /* Determine OS platform */
%put !!!&SYSSCP;

 /* View all macrovariable data (GLOBAL, etc) */
data vars; set SASHELP.vmacro; run; proc print data=_LAST_(obs=max); run;

options noxwait;x "start lelimssumres01a&nm..sas7bdat";

 /* Auto-vivifies any var not read in (or worse, typo'd) */
format matl_typ $18. batch_nbr $10.;

 /* Want total 5 obs but start at 2nd obs so you won't get 5 you get 4.  E.g. 2, 3, 4, 5 */
 /* Note: not 'lastobs'     ___    */
set work.sample (firstobs=2 obs=5);

 /* Same as SAS sort-sort-merge.  Emulate a SAS merge without having to sort. */
proc sql; select coalesce(one.acct, two.acct) as a, rate, balance from one FULL JOIN two  ON one.acct=two.acct ; quit;

data _null_; do while ( x<3 ); put x=; x+1; end; run;
%macro w; %let i=0; %do %while ( &i lt 3 ); %put &i; %let i=%eval(&i+1); %end; %mend; %w
... do year=1990 to 2004 while ( capital > -1 ); ...
... %do i=1 %to 4 %by 2; %put &minyr.&i; %end; ...  /* only 2 puts */

 /* Run IntrNet d:\sas_programs\t.sas with debug on */
http://rtpsawn321/sasweb/cgi-bin/broker.exe?_service=default&_program=LINKS.t.sas&UID=rsh8680&_debug=131

 /* NODUP eliminates obs that are exactly the same across ALL variables.  NODUPKEY eliminates obs that are exactly the same across *only* the BY variables. */
proc sort data=foo OUT=bar NODUPKEY; by x y; run;
proc sort data=foo OUT=bar DUPOUT=foo_dupsonly NODUPKEY; by x y; run;

 /* If you don't require the data within BY groups to be kept in the same order as it was before, use the NOEQUALS option.
  * This will save CPU and elapsed time, particularly on large data sets. Causes SAS not to worry about keeping observations 
  * with the same BY variable values in the same order. Usually you don't need the order maintained.
  */
proc sort data=foo NOEQUALS; by x y; run;

 /* proc sort alternative */
proc sql;CREATE INDEX MYSORTEDx ON lelimsgist05e (Samp_Id, Indvl_Meth_Stage_Nm);quit;

dm 'clear log; clear lst; wpgm'; 

 /* SAS/ACCESS passthru sandwich */
proc sql; CONNECT TO ORACLE(USER=u ORAPW=p PATH=db); CREATE TABLE t AS SELECT * FROM CONNECTION TO ORACLE ( select * from my.oratbl ); DISCONNECT FROM ORACLE; quit;
proc sql; connect to odbc as myconn (user=&user. password=&password. dsn='bd6' readbuff=7000); create table t as select * from connection to myconn ( select distinct taebpatientid from patient.taebpatient where clientid=17;); disconnect from myconn; quit;

 /* Add a dummy record to end of an existing dataset: */
data t; set data.fnl end=e; output; if e then do; clientid=685; output; end; run;

 /* Single quote for Postgres etc: */
select distinct quote(strip(gpi),"'") into :gpis separated by ','
select cats("'",ndc,"'") into: ndc_str separated by ','

 /* Age bucket groupings 10-19 20-29 etc. using modulo: */
data _null_; age=12; age10=age-mod(age,10); put age10=; run;

proc sql; select foo, today() as startdate format date9.,today()+8 as enddate format date9.,1000000 as ranking from t; quit;

 /* Count distinct values of a variable: */
ods select nlevels; proc freq data=sashelp.class nlevels; tables name age sex; run; 

 /* Date dashes */
select b.taebpatientid, storenum, cnt, today() as dt format=YYMMDDD10.

 /* Zero pad a char */
select taebpatientid, storenum, cats(%rml0(storenum),pharmacypatientid) as upid, put(input(storenum,4.),z4.) as storenumz

 /* Unique id for running SAS macro process: */
%let style=style_&SYSMACRONAME._&SYSPROCESSID;
 /* e.g. styletmpsas41DA9A76AE00C4374018000000000000 */
%let uniqueid=style%sysfunc(scan(&SYSPROCESSNAME, 2))&SYSPROCESSID;

 /* Exclusion join to keep only the records with the minimum age when there are more than one */
proc sql; select a.* from  l.rxfilldata_extra a left join l.rxfilldata_extra b on (a.storeid=b.storeid and a.pharmacypatientid=b.pharmacypatientid and a.age>b.age) where b.storeid is null and b.pharmacypatientid is null; quit;

 /* Find second largest number (good for top 3 etc): */
second_largest_num=largest(2, 456, 789, .Q, 123);  /* 456 */
fourth_smallest_num=ordinal(4, of q1-q4);
 /* SMALLEST function counts only nonmissing values */
fourth_smallest_num1=smallest(4, 1, 2, 3, -4, 5, ., 7);  /* 3 */
fourth_smallest_num2=ordinal(4, 1, 2, 3, -4, 5, ., 7);  /* 2 */

-- Generate random GUID (Unix only?):
guid=uuidgen();

 /* WHERE wildcard numeric sequence: */
where rank IN(1:10)

 /* length() is effectively deprecated, lengthn count is 0 for null string, it's 1 for length() */
data; len=lengthn('ABC '); put len; run;  /* 3 */
data; len=lengthc('ABC '); put len; run;  /* 4 */

# Convert SAS Log back to SAS Code:
sed '/^[^[0-9]/d;/SAS/d; /^$/d;/DATA?:?:?/d; /\*[0-9]/d' ~/tmp/t.log |cut -c6-256 |tr ! ' ' |sed '/^[^ ]/d' > t.sas
# Convert SAS Log to resolved macro MPRINT output:
sed '/^NOTE:/d; /^$/d; /^\s*$/d; /real time/d; /cpu time/d; /The SAS System/d' t.log  >| resolvedcode.log

 /* SAS Admin Logs */
tail -f /sas/config/Lev1/Logs/SASMeta_MetadataServer_2016-10-31_sas-01_2955.log

vi /sas/config/Lev1/SASMeta/MetadataServer/omaconfig.xml

 /* Bulk load a dataset insert into a database table: */
proc append base=mydb.mytbl (bulkload=yes bl_datafile="/tmp/data" bl_logfile="/tmp/bulkload_log" BL_LOAD_METHOD=APPEND) data=myinserts; run;

proc freq data=ar2_advair511 ; tables ptsex*fillmo / MISSPRINT; run;  /* row*col and include missing */

array datearray[*] Columbus Hastings Nicea (1492 1066 325); idx=whichn(1066, of datearray[*]);  /* returns array index 2 */

 /* Set flag when the sum of certain vars is greater than 10: */
array nvars[*] x1-x3; if sum(of nvars[*]))>10 then flag=1; else flag=0;

 /* Count number of items in a list: */
%put !!!%sysfunc(countw(a bb ccc));

 /* Self join. Only take the lowest age if there are more than one: */
select * from rxfilldata_extra a left join rxfilldata_extra b on (a.storeid=b.storeid and a.pharmacypatientid=b.pharmacypatientid and a.age>b.age)

 /* Open EG Metadata sessions: */
ps -ef |grep sasexe
 /* Which user has an EG session open: */
ps -ef |grep sasexe|awk '{print $1}'|uniq

 /* Set default if day is missing: */
if missing(day) then date = mdy(month,15,year); else date = mdy(month,day,year);

 /* Check if string contains only Y or N.  Function returns the position of the first character in Answer that is NOT a Y or N otherwise 0 true: */
if verify(strip(response), 'YN') then output errors;

 /* Mildly regex-like, find v450 or V450.100 or v450abcd, 0 true if matched: */
if compare(code, 'V450', 'i:') eq 0 then matched='Y';

proc sql; select Subj, Height, Weight, mean(Height) as Ave_Height, 100*Height/CALCULATED Ave_Height as Percent_Height; quit;

 /* Fill missings with previous visit's var using array: */
...  array visit[*] visit:; do i=1 to dim(visit); if visit[i] ne . then do; prev=visit[i]; end; else visit[i]=prev; end; ...

Fix "ERROR: The connection to the X display server could not be made"
ods graphics on;

 /* SAS If-the-else macro: */
%if %sysfunc(indexw(&rpclients, &SYSPARM)) %then %do; %let redpoint_client=Y; %end; %else %do; %let redpoint_client=N; %end;

-- Postgres month
select count(distinct pharmacypatientid), date_trunc('MONTH',filldate)::date from sdfarchive group by 2;
 /* SAS month */
select count(distinct pharmacypatientid), month(filldate) from sdfarchive group by 2 order by 2

 /* Histogram */
proc univariate data=data.rxfilldata noprint; hist; var filldate; run;

 /* 6 months ago criteria: */
where filldate > today()-180

 /* Single Excel output: */
ods excel file="~/bob/projected_tmm_builds.xlsx" options(sheet_name="17Apr17"); proc print data=t NOobs; run; ods excel close;
 /* Multi-sheet Excel output: */
ods excel file="AN-6617.xlsx"; ods excel options(sheet_name="6 mo"); proc print data=output6mo NOobs; sum count; run; ods excel options(sheet_name="12 mo"); proc print data=output12mo NOobs; sum count; run; ods excel close;

ods excel options(sheet_name="GE Shingrix Campaign Volume" absolute_column_width='30,15' embedded_footnotes='yes');

 /* Threaded database connections: */
from op.rxfilldata_&partition. (dbslice=("FILLNUM=0" "(FILLNUM>=1 OR FILLNUM IS NULL)")) 

 /* Reset open close ODS listing to Log: */
ods listing close;
ods listing;
ods listing;title "&SYSDSN";proc print data=_LAST_(where=(patientid=60279077)) width=minimum heading=H;run;title;

 /* Name of running macro: */
%put DEBUG: &SYSMACRONAME running &=myclid because &=is_independent;

 /* Implicit pass-through */
libname ORA oracle user=pks password=pw path=sutst38;
options NOlabel; proc sql; select name from dictionary.columns where libname eq 'ORA' and memname eq 'USER_ROLE' ; quit;

 /* Count of active stores by clientid: */
select x.clientid, sum(x.active) as cnt_active from (select clientid, (case when clientlocationstatus='ACTIVE' then 1 else 0 end) as active from analytics.vtmmstore) as x group by x.clientid

 /* Output an Excel multiple sheet workbook: */
ods excel file='t.xlsx' ods excel options(sheet_name='Diabetic'); proc print data=l.fnl_it NOobs; var clientstoreid taebpatientid; run; ods excel options(sheet_name='Respiratory'); proc print data=l.fnl_r NOobs; var clientstoreid taebpatientid; run; ods excel close;                                                       

 /* Quoted wildcard substring macrovariable: */
proc sql; select quote(cats('%',substr(long_client_name,1,5),'%'),"'") into :longname from build.clients_shortname_lookup where clientid=&clientid; quit;
SELECT description, groupname FROM amc.campaigngroups WHERE description ilike &longname and campaigntype = 'TMM'; 

 /* Specific number of random records from a dataset (same result if seed=): */
proc surveyselect n=10 seed=123 data=tmp out=foo; run;
data r; do i=1 to 10; obsnumiwant=ranuni(int(datetime())); set d; output; end; stop; run;

attrib state length=$3 label='foo bar' format=$40.; 

 /* Foreach dataset in library, push names into a mvar: */
proc sql NOPRINT; select memname into :DSETS TRIMMED separated by ' ' from dictionary.members where libname like 'WORK'; quit;
options ls=180 NOlabel;proc sql;select * from dictionary.columns where libname eq 'WORK' and memname eq 'EFORMSNUMCH';quit;

 /* Canonical sql libname */
libname GDM_DIST oracle user=&username password=&password path=&database schema=dgm_dist;

select distinct r.sampid, s.specname, put(r.sampid,F6.)||'-'||s.specname into :SAMPIDS separated by ',', :METHS separated by ' ', :METHPAIRS separated by ' '

%if %sysfunc(fileexist('c:\foo\bar.txt')) %then %put quote-mandatory file exists; %else %put file OR DIRECTORY! OR FOLDER! does not exist;
filename myfileref 'c:\delme.dat'; %let exist = %sysfunc(FExist(myfileref)); 
%if not %sysfunc(exist(l.metndc)) %then %do; %put dataset exists; %end;

filename x 'c:\deletefileusingSAS.dat'; %let rc = %sysfunc(FDelete(x)); 

/* Setup the default SAS System user work folder and autocall in /cygdrive/c/Program\ Files/SAS\ Institute/SAS/V8/SASV8.CFG */
-WORK "E:\SAS Temporary Files\"
-SET SASAUTOS  ( "d:\Auto_Call" ...

 /* Do not auto-delete WORK library, save WORK datasets and _TD.... in 'SAS Temporary Files' dir after run completes. Override default. */
options NOworkterm; %put !!! Saved in WORK lib: ; libname WORK list;
sas.exe -WORK 'c:\temp\sas' -NOWORKTERM -sysin t.sas -log t.log -print t.lst -sysparm "%dpv2root%"

 /* Keep temporary WORK datasets in your own dir, not in the default _TD....\ */
libname l './saswork'; options USER=l;  /* saswork must already exist! */

 /* Use datasets in pwd (w/o libname prefix "L") pretending that's WORK: */
options USER=L;

/* Single quote in SAS macro requires quoting with percent sign %: */
%put this is %str(John%'s office) here;

 /* Read only do not modify dataset: */
options NOreplace;
 /* Read only do not modify anything in library: */
libname myROlib 'c:/temp/' access=readonly;

 /* Redirect from LOG device to PRINT device to draw line in the .lst (tilde repeats 78 times): */
data _null_; file PRINT; put 78 * '~'; run;

%local i j item;  /* no commas */

 /* Comma-separated SQL macrovariable */
select distinct quote(trim(batch_nbr)), quote(trim(matl_nbr)) into :batches, :materials separated by ','
 /* But for oracle we need single not double quotes (then add a leading & trailing quote): */
%let sq=%str(%'); %let batches=&sq&batches&sq; ...
select batch_nbr, matl_nbr into :batches separated by "','", :materials separated by "','"
select distinct region into :region1 thru :region3 ...

x "move /Y lelimssumres01a.sas7bdat \\rtpsawn321\d\sql_loader\LeLimsSumres01a&suff..sas7bdat";

 /* Tells SAS not to worry about keeping obs with the same BY variable values in the same order (for speed efficiency) */
proc sql NOEQUAL ...

 /* Control flow statements:
  * DELETE returns to the top of the datastep w/o writing
  * RETURN returns to the top of the datastep with a default OUTPUT
  * LEAVE exits a loop (and branches to the first statement following the end of the DO loop)
  * CONTINUE goes to the next iteration of the loop
  */

 /* PUT STATEMENT writes to a buffer (default: LOG) vs. INPUT statement reads from a buffer (default: CARDS) */

 /* FORMAT specify how data is to be written vs. INFORMAT specify how data is to be read: formattedpartdescription=put(SAS_data, $myformat.)  vs.  sasdate=input(raw_char_data, $sasinformat.) */

 /* concatenate (stack) two datasets */
... set x1 x2; ...
 /* interleave two datasets same except end up sorted */
... set x1 x2;  by state; ...

sumof=sum(of idnum--qtr4 of x1-x42);  /* same */
sumof=sum(of idnum--qtr4 x1-x42);  /* same */
meanof=mean(of a[*]);   /* variable array */

 /* Sum accumulator is auto-retained (but  foo=foo+1  is not) */
foo+1;

 /* SUM function returns the sum of non-missing arguments whereas '+' operator returns a missing value (nulls propagate) if any of the arguments are missing. */
x = a + b + c;            /* BAD- if ANY argument is missing, x = . */
x = sum(a, b, c);         /* with missing argument, x is sum of nonmissings */
x = sum(a, b, c, 0);      /* if a, b & c are missing, result will be zero */
x = (d + e + f + g) / 4;  /* BAD- x is missing if any var in the calc is missing */
x = mean(d, e, f, g);     /* number of nonmissings is divided by 4 */
x = sum(0, x, y);         /* return 0 if all are missing, optionally use if n(x, y) eq 2 then ... */

 /* Missing to zero */
x=sum(foo, 0);
 /* Change missing to zero do over nums */
data t; set t; array nums _numeric_; do over nums; if nums eq . then nums=0; end; iacthr97 = emhrsi97 + cohrsi97 + vehrsi97; run;

 /* Missing number counts: */
nonmisscnt = n(of x1-x99, y, z);
misscnt = nmiss(of x1-x99, y, z);

 /* Interquartile range (distance between 25th and 75th percentile): */
x = iqr(10, 20, ., 30, 40, 50);  /* 20 */
x = iqr(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);  /* 5 */

 /* Split parse string on dash taking 8ZP6699 from 8ZP6699-4148428 */
mfg_batch=scan(mfg_batch,1,'-');

 /* Goes right to left, fixes problem of names with middle names */
lastname=scan(fullname, -1 ' ');

 /* Get every 4th obs using modulo */
if mod(_N_, 4) eq 0; ...
 /* Get every other obs using modulo */
if mod(_N_, 2) eq 0; ...
 /* Test for oddness using modulo */
mod(x,2) eq 1
 /* Test for evenness using modulo */
mod(x,2) eq 0

 /* Determine where WORK dir is located: */
libname l '.'; proc contents data=l._ALL_; run;
proc contents data=WORK._all_ NODS; run;
proc contents data=WORK._all_; run;  /* cleaner, ds names only */
proc contents data=L._ALL_ out=WORK.prcnts; run;

 /* List all vars in dataset: */
proc sql; select name from dictionary.columns where libname eq 'L' and memname eq 'LELIMSINDRES01A210255';quit;

 /* Canonical do loop: */
%do i=1 %to 5; %put here is &i; %end;
%do i=5 %to 1 %by -1; %put here is &i; %end;
 /* Canonical do loop list: */
data _null_; do i = 1, 2, 3; put i=; end; run;
do i = 1, 2, 3, 'a', 'b', 'c';
do i=1 to 3, 'cat', 20; ...; end;

 /* Canonical do loop until: */
do until (n>100); ...
do i=1 to 10 until (n>5); ...

do while (1);  /* infinite loop */

 /* Count max number of fills per member into macrovariable: */
proc sql NOprint; select left(put(max(nfills),8.)) into :MAXNFILLS from (select count(*) as nfills from t group by member_id); quit;
proc sql NOprint; select max(nfills) into :MAXNFILLS TRIMMED from (select count(*) as nfills from t group by member_id); quit;

 /* Count number of observations - efficient */
data _null_; if 0 then set BUILD.clients_shortname_lookup nobs=count; call symput('OBSCNT', strip(count)); stop; run;

 /* Count observations without opening dataset - most efficient (can also count vars with NVARS)*/
%let dsid=%sysfunc(open(work.foo)); %let cntobs=%sysfunc(attrn(&dsid, NLOBS)); %let dsid=%sysfunc(close(&dsid));

 /* Extract tail of filename DIRROOT=c:/foo/tmp/bar.txt */
%let PRODUCTNAME=%substr(&DIRROOT, %eval(%index(&DIRROOT, tmp)+4));

 /* E.g. Start time: 11:13:27 PM */
footnote "Start time: %sysfunc(time(),TIMEAMPM.)";

 /* Rename datasets with a timestamp */
%let tstamp=%sysfunc(compress(&SYSTIME, ':'));  /* eg 1300 */
proc datasets lib=l; change ccecallrequest=ccecallrequest_&tstamp; change tmm345=tmm345_&tstamp; run;

 /* Maximum storage size of SAS numeric using default 8. */
9,007,199,254,740,992

 /* Reverse normal sort order for one var              ________________                */
proc sort data=sashelp.shoes out=t NOEQUALS; by region DESCENDING sales subsidiary; run;
 /* Unlike SQL */
proc sort; by DESCENDING 'Unique Patient Count'n ; run;

 /* View browse SASHELP library */
options ls=180;proc contents data=SASHELP._all_ /*NODS*/;run;

 /* What SAS products are licensed / installed?: */
proc setinit noalias; run; 
 /* Apply setinit.  May be simpler just to right-click a setinit.sss file. FAILS 10-Mar-20, must use Program Files : SAS : "Renew SAS Software 9.4" */
C:\Program Files\SAS Institute\SAS\V8>sas.exe -setinit -sysin c:\setinit.sas -config "c:\Program Files\SAS Institute\SAS\V8\sasv8.cfg"

 /* Canonical read in readin infile input text CSV file using combined input statement: */
filename F 't.csv'; data t; infile F DLM=',' DSD MISSOVER LRECL=2600 FIRSTOBS=3; input Product :$40. mydt :DATE9.; run;
filename F 't.csv'; data t; infile F DLM=',' DSD TRUNCOVER LRECL=2600 FIRSTOBS=3; input Product :$40. mydt :DATE9.; run;

 /* DSD "data sensitive delimiter" treats two consecutive delimiters as a missing value and removes quotation marks from values */

 /* Compress spaces from a numeric macrovariable: */
%let c = %sysfunc(compress(&c));

 /* Count spaces in a macrovariable by compressing them away */
%let l1=%length(&spacey); %let c=%sysfunc(compress(&spacey)); %let l2=%length(&c); %let csp=%eval(&l1-&l2);

 /* Remove commas from mvar */
%let varlistsas=%sysfunc(compress(%quote(&varlist),','));
%let varlistsas=%sysfunc(translate(%quote(&varlist),' ',','));
 /* Remove commas and quote delimiters from mvar */
%let X=%sysfunc(compress(%quote(%sysfunc(translate(%quote(&S),' ',','))),'"'));

 /* Extract basename shortname stem from a fully qualified path: */
%let fq = %sysfunc(reverse(&fq)); %let basename = %sysfunc(reverse(%scan(&fq, 1, '\')));

 /* Use substr as lvalue to mask a value: */
substr(ssnum, 1, 6) = '******';

 /* Remove specific characters from a string var, like regex s/foo// */
phone = compress(fullphone, '()- ');
ndc = quote(compress(strip('NDC/UPC/HRI'n),'-'),"'");

 /* Substitute specific characters, like regex s/-/_/g */
sBatch1Code = translate(sBatch1Code, '_', '-');

 /* Substitute specific words, like regex s/foo/bar/g */
sBatch1Code = tranwrd(sBatch1Code, 'foo', 'bar');
sBatch1Code = tranwrd(sBatch1Code, 'foo', '');

 /* Canonical SAS if then else: */
if region eq 'Asia' then put 'As'; else put 'no';
if region eq 'Africa' then do; put 'Af'; end; else do; put 'no'; end;
%if &i eq 2 %then %do; %let fqds=8ZP2432; %end; %else %do; %let fqds=32; %end;

 /* Rename vars to avoid "WARNING: Variable mfg_batch already exists on file WORK.VALTREX_PRODUCTIONANDANALYTICAL." */
proc sql; select * from sashelp.shoes (rename=(region=myyr subsidiary=mysub)) ; quit;
data d9(drop=long_test_name rename=(long_test_name2=long_test_name)); ...

 /* View, display, print format permanent stored formats to .lst */
proc format library=work FMTLIB; run;  /* all FMTLIB is a keyword */
proc format library=work; select sexunic; run;  /* just one */

 /* Macro date - format today's date into a macrovar e.g. 2016-09-16: */
%let formatteddate=%sysfunc(date(), YYMMDD10.);
%let formatteddate=%sysfunc(putn(&date_exec, YYMMDD10.));

%let formatteddollars=%sysfunc(putn(&MYNUM, DOLLAR10.));

 /* When you need to know how many intervals are between two dates use intck(). The number of MONTH intervals INTCK counts depends on whether the first day of a month falls within the period. */
 /* When you need to create a date that is some number of intervals away from another date use intnx(). INTNX produces the SAS date value that corresponds to the beginning of the next interval.*/
start='01jan2013'd; end='30jun2013'd; days2=intck('day', start, end);  /* days2 is 180 (180 day boundaries crossed) */
start='31dec2013'd; end='01jan2014'd; yrs2=intck('year', start, end);  /* yrs2 is 1 (a single year boundary was crossed!) */
start='01jan2013'd; nextweek=intnx('week', start, 1); nextweekEND=intnx('week', start, 1, 'E');  /* or 'M'iddle, 'S'ame.  nextweek is Sun. 2013-01-06 nextweekEND is Sat. 2013-01-12 */
start='11jan2013'd; monthStart=intnx('month', start, 0, 'b'); /* first day of month: */
start='11jan2013'd; monthEnd=intnx('month', start, 0, 'e');   /* last day of month */

put / 'aug is month with 3 paydays'; count=intck('week2','01jul98'D, '31jul98'D); put count=; count=intck('week2','01aug98'D, '31aug98'D);

 /* Calculate person's age (number of year boundaries crossed): */
select *, (intck('YEAR', today(), dateofbirth)*-1) as agethisyear  /* 52 all year */
 /* Age in half year increments - intck counts half year boundaries crossed */
ageinhalfyrs = intck('YEAR2', today(), '30OCT65'd)*-1;
yearsold = year(today())-year(patientdob)

 /* Macro date - change format reformat date into a macrovar: */
%let mydt='30OCT2015'; %let newdt=%sysfunc(putn("&mydt"D, YYMMDD10.));
%let mydt='30OCT2015'; %let mydtplusone=%sysfunc(intnx(day, "&maxdate"D, 1, b), YYMMDD10.);
%let mydquoted=%bquote(')%sysfunc(putn(%sysfunc(inputn(20150101, YYMMDD8.)), YYMMDD10.))%bquote(');  /* '2015-01-01' */

 /* intnx shifted index - when is next election day?: */
%let nextelectionday=%sysfunc(intnx(year4.11, '01OCT2015'd, 1), DATE9.);
 /* intnx shifted index - when is the next election day after the upcoming one?: */
%let nextelectionday=%sysfunc(intnx(year4.11, %sysfunc(today()), 2), DATE9.);

 /* Fixed fiscal date range fiscalStart=01OCT2016 fiscalEnd=30SEP2017 */
data; format fiscalStart fiscalEnd date9.; fiscalStart= intnx('year.10', '03OCT15'd, 1, 'b'); fiscalEnd= intnx('year.10', '01OCT15'd, 1, 'e'); run;

 /* Last day of previous month (31dec1999): */
past = intnx('month', '01jan2000'D, -1, 'E');
data; previous_mo = intnx('month', '01jan2000'D, -1, 'E'); put previous_mo=; put previous_mo= DATE9.; run;
 /* First day of year this year */
data; newyearsday = put(intnx('year', "&SYSDATE"D, 0, 'B'), DATE9.); put newyearsday=; run;
%let newyearsday=%sysfunc(intnx(YEAR, "&SYSDATE"D, 0, B), DATE9.);  /* sysfunc can't handle intnx parm 1 with quotes!!! And does not need put() ! */
%let newyearseve=%sysfunc(intnx(YEAR, "&SYSDATE"D, 0, E), DATE9.);
 /* Last day of year: */
%let eoy=%sysfunc(intnx(year, "&SYSDATE"d, 0, E),date9.);

 /* Calculate yesterday date in macro date calculation: */
%let yesterday=%sysevalf("&SYSDATE"D-1);                                                 /* 20322 */
%let yesterday=%sysfunc(putn(%sysevalf("&SYSDATE"d-1),DATE9.));                          /* 31DEC2015 */
%let yesterday=%sysfunc(intnx(day, "&SYSDATE"D, -1, b), YYMMDD10.);                      /* 2015-12-31 */
%let yesterday=%bquote(')%sysfunc(intnx(day, "&SYSDATE"D, -1, b), YYMMDD10.)%bquote(');  /* '2015-12-31' */
%let jan1ofpreviousyear=%sysfunc(intnx(year,%sysfunc(today()),-1,b),date9.);             /* 01JAN2016 */

 /* Calculate one month from now in macro: */
%let x=%sysevalf("&SYSDATE"D+30);  /* 20322 */
%let x=%sysfunc(putn(%sysevalf("&SYSDATE"D+30),DATE9.));  /* 31DEC2015 */

 /* Date convert calculate one month ago in macro (more accurate than subtracting 30): */
%let ThisMonth=201405;
%let LastMonth=%sysfunc(intnx(month,%sysfunc(InputN(&ThisMonth.01,yymmdd8.)),-1), YYMMDDN8.);  /* the .01 is to fake May 1 */
%let m= %sysfunc(month("&sysdate"d), z2.);  /* 01 02 etc */

%let FirstDayOfLastMonth=%sysfunc(intnx(month, "&SYSDATE"D, -1, b), YYMMDD10.);
%let OneMonthAgoToday=%sysfunc(intnx(month, "&SYSDATE"D, -1, s), YYMMDD10.);
%let LastSunday=%sysfunc(intnx(week, "&SYSDATE"d, 0, b), DATE.);
%put LastMonday=%sysfunc(intnx(week1.2, "&SYSDATE"d, 0, b), DATE.);

 /* Force date to last Saturday */
data _null_; lastsaturday = intnx('week', "&SYSDATE"D, 0, 'B')-1; call symput('date_max', put(lastsaturday, DATE9.)); run;
%let lastSaturday=%sysfunc(intnx(week, "&SYSDATE"d, -1, e), DATE.);

%let date_max=%sysfunc(intnx(day,%sysfunc(today()),-1,b),date9.);  /* yesterday */
%let date_max=%sysfunc(putn(%sysevalf("&SYSDATE"D-1),DATE9.));  /* yesterday */

 /* Leap year is accomodated: */
intnx('YEAR', '29feb2000'd, 2, 'SAME');  /* 28feb2002 */

 /* First day of the month 6 months after discharge: */
FollowupDate = intnx('month', '03jan17'd, 6);  /* 01jul17 */
 /* Same day of the month 6 months after discharge: */
FollowupDate = intnx('month', '03jan17'd, 6, 'SAMEDAY');  /* 03jul17 */

 /* Convert date beginning of month six months ago to end of previous month: */
%let minbom=%sysfunc(intnx(MONTH, "&SYSDATE"d, -6, B),date9.); %let maxbom=%sysfunc(intnx(MONTH, "&SYSDATE"d, -1, E),date9.);
 /* If it's 16-May-18 then return 20180401 - the first day of the previous month in macro: */
%let bom_previous=%sysfunc(intnx(MONTH, "&SYSDATE"d, -1, B),YYMMDDN.); 

proc sql; select "%sysfunc(putn(%sysevalf("&SYSDATE"D+30),DATE9.))" as expireinonemonthdate ...

 /* Calculate days between in macro: */
%let begdate='01Jan1995'd; %let endate='31Dec1995'd; %put Number of days from BEGDATE to ENDDATE is %left(%sysfunc(putn(&enddate-&begdate+1, BEST.))); 

 /* Canonical proc means */
proc means data=sashelp.shoes; class region; var sales; run;
proc means data=data.rxfilldata mean; var age;run;
proc means data=sashelp.shoes NOprint; output out=t; class region; var sales; run;
proc summary data=sashelp.shoes PRINT; class region; var sales; run;
proc sql; select region, count(sales), sum(sales) format=DOLLAR16. from sashelp.shoes group by region; quit;
 /* Count numeric missings: */
proc means data=sashelp.class N NMISS; run;
proc sort data=sashelp.class out=t; by sex; run; proc means data=t N NMISS; by sex; var height; run;
proc sort data=sashelp.class out=t; by sex;run; proc means data=t N NMISS; class sex; var height; output out=t2; run;
proc means data=sashelp.shoes MEDIAN; var sales; run;
proc means data=sashelp.cars maxdec=0; output out=t MEDIAN=; class make; var mpg_city; run;

 /* Canonical count missings: */
proc sql; select count(*) from l.Publix_pharmacydata where pharmacypatientid is null ; quit;
proc sql; select count(case when pharmacypatientid eq '' then . else 1 end) as found, count(case when pharmacypatientid ne '' then . else 1 end) as notfound from l.Publix_pharmacydata quit;

 /* SAS error message V8 at least: */
NOTE: BY-line has been truncated at least once.  /* fix with options ls=max */

 /* Canonical SELECT (case) statement */
select ( storeno ); when ( 81,83, 12 ) delete; when ( 73 ) put 'okthen'; otherwise; end;
select; when (daysOld < 31) category = 'Current'; when (daysOld < 61) category = 'Over 30'; when (daysOld < 91) category = 'Over 60'; otherwise category = 'Over 90'; end;

 /* System call */
options NOxwait; data _NULL_; x "start lelimssumres01a&nm..sas7bdat"; /* 0 for success */ %put Windows status is &SYSRC; run;

 /* Remove all formats in dataset */
data foo; format _ALL_; run;

 /* What SAS day number is one year ago from today? */
%let yearago = %sysevalf(%sysfunc(date())-365); ...  if test_date > &yearago; ...

Patches installed:
C:\Program Files\SAS Institute\SAS\V8\core\sasinst\hotfix\

dataset_exists = %sysfunc(EXIST(mydataset));  /* 1 yes, 0 no */

ods PDF file='c:/temp/t.pdf' style=HtmlBlue NOTOC;  proc...run; ods PDF close;

ods html file='myrpt' style=HtmlBlue; proc print data=_LAST_; run; ods html close;
ods html body='t.htm'; proc print data=_LAST_; run; ods html close;

 /* ODS toggle (remove 'close' to re-enable) */
ods listing close;

ods rtf file='report1.rtf' newfile=bygroup;

 /* Canonical write output save Excel as CSV */
options NOsource; proc export data=t OUTFILE="\\pucc\VENT\Output Compiled Data\CSV VenHFA_analytical.csv" DBMS=CSV REPLACE; run;
ods csv file='InputFile.csv'; proc print data=t3 NOobs LABEL; run; ods csv close;  /* better if need to change varname to label for user */

 /* Canonical write output save as an Excel file: */
ODS EXCEL file="t.xlsx" options(sheet_name="#BYVAL(member)" embedded_titles='yes'); proc print NOobs; run; ODS EXCEL close;

 /* Query what do we have for ODS HTML etc: */
proc template; list styles; run;
proc template; list tagsets; run;
 /* View details of specific style: */
proc template; source styles.printer; run;

 /* Multiple ODS destinations e.g. multiple styles for a single proc's output or one copy to local, one to network drive */
ods html(id=1) file='file1.html' style=sasweb; ods html(id=two) file='file2.html' style=ocean;
...proc...
ods html(two) close;
...proc...
ods html(id=1) close;

 /* Multiple ODS destinations */
ods csv file="csv.csv"; 
ods csv(2) file="csvsemi.csv" options(Delimiter=';'); 

 /* Eliminate garbage from a normally numeric field.  Keep Log clean. */
proc format; invalue NUMONLY(UPCASE) -999999999 - 999999999 = _SAME_ OTHER = . ; run; data clean_numbers_only; input mynum NUMONLY9.; ...

 /* Hardcoded literals in SQL select query */
select distinct 'literal ' as hardcodedfieldname, region 'display reggy all for rows' format=$5., product from sashelp.shoes

 /* Macro index search */
%if %index(&the_type, natmer) %then %put found a natmer;

 /* Canonical transpose, sex goes as column now */
proc transpose data=t out=t2(drop= _NAME_ _LABEL_) prefix=Sx; by state; id sex; var result; copy comment1 comment2; run;
proc transpose data=t out=t2; by mo;<---THE FORMER COLUMN  id clientstoreid;<--THE NEW COLUMN; run;

 /* Transpose wide to long: */
proc transpose data=wide out=long(where=(COL1 ne .)); by patient; var visit1-visit4; run;  
data long; set wide; array v v:; do i=1 to dim(v); sname = vlabel(v{i}); value = v{i}; if not missing(value) then output; end; run;

 /* Transpose long to wide: */
proc transpose data=long out=wide(drop=_NAME_); by mo; id name; run;

libname INXML XML "&SYSPARM\&DATASRC..xml" access=READONLY; proc contents data=INXML._all_;run; data tmp; set INXML.table; run;

 /* Default keyboard shortcut DMKEYS */
key command line commandline focus SAS: <F11>
KEYS PGM WPGM WPG LOG OUTPUT OUT NUMS ZOOM

Change default WORK location (PC SAS): edit near EOF -WORK
C:\Program Files\SAS\SAS 9.1\nls\en\SASV9.CFG

 /* Display each line of textfile as it's read-in using INPUT statement */
put '!!!' _INFILE_;

 /* Loop all characters in dataset without an index: */
array cs _CHARACTER_; do over cs; if cs eq: 'foo' then cs='bar'; end;

 /* Single trailing at sign  @ vs. Double trailing at sign @@ */
@  holds record in input buffer so that logic can be used to figure out which (next) INPUT statement to use.  More than one INPUT statement exists in data step.  Releases when control returns to top of data step.
@@ holds a record across multiple iterations of the DATA Step to allow writing multiple obs from a single line of raw data.  A single INPUT statement exists in data step.  Releases when the end of the raw RECORD is reached or an @[@]-less INPUT statement is encountered.

 /* SAS Date format checker: */
data _null_; num1=input('01-JAN-60', DATE9.); num2=input('01/01/1960', MMDDYY10.); num3='01-JAN-60'd; char=put(0, DATE9.); put _all_; run;

 /* Build large dummy dataset: */
proc surveyselect data=SASHELP.shoes out=stacked samprate=1 reps=50000000; run;

 /* char2num - think "I"NPUT is closer to "C"HAR so use that to convert a character to a numeric: */
num = input(char, ?? 8.);  /* char2num and suppress SAS Log "NOTE: Invalid argument to function INPUT at line..." & _ERROR_=1 */
num = input(char, ?? BEST. -L);  /* overkill? */
 /* num2char - think "P"UT is closer to "N"UM so use that to convert a numeric to a character: */
char = put(num, BEST. -L);  /* integer num2char  (may need: if mynum=. then mynum=' ') */
char = put(num, 12.2 -L);  /* floating point num2char */
char = '5,000'; num = input(char, COMMA7.);

 /* Canonical char2num swap and drop */
data nums; set chars(rename=(Height=Char_Height Date=Char_Date)); Height=input(Char_Height,8.); Date=input(Char_Date,mmddyy10.); drop Char_:; run;
 /* Canonical num2char */
data chars; set nums; Char_Date=put(SASDate,DATE9.); Char_Cost=put(Cost,DOLLAR10.); drop SASDate Cost; run;
 /* char2num substring to numeric: */
num = input(substr(char,3,2), 4.);  /* substr() alone produces a char, convert it to num */

 /* Char2num make both vars numeric on the fly during the join: */
from csv3 a left join db52 b on a.storeid_csv=input(b.storeid_db5, 8.) and a.pharmacypatientid_csv=input(b.pharmacypatientid_db5, 8.)

 /* 20151001 to 201510 while remaining a number: */
shortmo=floor(month/100);

 /* Avoid ASCIIbetical sort by inserting leading blanks if data is small: */
data t; set t; region=right(region);
 /* Avoid asciibetical sort by inserting leading blanks if data is large (single pass): */
proc format; value $rtfunc OTHER=[right()]; run; proc freq data=t order=formatted; table region; format region $rtfunc.; run;

options NOlabel; /* prevent proc sql default from displaying labels instead of varnames */

 /* View control and non numchar characters (v8): */
c=compress(comments1159,'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789');
onlyKeepDigits=compress('919-844-0641', kd)  /* 9198440641 */

 /* Convert to Oracle formatted datetime e.g. 21-MAY-98 02:30:37 is Oracle format 'DD-MON-YY HH24:MI:SS' */
proc format; picture ORADTT other='%0d-%b-%0y %0H:%0M:%0S' (datatype=datetime);run; data; s='21May98:02:30:37'DT; call symput('IP21START',"'"||trim(left(put(s, ORADTT.)))||"'");run;

 /* SAS Enhanced Editor IDE F11 command shortcuts */
out-->SAS Output  lst-->SAS Output (same)  log-->SAS Log  wpg-->Enhanced Editor

%if (&SQLRC eq 0) and (&SQLOBS gt 0) %then %do; %put no proc sql errors and query did return records; %end;

data _null_; x=sleep(60000); run;  /* 60 seconds */

if first.storeno and last.storeno then put 'firstdot lastdot says there is only one of these unique values: ' storeno;

 /* SAS Program Editor (*not* Enhanced) where n is num of lines */
Cn/CC copy  Dn/DD del  In insert  Mn move  Rn repeat  A after  B before  undo (in cmdline)

 /* Display Manager Enhanced Editor open: INCLUDE  save: FILE  go to Enhanced Editor: wpg  go to commandline: F11  submit the top n lines in SAS Editor: SUBTOP 42   Commentout the selection: Ctrl + /  Undo the Comment  Ctrl + Shift +  */

 /* View input file text file in a SAS IDE window */
filename f 'bladerun_crawl'; proc fslist file=f;run;

 /* SAS conception of Truth is anything other than False, False is 0 or . */

 /* Distributive input statement */
input (Date1 Date2)(:MMDDYY10.) mon dy yr;
input (name1-name12) ($)  @@;
input (Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec) (1.);  /* read raw 111222333444 */

array elements{5} $2 _TEMPORARY_ ('H','He','Li','Be','B'); /* cannot use '{*}' here */
 /* Multidimensional array 3 rows, 25 columns: 1-25 26-50 51-75.  Good for looking up an item in a table R1C1 style. */
array a{3,25} v1-75;  /* to access v50: a{2,25} */

 /* Standard, SAS column input readable, numerics: -15, 15.4, +.05, 1.54E3, -1.54E-3  But still may be able to use formatted input, COMMA12.2 etc, for nonstandards ($ or % or ,). */

 /* Ampersand informat input modifier accepts embedded space so data must be delimited by TWO or more spaces */
input name &$12.  score1  score2;

 /* Fixed fields can be readin via column input (standard data only) or formatted input (either).  Freeform fields can be readin via list (or modified list "&" ":") input */

 /* Free-format input (space delimited etc) - use list input and only name each var and specify its type */
 /* Modified list can read spaces in vars and handle non-standards like commas in numbers */

 /* Canonical DATETIME. format examples. TIME portion must be delimited by a colon, minimum width is TIME5. x=1000000 */
put x DATETIME.;    /* 12JAN60:13:46:40 */
put x DATETIME10.;  /* 12JAN60:13 */

 /* Canonical DATETIME convert to human */
data _null_; x=put(1614549716, DATETIME18.); put x=; run;
data _null_; x=put(20188, DATE9.); put x=; run;

 /* Default input column pointer control starts at position 1.  After reading a piece of data it rests 1 column to the right of that data. */
 /* Column pointer controls: @n +n */
 /* Line pointer controls: / (relative, sequential)  #n (absolute, non-sequential) */

 /* _ERROR_ is a boolean */

 /* Avoid proc print "ERROR: Unable to allocate sufficient memory. At least 1168534K bytes were requested. You must either increase the amount of memory available, or approach the problem differently.  ERROR: Out of memory." */
data _null_; set _LAST_; file LOG; put (_ALL_)(=); put; run;

 /* printf for debugging */
data _NULL_; set _LAST_; file LOG; put '!!!DataLink'; put (_ALL_)(=); put; run;

 /* Determine how many parameters were passed in */
%let l1=%length(&SYSPARM); %let c=%sysfunc(compress(&SYSPARM)); %let l2=%length(&c); %let csp=%eval(&l1-&l2+1);

 /* Take 2nd thru last parameters passed in as a single string (to be iterated later) */
%let sp=%str( ); %let pos=%index(%bquote(&SYSPARM), &sp); %let pxall=%substr(%bquote(&SYSPARM),&pos);

 /* Enquote for Oracle syntax: */
%let today=%str(%'%sysfunc( today(),mmddyy10. )%');

 /* Convert from human to SAS datetime (epoch number returned): */
data t; a=input("05-OCT-10 11:06:13", DATETIME18.); b=put(1601377424, DATETIME18.); run;
%let epochnum=%sysevalf("05OCT2010"d);

 /* If string contains substring 'zm' - weak regex */
if name eq "&DESIGNATOR" and index(upcase(Value),'ZM');

 /* Load a dataset into memory only when dataset is used. */
SASFILE WORK.sample OPEN;

 /* Canonical min max */
proc sql; select min(sampcreatets), max(sampcreatets) from tmp8.lims_0002e_avandamet; quit;
proc sql; SELECT min(resentts) format=DATETIME19., max(resentts) format=DATETIME19. FROM l.sumvaltrex01a ; quit;
proc sql; SELECT min(ts) AS mints format=ip21dtt., max(ts) AS maxts format=ip21dtt., "&STARTDT" as startdt, "&ENDDT" as enddt, count(ts) as cnt FROM &OUTPUTFILE ; quit;
 /* Canonical min max date */
...  retain _maxdt; format _maxdt DATE9.; set t; _maxdt = max(of _maxdt dt); call symput('MAXDT', _maxdt); ...

 /* Simple timestamp datetime change */
data tmp1.ip21_0001e; set tmp1.ip21_0001e; maxts='12NOV10:19:45:10'dt; baselastrun='14NOV10:21:15:20'dt; run;

 /* Which files is SAS accessing?                                     ___________ _________________ */
c:/PROGRA~1/SASINS~1/SAS/V8/sas.exe -sysin t.sas -log t.log -nosplash -rtrace all -rtraceloc t2.log

 /* Print resolved macro code */
 /*      keyword                                      */
filename MPRINT 'c:\temp\printMacroResolvedSAScode.sas'; options MPRINT MFILE;

 /* GENMAX is the max number of generation datasets to rotate but each of those 7 gets an increment e.g. ip21_0002e_line8fillerBKUP#009.sas7bdat */
echo "libname l '//tpsawn323/DataPost/SGK/Zebulon/MDI';libname l2 'u:/tmp';data l2.ip21_0002e_line8fillerBKUP(genmax=3);set l.ip21_0002e_line8filler;run;" >| $UTMPDIR/t.sas && $SASEXE -sysin "$UTMPDIR/t.sas" -log "$UTMPDIR/t7a.log";
 /* Version a dataset, up to 3 copies, then view the previous version */
data t(genmax=3); ...;   proc print data=t(gennum=-1); run;

 /* Variable range lists: */
var1-var999;
_CHARACTER_ _NUMERIC_
 /* More subtle variable range lists: */
varA -character- varZ
varB-numeric-varY  /* varA & varZ can be char */
 
 /* Canonical contents: */
proc datasets library=SASHELP; contents data=shoes VARNUM; run; quit;
proc sql; describe table SASHELP.shoes; quit;

 /* Print to SAS Log without %put */
data _null_; file print; put #3 @10 "Data set &dsn. does not exist"; run;

 /* V8 undocumented informat: */
x='2005/6/30 12:30'; ymd_no_ampm=input(x, ymddttm16.);
ymd_ampm=input(z, ?? ymddttm18.);

SAS/SHARE remote server (running proc server) -> local client
SAS/CONNECT remote server (running spawner.exe) -> remote server (only the .sas file with rsubmit; endrsubmit; gets sent to server)

 /* Eliminate error "Format F_APRCLS not found or couldn't be loaded for variable APRCLASS" when opening dataset for viewing: */
options NOfmterr;

 /* Blank out empty wipe initialize datasets */
data ds_SAMPLE_1; run; data ds_SAMPLE_2; run;

 /* Canonical numeric array definition: */
array temperaturehour_arr {24} temp1-temp24;

DDMONYY in Oracle is DATE7. in SAS

 /* SAS epoch to human x=21JUN13 */
data; x=put(19530, DATE.); put x=; run;

 /* Canonical for each macro foreach loop */
%macro loop; %local i; %let i=1; %let clid=%scan(&clids, &i, ' '); %do %while ( &clid ne   ); %let i=%eval(&i+1); %put !!!&=clid; %let clid=%scan(&clids, &i, ' '); %end; %mend; %loop;

 /* Macro multiple condition macro if then %if statement */
%if &foo eq bar OR &foo eq %str(baz oom) %then ...

 /* Build a lookup CNTLIN format: */
data control(keep= fmtname start label hlo); set t(rename=(code=start animal=label)) end=e; retain fmtname 'ANIFMT'; output control; if e then do; hlo='o'; label='Unk'; output control; end; run;
 /* Convert control dataset into format then do animal code lookup: */
proc format CNTLIN=control; run;  data t2; set t; animal=put(code, ANIFMT.); run;

 /* Print a CNTLIN stored format: */
proc format library=work FMTLIB; run;

options NOlabel;  /* Avoid proc sql printing pretty labels names instead of varnames */

 /* Convert SAS epoch date to human: */
~/code/scripting/datecalc 1/1/1960 19272
 /* Convert SAS epoch date to human - Excel (must convert num result to Date): */
=DATEVALUE("1/1/1960")+19272

 /* Convert character constant date to character and SAS date to number in open code (easiest date converter conversion) */
%put %sysfunc(putn('30OCT1965'D, 8.));
 /* Canonical convert SAS numeric date to human date: */
%put %sysfunc(putn(17325, DATE9.));
 /* Convert character constant datetime to character and SAS date to number in open code (easiest datetime converter conversion) */
%put %sysfunc(putn('30OCT1965:12:01:00'DT, 10.));  /* "10." instead of "8." to avoid "1.8399E8" */
%put %sysfunc(putn(183988860, DATETIME14.));

put "This string will print without any line breaks - this is a multiline
looooooooooooooooooooooooooooooooooooong string";

 /* Date format distributive with seemingly misplaced "=": */
put (mydt1 mydt1)(= DATETIME18.);

 /* Use text value as a marker to determine where input pointer goes next: */
input @'[' accdt DATE11.  @'GET' fnm :$20.;  /* read an Apache web log e.g. 130.192.70.235 - - [08/Jun/2004:23:51:32 -0700] "GET /rover.jpg HTTP/1.1" 200 668 */

WHERE company between 1 and 5; WHERE company contains 'oog'; WHERE company is null; WHERE company is missing; WHERE company like 'Go%'; WHERE company like 'Googl_';

 /* Range operator (order determined with help from proc contents;run;) */
proc print data=sashelp.shoes(obs=5) width=minimum; var Region--Returns;run;
proc print data=sashelp.shoes(obs=5) width=minimum; var Region-NUMERIC-Returns;run;
proc print data=sashelp.shoes(obs=5) width=minimum; var Region-CHARACTER-Returns;run;

fullname=catx(' ', fname, mname, lname);  /* gracefully concatenates any missing mnames */

data clear_var_format_informat_label; set SASHELP.shoes; format inventory; informat inventory; label inventory=; run; proc contents ; run;

 /* Note: must execute lag for every obs, do not use lag() in a conditional or results are unpredictable: */
if lag(foo) eq foo then put 'dup!' _all_;
if lag1(foo) eq foo then put 'dup!' _all_;  /* same */
 /* dif(bloodpressure) is the same as bloodpressure - lag(bloodpressure) */
if first.id and last.id then delete; diff_bp = dif(bloodpressure); if not first.id then output;  /* it's ok to calculate cross-id errors then toss  */

data OUTDIR.&OUTPUTFILE(compress=yes);

 /* Dataset to CSV file (macro ships with SAS) */
%ds2csv(data=sashelp.retail, runmode=b, csvfile=c:\temp\retail.csv);

 /* Name literal e.g. SAS/ACCESS database table or Excel worksheet has spaces in name */
options validvarname=any;
data mydblib.'My Staff Table'n; ...
input 'Amount Budgeted'n 'Amount Spent'n ...
 /* Name literal non pass-through: */
libname GDM_DIST oracle user=dgm_dist_R password=ead path=kuprd613 schema=gdm_dist readbuff=10000 preserve_col_names=yes; ... select t1.mat as 'Mat. Doc'N ...

 /* Single quotes for criteria, double for funky table naming */
libname mydblib oracle user=u password=p path='airdata' schema=airport preserve_names=yes; proc sql dquote=ansi outobs=9;  create table mydblib."Intl Delay" as select * from mydblib.internat; quit;

SAS82WIN=C:/PROGRA~1/SASINS~1/SAS/V8/sas.exe
SAS91WIN=C:/PROGRA~1/SAS/SAS9~1.1/sas.exe
SAS93WIN=C:/PROGRA~1/SASHome/SASFoundation/9.3/sas.exe
C:\Program Files\SASHome\SASFoundation\9.4\sas.exe

%let uniqueidentifierPID=&SYSPROCESSID;

proc sql; update sched set cost = CASE when dest eq 'YYZ' then cost-1 when dest eq 'FRA' then cost+1 else cost END; ; quit;

 /* proc report traffic lighting assuming proc format; value $bkres 'PASS'='Lime' 'FAIL'='Red'; run; */
define result / style(column)={background=$bkres.};

Adjust proc sql print width via:  SELECT foovar format=$5. FROM ...

 /* proc sql number like SAS obs NOobs */
proc sql; select monotonic() as Obs_Number, byte(monotonic()+96) as Obs_Letter, * from sashelp.class; quit;

 /* Simple gplot */
goptions reset=all ftext=swissl device=png cback=white border htitle=12pt ctext=gray gsfname=outpng gsfmode=replace ypixels=750 xpixels=750; filename outpng 'junk.png'; proc gplot data=linksplot; plot cnt*dt; run;
goptions ypixels=750 xpixels=950 ftext='Albany AMT' htext=0.80;
 /* Simple sgplot */
ods graphics / height=400 width=800 noborder; proc sgplot data=sashelp.cars; histogram msrp; run; proc print data=sashelp.class; run;

%put _all_; %goto THEEND; /*...stuff to be skipped...*/  %THEEND:

 /* SQL SAS enhanced, add a single quote tick to a large number to fake out Excel */
(CASE WHEN QURY0297.Output_MAT_COD IS NULL THEN QURY0297.Output_MAT_COD ELSE ("'"||trim(QURY0297.Output_MAT_COD)) END) FORMAT=$20. LABEL="foo" AS Output_MAT_COD,

select a.*, (CASE WHEN b.TotalEnrolledLst30 ne . THEN b.TotalEnrolledLst30 ELSE 0 END) as TotalEnrolledLst30

 /* Count number of files in directory */
%let rc=%sysfunc(filename(dr, 'C:/temp')); %let cnt=%sysfunc(dnum(%sysfunc(dopen(&dr)))); %put !!!&cnt;

 /* SQL set default if missing, same as CASE WHEN a IS NOT NULL THEN a ELSE b END */
select b.code, b.count, COALESCE(a.animal,'Unknown') as animal  /* set animal='Unknown' if missing */

 /* Iterate over an array: */
array a[*] foovar barvar bazvar; do i=1 to dim(a); if a[i]>maxn then maxn=a[i]; end;

 /* Enhanced date separator formats.  B blank  C colon  D dash  N none  P period  S slash.  The default YYMMDD10. inserts dashes. */
data _null_; d='04oct13'd; put d yymmddN8.;run;  /* 20131004 */
%let maxdate2=%sysfunc(putn("&maxdate"d, YYMMDDN8.));

 /* Canonical date convert from 08NOV2016 to 20161108 */
%put %sysfunc(putn("08NOV2016"d, YYMMDDN8.));
 /* Date convert libname e.g. /Drugs/RFREval/Ahold/2016/20161108/Dataset */
%let maxdate=08NOV2016; libname l "/Drugs/RFREval/Ahold/%sysfunc(putn("&maxdate"d, YEAR.))/%sysfunc(putn("&maxdate"d, YYMMDDN8.))/Dataset";

call missing(x1, x2, x3);
call missing(of n1-n3, of ch1-ch3);
do j=1 to 4; subj(j)=''; score(j)=.; end;  /* initialize array set to missing v8 */
call missing(of subj(*), of score(*));     /* initialize array set to missing v9 - don't care if NUM or CHAR */
call missing(of _all_);

 /* Exponentiation scientific notation: 1.257E+03 */

 /* Canonical proc format */
proc format; value traffic LOW-10='red'  11-20='yellow'  21-HIGH='green'; run;
proc format; value f_yr 50-59='50-59' 60-HIGH ='60+' ; run; agerange = put(age, f_yr.);

 /* Speed up Oracle SAS/ACCESS */
libname DGM_DIST oracle user=&username password=&password path=&database schema=dgm_dist readbuff=10000;
select * from ora_sas.customers(readbuff=10000);

%let cnt=1234; %put %sysfunc(putn(&cnt, comma.));  /* 1,234 */
%let cntfmtd=%sysfunc(putn(&cnt, comma.));

 /* Oracle libname */
libname DGM_DIST oracle user=&username password=&password path=&database schema=dgm_dist readbuff=10000;

 /* List datasets and details in library directory */
proc contents data=l.pqa_: ; run;

 /* Replace special chars with space */
do aa= 1 to 29 , 31 , 127 , 129 , 141 to 144 , 157 , 158; var1=tranwrd(var1,byte(aa), ' '); end; 

options fullstimer bufsize=8K bufno=5000;

 /* Sortable timestamp e.g. 20120507_1329 */
%let x=%sysfunc(compress(%sysfunc(today(),yymmddN8.)_%sysfunc(time(),hhmm6.), ': ')); 

 /* Canonical input statement  e.g.:  1 100 98 75  A A B 10jul2014 12jul2014 */
input id (apple orange banana) (:8.) (loc1-loc3) (:$1.) (mydate1-mydate2) (:date9.);

 /* Simpler if then else, ifn() is for numerics */
x2=ifc(x='Y', 'yes', 'no');
call symputx('cap', ifc(usecap eq '0', 'N', 'Y'));
if x='Y' then x2='yes'; else x2='no';

 /* Standardize addresses */
addr = tranwrd(addr, 'Street', 'St.');

ods trace on / listing;
ods output Freq.Table1.OneWayFreqs=l.t; ...; ods output close;
ods trace off;

proc import datafile="t.xlsx" dbms=xlsx out=t REPLACE; sheet='Sheet1'n; getnames=yes; run;

 /* Character to date e.g. 20150504 */
filerecdate=input("&CURRDT", YYMMDD8.);

 /* Force macro lib to close */
proc catalog c=work.sasmac1 force kill;quit;

 /* Choose macro variable default if better not available (or both exist) */
%let name=%sysfunc(coalescec(&default., &better.));

 /* Same as $ mkdir -p /home/bheckel/testdir.  No quotes! */
%let newdir=%sysfunc(dcreate(testdir, /home/bheckel/));

 /* Create nested dirs, alternative to dcreate() */
options dlcreatedir; libname res ("&outdir./results", "&outdir./results/images"); libname res clear;

 /* Avoid EG overwhelm bug: */
ods _ALL_ close; ods noresults; ods PDF file='t.pdf'; ...; ods PDF close;

 /* Skip non-PDF suffixed files */
if reverse(upcase(left(trim(myf)))) eq: 'FDP';

 /* Clean out delete WORK.  !SASHOME/bin/utilities */
/usr/local/SAS94/sashome/SASFoundation/9.4/utilities/bin/cleanwork /workspace
sudo /sas/sashome/SASFoundation/9.4/utilities/bin/cleanwork /saswork  # toggle -n on for dryrun 

 /* If string is quoted: */
%if (%qsubstr(%nrbquote(&file.), 1, 1) eq %str(%')) %then %do;

 /* Do not resolve macrovariables triggers '&' or '%' */
%let x=%nrstr(&a &b); %put &x;  /* &a &b */

 /* Remove any leading zeros: */
%macro rml0(var); substr(&var.,verify(&var.,'0')) %mend;

 /* Remove leading zeros from a char var before comparing */
clientstoreidNOZERO = substr(clientstoreidCHAR, verify(clientstoreidCHAR, '0'));
if substr(bin, verify(bin,'0')) in('4336') and substr(pcn,verify(pcn,'0')) in('MEDDADV') then boost=1;

 /* Count days */
sum(case when date(pickeduptimestamp) between '01MAR2015' and '31MAR2015' then 1 else 0 end) as Mar2015,...
sum(case when status='OPTOUT' then 1 else 0 end)/count(*) OPTOUT format percent8.2 as opt_rate

 /* Count number of distinct y values when x is less than 30: */
select count(distinct y) as unique_y, count(distinct case when x < 30 then y else . end) as unique_criteria

 /* Do something every 5 days using modulo: */
%let mod=%sysfunc(mod((%sysfunc(today())-"17JUN2015"d),5));  %if &mod eq 0 %then ...

 /* Where are SAS configuration files located: */
proc options option=config; run;

/sas/sashome/SASFoundation/9.4/perl/bin/perl -v

select a.*, case when b.chronic='Y' then 'Y' else 'N' end as chronic

put 'ERROR: dups exist ' name= (myvars:)(=);

# Start restart SASApp server. " - " to login as user sas with his environment:
$ sudo su - sas /sas/config/Lev1/sas.servers status  # or start or stop 

 /*                                                SASROOT _______________________________          */
 /* Use mine first in the autocall hierarchy.  SASAUTOS is /sas/sashome/SASFoundation/9.4/sasautos/ */
options mautosource sasautos=('.' '/Drugs/Macros', SASAUTOS);

 /* Replace old SAS left trim: */
select count(distinct cats(storeid,pharmacypatientid)) as UPID
select compress(a.storeid)||compress(a.pharmacypatientid) as UPID

 /* cat family */
cat(of x1-x3)      vs. x1||x2||x3
catt(of x1-x3)     vs. trim(x1)||trim(x2)||trim(x3)
cats(of x1-x3)     vs. trim(left(x1))||trim(left(x2))||trim(left(x3))
catx(SP, of x1-x3) vs. trim(left(x1))||SP||trim(left(x2))||SP||trim(left(x3))  /* SP can be ', ' */

 /* Concatenate using a delimiter - CATX is different in that it skips missing values - old version would do e.g. foo,,bar */
mycsv = catx(',', c1, c2, c3);

# Who is using up all SASWORK?:
sudo find /saswork -size +10G | sudo xargs ls -lh | awk '{print$5,$3,$4,$6,$7,$8,$9}'|sort -rh

 /* Set a blank label */
data p10j; set p10b p10c; label _TEMA001='00'x; run; proc print data=p10j LABEL; run;

proc sql noprint; select distinct cats('"',put(patient_dob,date9.),'"d') into :dob1 -  :dob&ndob.  from subset_hp_npi; quit;

 /* Canonical SAS if then else */
if region eq 'Asia' then put 'foo'; else put 'bar';

rc=system('/bin/bash /Drugs/xron/Daily/FredsImm/fredsimm.sh 2>/Drugs/xron/Daily/FredsImm/fredsimm.err');

 /* Perl prx regex in SAS */
description= prxchange("s/Remove Patients (From)? //", -1, description);  /* Remove Patients From Non-Pilot Stores -> Non-Pilot Stores */
description= prxchange("s/Remove Patients ((From)?|(Under)?) //", -1, description);

if prxmatch('/((\(\d{3}\) ?)|(\d{3}-))?\d{3}-\d{4}/', ph) then type='valid phone number';

data t; set SASHELP.shoes; if _N_ eq 1 then re=prxparse("/merica$/"); retain re; if prxmatch(re,region); run;

/* Remove non-standard characters e.g. ApotPhar@SnS: */
short_client_name=prxchange('s/[^A-z0-9-_]//', -1, short_client_name);

 /* Convert multiple spaces to single: */
cityst = prxchange('s/\s+/ /', -1, TMPcityst);

 /* Convert Unix path spaces in name to backslash space escapes via regex: */
%let reportlocation_escaped=%sysfunc(prxchange(s/ /\\ /, -1, &reportlocation));
 /* Pick off end of string extension /foo/bar/baz is baz (Note no quotes!) */
%let RFDPATH=/Drugs/RFD/2016/02/AN-3097; %let RFD=%sysfunc(prxchange(s/(.*)\/(.*)$/$2/, 1, &RFDPATH));

 /* Parse search replace capture first part of string via regex: */
%let clientname=%sysfunc(prxchange(s/(.*) - .*$/$1/, -1, &clientfolder));

 /* Canonical regex string substitution substr tranwrd replacement: */
description=prxchange('s/MTM Program//', -1, description);

 /* Reverse two names */
name=prxchange('s/(\w+), (\w+)/$2 $1/', -1, name);

if prxmatch('/toyota|kia|honda/i', text) then type='Import';

prxparse (compile regex that can later be used for searching within a character value) similar to using qr{} or /o with a regexp search
prxmatch similar to mystr =~ /perlregex/  prxparse is optional for this function
prxsubstr (return position and length of where a regexp matches in source) similar to source =~ /perl-regex/g; start = pos source; length = length $&;
prxnext (return position and length of where a regexp matches in source starting at start and ending at stop) similar to using the /g and /c options
prxparen (return the last number of the last submatch that matched) similar to $+
prxchange similar to old-string =~ s/perl-regexp/replacement/
prxposn return position of paren capture buffers, then use substr()

 /* Fix mask loose single quote apostrophe e.g. 123O'LEARY or O'NEAL in query using regex prior to enquoting it by doubling it for Postgres etc: */
select prxchange("s/'/''/", -1, upid) as upid  /* -1 is replace every occurrence */

 /* Instream regex conversion e.g. x < y = 5 becomes x &lt; y = 5 */
data; input; _INFILE_ = prxchange('s/</&lt;/', -1, _INFILE_); cards; x < y = 5; run;

 /* Macro does a dataset exist?: */
%let dsexist=%sysfunc(EXIST(sashelp.zipcode));

%let thispgmname=%sysfunc(getoption(SYSIN));

 /* Zero pad a char that looks like a number to 4 leading zeros: */
data _null_; x='04'; y= put(input(x, BEST. -L), Z4.); put y=; run;
... din2=put(input(din,8.),Z8.);  /* char 2 to 00000002 */

 /* Canonical email send: */
filename MAILTHIS email ('bob.heckel@taeb.com')  subject='test' ; data _null_; file MAILTHIS; put 'ok'; put; run;
filename MAILTHIS email ('a@foo.com' 'b@foo.com') cc="&user@foo.com" subject="&clientname" attach=("&loc/&fn" "&loc/&fn2"); data _null_; file MAILTHIS; put 'ok'; put; run;

 /* Build a single quoted string for Oracle, Postgres etc (but FAILS with leading zero numbers, try ndc::integer or see alternative build_db_query_list_via_macro.sas): */
proc sql; select ndc into :medlist separated by ',' from l.t; quit;  data _null_; call symput('medlist2', catq('1AC', &medlist)); run;

 /* Rename a dataset's variable: */
proc datasets lib=work; modify stores; rename clients_fkid=clientid; run;

ODS PATH work.templat(update) sasuser.templat(read) sashelp.tmplmst(read);
 /* ERROR: Template 'Tagsets.Msoffice2k_x' was unable to write to template store!  Use: */
ODS PATH (prepend) work.templat(update);

 /* List all filename reference filerefs: */
filename _ALL_ list;

 /* Find autoexecs via $ sas ... -rtrace all -rtracelog myrtrace.log */
/sas/sashome/SASFoundation/9.4/autoexec.sas
/sas/config/Lev1/SASApp/appserver_autoexec_usermods.sas

 /* Is phone number valid based on length flag: */
select patientphonenbr, case when length(patientphonenbr)=10 then 1 else 0 end as validPhoneFlag from t;

 /* Indicates your .map file is missing: ERROR: XML describe error: . */

 /* Only dates in the last 365 days: */
where mydate >= date()-365

 /* Canonical macro do while space-separated list loop iterate without an index counter: */
%let i=1; %let clid=%qscan(&clientid_ind, &i, %str( )); %do %until ( &clid ne %str( ) ); ...  %let i=%eval(&i+1); %let clid=%qscan(&clientid_ind, &i, %str( ));

 /* Loop a range of SAS dates: */
%let start=%sysfunc(inputn(12DEC2015,ANYDTDTE9.)); %let end=%sysfunc(inputn(14DEC2015,ANYDTDTE9.)); %let nday=%eval(&end-&start); %do j=0 %to &nday; ... %end;

 /* Missing dot to zero: */
select a.*, (case when b.TotalEnrolledLst30 ne . then b.TotalEnrolledLst30 else 0 end) as TotalEnrolledLst30 from t1 a LEFT JOIN totenr30 b on a.clientid=b.clientid

 /* Date convert single quote macro '2015-10-01' for Postgres, etc. */
%put %bquote(')%sysfunc(putn(%sysfunc(inputn(20151001, YYMMDD8.)), YYMMDD10.))%bquote(');
%let comment=%str(Important: Humana Adherence Outlier Patient);
%let commentq=%sysfunc(catq('1AC', &comment));
 /* Enquote single quote a macro variable NOTE sometimes double quotes, use catq!: */
%put %sysfunc(quote(&foo, "'"));

 /* Date format convert 22FEB2016 to 20160222 in macro: */
%let mydt=%sysfunc(putn(%sysfunc(inputn(&SYSDATE, DATE9.)), YYMMDDN8.));
 /* SYSDATE to dashes 2016-02-22 */
%let mydt=%sysfunc(putn(%sysfunc(inputn(&SYSDATE, DATE9.)), YYMMDDD10.));

 /* Comment out keybinding in EG: Ctl+/  Uncomment in EG: Ctl+Shift+/ */

 /* Unlike input(), determine informat at runtime based on a flag: */
else if flag=3 then chardata=inputc(char_data,"$UPCASE22.");
else if flag=3 then sasnumdate=inputn(char_date,"YYMMDD10.");
fmtd = inputc(letter, put(digit, myfmt.));

 /* Create composite proc sql index: */
proc sql; create index places on sql.newcountries(name, continent); quit;

 /* Command line SAS with an option set: */
/sas/sashome/SASFoundation/9.4/sas -nodms -validvarname any
endsas;

 /* Week number starting with Mon thru Sun */
data; weeknum=week("&sysdate"d, 'W'); put weeknum=; run;

 /* Month number */
monthnum=month(datepart(lastmodifieddt));

 /* Write a csv file using ODS: */
ods CSVALL file='/Drugs/TMMEligibility/ClarksRxBo/Imports/t2.csv'; proc print data=sashelp.cars; run; ods CSVALL close;
proc export outfile="&path.&sp_name./&jobtype./&daten_exec./Output/imm_del_&daten_exec._&clid._&type..csv" data=del_&type dbms=dlm replace; delimiter='|'; putnames=no; run; 

 /* Append a record to end of dataset: */
data weekcnt; set weekcnt end=e; output; if e then do; clientstoreid='999'; weeknum=6; output; end; run;

 /* datetime to date */
select clientstoreid, put(datepart(lastmodified), DATE9.) as dtlastmodified, count(*)
select put(max(filldate), DATE9.) as humandate

 /* Conditional minimalist send email from datastep or macro: */
%if %sysfunc(attrn(%sysfunc(open(error_count)), NLOBSF)) gt 0 %then %do; %put ERROR: QC fail; data _null_; to='bob.heckel@taeb.com'; file DUMMY email filevar=to subject="Error during &SYSPROCESSNAME execution"; run; %end;
if rc1 eq 0 then do; put 'NOTE: chmod successful'; end; else do; put 'ERROR: chmod fail'; to='obb.heckel@taeb.com'; file DUMMY email filevar=to subject="Error during %sysfunc(getoption(SYSIN))"; end;

x umask 000; data l.junk;set sashelp.shoes;run;  /* -rw-rw-rw-. 1 bheckel staff 128K Feb 23 16:04 /mnt/nfs/home/bheckel/junk.sas7bdat */
x umask 777; data l.junk;set sashelp.shoes;run;  /* ----------. 1 bheckel staff 128K Feb 23 16:06 /mnt/nfs/home/bheckel/junk.sas7bdat */

 /* Skip non-PDF files check file extension: */
if reverse(upcase(left(trim(f)))) eq: 'FDP';

 /* SAS performance tuning: */
1-For nominally good SAS I/O performance, you should see job steps in your SAS logs with combined CPU + User CPU time within 10% of the Real Time.
2-As a general rule, the User CPU Time value added to the System CPU Time value should be fairly close to the Real Time value. If the Real Time value is much higher, as it is in this example, then you have a problem that needs to be corrected. 

 /* Append export write Excel worksheet to an existing multi tab workbook: */
PROC EXPORT DATA=sashelp.prdsale OUTFILE="t.xlsx" DBMS=XLSX REPLACE; SHEET="PRSALE"; RUN;

 /* SAS EG default port is 8561 */

 /* PC SAS clear previously compiled macros before rerunning - pick up changes to called macro during debugging: */
proc catalog cat=work.sasmacr; delete mailteam / et=macro; quit;
 /* SAS EG clear previously compiled macros before rerunning - pick up changes to called macro during debugging: */
proc catalog cat=work.sasmac1; delete mailteam / et=macro; quit;

 /* Print a SAS catalog: */
proc catalog cat=work.sasmac1; contents out=new; run;

 /* Show how SAS has translated your SQL:  NOTE: Statement transforms to: */
proc sql FEEDBACK; ...

select clientid, storeid, pharmacypatientid, max(greatest(solddate,filldate)) as max_solddate, max(solddate+dayssupply) as next_visit, max(solddate+dayssupply)-CURRENT_DATE as duedays, max(solddate)-CURRENT_DATE as recent_visit from rxfilldata_parent ...

 /* Choose cgid if populated otherwise use default of 0: */
put(coalesce(cgid,0),8.);

 /* Convert date today macro date now to human formatted e.g. 20161109: */
%let today=%sysfunc(date(), YYMMDDN8.);

 /* Collapse multiple rows flatten multiple rows to single row one row: */
data xx; update xx(obs=0) xx; by idnum; run;

 /* Send stderr to file: */
rc1=system("/Drugs/Cron/Daily/AholdImm/aholdimm.sh &path./foldername/Output/Imm_.csv 2>/Drugs/Cron/Daily/AholdImm/Aholdimm_encrypt.err");

 /* Count number of variables named flag_* */
proc sql; select count(*) into :nvars TRIMMED from dictionary.columns where libname='WORK' and memname='MYDS' and name like 'flag_%'; quit;

 /* Add 1 to each variable var_N */
data t; set t; array arr var_:; do over arr; arr+1; end; run;

 /* Take the 90th thru 100th obs only, a semi-random pull: */
proc print data=_LAST_(firstobs=90 obs=100) width=minimum heading=H;run

 /* SQL on one not on the other: */
proc sql; create table on_cce_not_softdel as select a.* from cce a left join softdel b on a.aid=b.aid where b.id is null; quit;

 /* Pass OPTIONS at SAS startup: */
export SASV9_OPTIONS='-validvarname=any'
proc options;run;

 /* Postgres cast to fix rogue string in an integer-like field problem: */
and (clientid=&clid. or (case when npi in ('NOT FOUND','') then '0000000000000000000000' else NPI end)::integer in (&&cl_npi.))

where (age>=18 and age<=80) and (filldate>=date()-90)

 /* Avoid proc graph GUI from popping up at each slide produced: */
goptions NOdisplay;

 /* Zero pad a character var that looks like a numeric: */
select put(input(storenum,4.),z4.) as clientstoreid, ...

 /* Delete obs if all vars are missing: */
options missing=''; ... if missing(cats(of _ALL_)) then delete;

 /* Double ampersand macro resolution: */
%let n=3; %let x3=thisprints; %put &&x&n;
 /* Triple ampersand macro resolution: */
%let x=temp; %let n=3; %let temp3=thisprints; %put &&&x&n;

 /* Use bang for temporary directory: */
filename mytemp '!temp/t.txt';
infile '!userprofile/t.txt';  /* Windows */

if anyfirst(x) then put 'valid first char for varname when validvarname=V7'
if anyfirst(x,3) then put 'valid third char for varname when validvarname=V7'
if notfirst(x) then put 'invalid first char for varname when validvarname=V7'

if holidaytest('Christmas', today()) then put 'merry xmas'

 /* Read excel: */
proc import datafile="/Drugs/RFD/2017/05/AN-7578/Dataset/RX30_site_list_20170509.xlsx" dbms=xlsx out=t0 REPLACE; sheet='Pharmacy Breakout'n; getnames=no; datarow=4; run;

 /* The ANY string functions: */
x = '?$%'; none = anyalpha(trim(x));  /* returns 0, no alpha chars exist */
x = '?$%'; none = anypunct(trim(x));  /* returns 1, the question mark */

data.filter1(rename=(pharmacypatientid=pharmacypatientid_old))

 /* If we store a floating point in 4 bytes (length x4 4; input x4;) we lose precision when SAS brings it into PDV because SAS adds 4 bytes of zeros */
if x4 = trunc(1.234, 4) then compare_a_4bit = 'true';  /* so we must use trunc() */

 /* Generate random temperatures in Farenheit */
call streaminit(12345); x=rand('NORMAL',70,10);

 /* Sort within an observation */
call sortn(of Score1-Score5); MeanOfTopThree = mean(of Score3-Score5);

moving_avg = mean(x, lag(x), lag2(x));

call symput('THISMONTH', strip(month(today())));
 
 /* Have multiple filldates but want only the most recent fill highest date of each patient's ndc */
proc sort; by upid ndc filldate; run;
data t2; set t; by upid ndc; /* if pharmacypatientid='pmap538502' then put _all_; */ if last.ndc then output; run;

ods powerpoint file="~/bob/t.pptx"; title 'demo pptx'; proc print data=sashelp.class(obs=5); run; ods powerpoint close;

 /* Remove blank lines from text file: */
data _null_; rc = system("sed -i '/^$/d' ~/bob/tmp/mnt/nfs/alertproc/gap_add_20170802_8.csv"); run;

 /* Cheat at Oracle Postgres passthrough proc sql avoid db-specific syntax resolve macrovariable inside single quotes: */
%bquote(')%sysfunc(putn(%sysevalf("&SYSDATE"D+30),YYMMDDN8.))%bquote(') as expirationdate,

 /* num2char */
data data.delete; set activealerts(rename=(taebpatientid=TMPtaebpatientid)); taebpatientid=put(TMPtaebpatientid, $8.); run;

 /* If macro date is between 30AUG2017 and 28FEB2018 */
%if (%eval("&sysdate"d > "29AUG2017"d) eq 1) and (%eval("&sysdate"d < "28FEB2018"d) eq 0) %then %do; ...

ods pdf file="/Drugs/TMMEligibility/&clientfolder./Imports/ClientQC_&Cname." startpage=no; ods pdf text = "^{newline 4}"; ods pdf text = "^{style [just=center] Gender}"; proc sql; select patientgender,count(*) from work.qc_status group by 1 order by 1; quit;

 /* Create ds if percentage of sex is bad: */
proc sql; create table patientphonenbr_err as select distinct (select count(*) from qc_status where length(patientphonenbr) ne 10) / (select count(*) from qc_status) as pct from qc_status having pct gt 0.05 ; quit;

 /* Pipe delimited file: */
proc export outfile="&path./&sp_name./&jobtype./&daten_exec./Output/&sp_name._TMM_candidates_fdw.csv" data=TMM.fnl dbms=dlm replace; delimiter='|'; putnames=no; run;

 /* Convert numeric SAS date to single quoted string for Postgres: */
dobq = quote(put(dob, yymmddd10.), "'");

 /* This month's number: */
%put %sysfunc(month("&SYSDATE"d));

proc ds2; thread thr / overwrite=yes; method run(); set { select  a.*, coalesce(b.gpi,a.productid) as gx, b.drugname as dx from l.rxfilldata as a left join l.medispan as b on a.ndc=b.ndc_upc_hri }; end; endthread; run; quit; proc ds2 scond=error; data rxfilldata0; declare thread thr thr_instance; method init(); end; method run(); set from thr_instance threads=4; end; enddata; run; quit;

 /* Check does macrovariable &checkme exist: */
%if not %symexist(checkme) %then %do; ...

 /* Date-stamp datestamp SAS logs: */
for f in /foo/t.sas /foo/t2.sas; do BASENM="${f%.*}"; /sas/sashome/SASFoundation/9.4/sas -sysin "$f" -log "${BASENM}.log" -altlog "${BASENM}.`date +%a`.log" -print "${BASENM}.lst"; done;

 /* Load macrovariable directly from database: */
libname db8 ODBC dsn='db8' schema='client' user=&user. password=&password.; %global sname; proc sql NOprint; select distinct shortname into :sname TRIMMED from db8.client where clientid = &clid ; quit;

libname jasper ODBC dsn='db6dev' schema='public' user=&user password=&pw; proc sql; insert into jasper.dashboardclients ( clientid ) select * from t; quit;

 /* Read in macrovariable date using informat and convert to SAS date */
%let date = 20151001; %let sasDate = %sysfunc(inputn(&date, yymmdd8.));

 /* Human date to epoch number */
numdate = inputn(strip(chardate), 'DATE9.'); 

 /* Is it this specific day date of month: */
%if %sysfunc(day("&sysdate"d)) eq 30 %then %do; ...

 /* Loop date range producing formatted dates: */
%let start=%sysfunc(inputn(12DEC2015,ANYDTDTE9.)); %do j=0 %to 5; %let myd = %sysfunc(putn(%eval(&start+&j), date9.)); %put &=myd; %end;

if product eq vname(a[i]) then do; ...
call vname(a[i], breakfast);  /* new var breakfast filled with former var names in the array loop */

filename FINDPIPE PIPE "find &path./&cl_foldername./ExternalFile/PE/ -type f -maxdepth 1"; data _null_; infile FINDPIPE PAD; input fn $200.; if _N_ eq 1 then call symput('FNM', fn); run;

select "%sysfunc(putn(%sysevalf("&SYSDATE"d),yymmddn8.))" as earliestdate, ... /* 20180125 */
select "%sysfunc(putn(%sysevalf("&SYSDATE"d+90),yymmddn8.))" as expirationdate, ... /* 20180425 */

fuzzydifferencescore=compged(compress(lookup,' ,.'),compress(organization,' ,.'),'i');

if Age = . then ...
if missing(Age) then ...  /* better, same for char & nums */
If Nm = ' ' then ...
if missing(Nm) then ...  /* better, same for char & nums */

 /* Find first position of a substring e.g. abczyx1xyz */
data t; input String $10.; first=find(String,'xyz','i'); /* 8 */ first_c=findc(String,'xyz','i'); /* 4 */ ...

Phone2 = compress(Phone,'(-) ');  /* (919) 123-4567 to 9191234567 */
Phone3 = compress(Phone,,'KD');  /* better (919) 123-4567 to 9191234567 */

count_of_Y_survey_responses = countc(cats(of Q1-Q5),'y','i');

 /* Debug options */
options source NOcenter dsoptions=note2err msglevel=n nostsuffix sastrace=',,,ds' sastraceloc=saslog sql_ip_trace=source dbidirectexec; 

data subset; if _N_=1 then do; declare hash h(dataset:'small'); h.defineKey('id'); h.defineDone(); end; set large; if h.find() = 0 then output; run; 

 /* Duplicate an obs and make a change to one of the vars: */
data ntfct; set ntfct; if _n_ eq 2 then do; output; drugname='foo'; output; end; else output; run;

 /* Change dataset encoding: */
proc datasets library=l ; modify pqa_statins_in_diabetes/correctencoding='utf8'; quit;

data _null_; rc=system('psql -h db-06.twa.taeb.com TAEBMART -c "\COPY dshbrd.hppatientstarpdc(taebpatientid, measurementid) FROM ''/tmp/dashboard_copy.csv'' WITH (FORMAT CSV, DELIMITER '','');"'); if rc ne 0 then put 'ERROR: INSERT failure' rc=; run;

-- Postgres copy table:
rc=system('psql -h db-06.com TAEBMART -c "\COPY dshbrd.hppatientstarpdc(taebpatientid, measurementid, healthplanid, measurementstartdt, measurementenddt, pdcscore, targeted, clientid, pmapstoreid) FROM ''/tmp/dashboard_copy.csv'' WITH (FORMAT CSV, DELIMITER '','');"');

 /* Pseudo IN() list operator for macro in list */
options minoperator; %macro m/mindelimiter=','; %let rm_enrolled=Y; libname data '/Drugs/TMMEligibility/Delhaize/Imports/20180403/Data'; %if %sysfunc(exist(data.enrolled)) and (&rm_enrolled in Y, 1) %then %do; %put !!!ok; %end; %mend;%m;
options minoperator; %macro m/mindelimiter=','; %let clid=9; %let v2clids=1,2,3; %if &clid in &v2clids %then %do; %put !!!ok; %end; %mend;%m;

 /* Zero padded month number digits in macro: */
%let m = %sysfunc(month("&sysdate"d),z2.);

 /* Direct connection without dsn tagging: */
connect to postgres as myconn (user=&user password=&password database=taeb server='db-9.aeb.com' readbuff=7000);

proc sql; connect to odbc as myconn (user=&user password=&pw dsn=jasp readbuff=7000); EXECUTE ( update analytics.mtmtargeted set lasttargetdate=%bquote(')&date_max.%bquote(') where taebpatientid in (&taebpatientids)) by myconn; disconnect from myconn; quit;

 /* Resets option to user's choice at end of program */
proc sql; select setting into :TMPMPRINT from DICTIONARY.options where optname='MPRINT'; quit; options NOMPRINT;
%if &TMPMPRINT eq MPRINT %then %do; options MPRINT; %end;

 /* When coworker decides to call a dataset 'label'...: */
options DATASTMTCHK=COREKEYWORDS;

%let bm_previous=%sysfunc(intnx(MONTH, "&SYSDATE"d, -1, B),YYMMDDN.); data _null_; if fileexist("/Drugs/TMMEligibility/BRStores/Dashboard/&bm_previous") then put 'previous month folder directory exists'; run;

libname atlas cas caslib="MKC - Atlas (DNFS)" datalimit=ALL; proc print data=atlas.diball(obs=10);run;

%put &SYSTCPIPHOSTNAME; /* hostname */

proc sql NOPRINT; /* don't apply labels */

xxSASxx END:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:

xxUNIXxx START:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: {{{1

# Canonical date stamp:
date +%d%b%y  # 31Mar16 like SAS DATE7.
TODAY=`date +%Y%m%d`  # 20160331

# Find newish file that is not empty zero bytes:
ssh tpsh005 find /home/gaaadmin/GAAAdapter/gaa/logs -name 'InspectionRes*error*' -mtime -7 -a -size +0

# Specify different user to login as:
ssh -l root 192.168.0.108

# Poor man's copy cp:
$ cat <original.txt >duplicate.txt

# Remove or uninstall accidentally untarred mess from a directory.  Tar undo.
$ tar xvfj ~/w3m-0.5.2-2.tar.bz2  # original extraction
$ tar -tf ~/w3m-0.5.2-2.tar.bz2 | xargs rm -v  # reverse untar mistake

# Direct data to one file and errors to another:
(cat bladerun_crawl.txt nosuchfile.txt > bladerun_crawlcontents.txt) 2> errmsgonly.txt

# Keep a record of software installation:
$ ./configure 2>&1 | tee log.configure
$ apt-get upgrade | tee ~/tmp/apt-get-upgrade-$(date +%F).log
$ make 2>&1 | tee build.log
# To append further log to build.log, continue with:
$ make modules 2>&1 | tee -a build.log

# Copy everything (except dot files) in a dir except for one file (smb.txt in this case):
cp /notathome/[^smb.txt]* /foodir

# Copy everything (including dotfiles & dot directories!) downward. /copiedtohere must exist first.
cp -R .* /copiedtohere
# Copy everything (including dotfiles & dot directories!) downward. /copiedtohere need not exists, it is created.
cp -R ~/copiedtohere .

# Don't show .c files
ls *[^c]
# Don't show files starting with a OR b
ls [^ab]*

# Compact move instead of the traditional  mv /usr/bin/foo /usr/bin/foo.bak 
mv -i /usr/bin/{foo,foo.bak} 
# or backup a file quickly:
cp myfilename{,.bak}

# Count how many directories (not including files, don't recurse):
\ls -ld * | grep "^d"| wc -l
# or
\ls -ld | awk '{if (/^d/) print $9}' | wc -l
# or print names of dirs
\ls -l | awk '{if (/^d/) print $9}'

# Count number of letters, etc. on the fly (-n skips automatic newline):
echo -n 'count me' | wc

# Count how many Vim Scripts use ``execute''?:
$ find /usr/local/share/vim -type f -name \*.vim -exec grep -l '\<exe\(c\(u\(te\?\)\?\)\?\)\?\>' {} \; | wc -l

# Enable readline on command line:
set -o vi

# Reset terminal: 
echo CTRL-V ESC c 
stty sane
stty erase ^H  # or stty ^?
# Turn off echoing of keystrokes (stty echo to turn back on)
stty -echo  

# List contents of file, breaking it up into one word per line:
cat foo.txt | xargs -n1

# Keep checking on dead server with a shell do-loop:
while true; do ping -n 2 mainframe; date; sleep 600; done;
while : ;do ping 47.143.212.20; sleep 600; done
# Infinite loop from the command line:
while [ true ]; do date; sleep 10; done;

# Canonical shell do loop.  Do something in a loop 3 times:
$ for i in 1 2 3; do echo 'bash loop'; sleep $i; done

rcp foo.txt zrtph128:/home/rheckel/tmp

# On the REMOTE Unix box:
$ /usr/X11R6/bin/xhost +daeb  # sometimes required to be run on LOCAL MACHINE
# On the LOCAL PC:
$ export DISPLAY=47.143.210.171:0.0  <---sometimes leave off the last .0
$ /usr/dt/bin/netscape &
# or one-shot on LOCAL machine (assuming X-server is running on PC):
$ export DISPLAY=158.111.250.163:0.0 && mozilla&
# Test it:
/usr/bin/X11/xterm

# crontab -e fields: min hr day mon wkday(0=Sun,6=Sat)

# Run cron job on last day of every month
00 07 28-31 * * [[ $(date -d +1day +\%d) -eq 01 ]] && echo 'james script will be ok at 500 today' | mailx heckel@gmail.com
# Run cron job every 30 minutes:
5,35 * * * * /usr/bin/dfmon
# Run cron job every Saturday & Sunday at 3:59am 4:59am 5:59pm
59 3,4,17 * * 6-7 /bin/df -h 

# When a script is started from cron and anything is sent to STDOUT it will either get logged in the system messages file or emailed.  To prevent this:
5 0 * * * /usr/bin/disk_hogs > /dev/null 2>&1
# Avoid cron email on cron output (use logfile instead):
59 * * * * /usr/bin/fooprg >> /home/rheckel/fooprglog.txt 2>&1

59 5 6 * * mailx -s "Automated reminder from Bob" aendbmom@yahoo.com </arpa/af/b/rheckel/mailxmsg.txt

# Watch file sizes using cron and email every day at 2:05
5 2 * * * find /apache/logs/access_log -size +10000000c  | mailx -s "file is getting too big" admin@foo.com
# Rotate if filesize is half a gigabyte or larger:
15 4 * * * find /opt/apache/logs/access_log -size +500000000c && /opt/bin/rotatelog

30 09,15,20 * * * grep http /home/chronos/user/Bookmarks | awk '{print $2}'| sed 's/"//g' | sed 's/$/<BR>/' >| /home/chronos/user/Dropbox/Public/Equanimity/bm.html 2>|/home/chronos/user/cron.log

# cron every other week (errors at EOY):
49 15 * * 3 [ `expr \`date +\%V\` \% 2` -eq 0 ] && ~/crontest.sh

# Human readable disk space Solaris
df -h
# Human readable disk space HPUX
bdf
# Top CPU users HPUX
UNIX95= ps -eo user,pid,pcpu,comm | sort -nrbk3 | head -10

# Poor man's cron bash.  Trigger at 4:00-4:59pm:
while true; do if [ `date +%H` -eq 16 ];then echo 'ok';fi; sleep 60; done
# Poor man's cron ksh.  Trigger at 4:00-4:59pm:
while [ 1 ]; do if [ `date +%H` -eq 16 ]; then date; fi; sleep 60; done;
# Poor man's cron.  Trigger at 8:11
while true; do if [ `date +%H` -eq 8 -a `date +%M` -eq 11 ];then echo 'ok';fi; sleep 60; done
# Poor man's cron.  Do NOT trigger the 4 o'clock run when I might be undocking
while true; do if [ `date +%M` -eq 20 -a `date +%H` -ne 16 ];then date;datapost_check.sh; fi; sleep 60; done
# Poor man's killer cron - closes rxvt when done
while true; do if [ `date +%H` -eq 16 ];then /bin/kill 1035;exit;fi; sleep 59; done

# Determine IP address on Unix:
ping `hostname`
# or determine IP address on Unix:
who -u
# or determine IP address on Unix:
grep `hostname` /etc/hosts | awk '{ print $1 }'
# or determine IP address on Unix:
ifconfig | grep "inet addr" |  grep -v "127.0.0.1" | awk '{print $2;}' |  awk -F ':' '{print $2;}'

# Start (stop, restart) Samba on RedHat:
/etc/rc.d/init.d/smb start
/sbin/service smb status

# Restart Apache if can't find apachectl
kill -HUP `cat /apache/logs/httpd.pid`
# Restart Apache more gracefully
/usr/local/apache/bin/apachectl restart

# Send one program's STDIN to another's STDOUT using a pipe with no name.
$ mkfifo foo; cat foo
# In another xterm
$ cat > foo                   # and start typing
# or
# cat >/mnt/floppy/brewery    # and start typing

$ kill -9 `ps -aef | grep user_jondoe | awk '{print $2}'`
for p in `pgrep httpd`; do kill -9 $p; done
# Kill several related processes at once:
ps | grep httpd | awk '{print $1}' | xargs kill -9

# Kill all LIMS users:
ps -es | grep lms_client_techops | while read pid; do echo $pid kill -9 $pid; done

# Instead of doing a ps -ef to know the pid and kill it manually every time:
$ kill `ps -ef | grep \`whoami\` | grep myProcess | grep -v grep | awk '{print $2}'` 

# If killall isn't working find pid:
for p in `pgrep smbd`; do kill -9 $p; done

# Kill fscking Norton antivirus
winkill `ps -W | grep rtvscan | head -n1 | awk '{print $1}'`

# Create a ~500MB (~500,000,000 bytes) dummy file of garbage (like mkfile) that is a specific size in bytes:
#                             ea block   num blocks
dd if=/dev/zero of=biggarbage bs=50000 count=10000
dd if=/dev/zero of=biggarbage bs=100000 count=10000  # gigabyte

# chmod: 4 Read  2 Write  1 eXecute  (User, Group, Others (neither U nor G), All)
# For directories, 'read' permission is necessary to ls directory's contents.
# For directories, 'write' permission permits adding, removing, and renaming files in that directory
chmod +t pub/  # assumes  chmod o+x pub/  happened earlier
# For directories, 'execute' permission is sometimes called 'search' permission and is necessary to actually cd to it. Others must know the name of the file.
# You can ordinarily delete a file if you have write access to the directory that contains it, even if you are not the file's owner - if you only want to permit adding or deleting of a user's own files, set the poorly-named sticky bit (common for /tmp):
chmod 701 semiprivate/  # drwx-----x so ls -l semiprivate/ fails but ls -l semiprivate/foo.txt works
# Set UID, setuid.  As root:
chmod +s anyonecanrunthisvirus
# or (maybe better)
chmod 4755 anyonecanrunthisvirus
# Enable all world to run command:
chmod a+x runvirus.sh
# Recursive:
chmod -R 755 .

# Use a remote file as a template:
#             -------remote----------   --local--
rsh zrtph128 'cat /home/rheckel/junk' | vi -

# Size of directory:
$ du -sh ~/tmp

# Top 20 largest diskhog files AND directories:
sudo du -sh /saswork/* | sort -rn | head -n20 | awk '{print $2}' | xargs sudo ls -dl  # must use the '*' or get dir tot only
for i in *; do du -sh $i; done | sort -rh | head -n20  # best

for i in `find /Drugs/Personnel -maxdepth 1 -type d`; do du -sh $i; done | sort -hr

# Total size of each item (directory) in CWD and sort numerically diskhogs:
for i in `find . -type d`; do du -sh $i; done | sort -n
# Troubleshoot a disk full error (find the largest big offending file):
find / -type f -size +1000000c -exec ls -l {} \; 2>/dev/null | grep -v "/proc"
find /workspace -type f -size +50G -exec ls -lh {} \;

# Troubleshoot find largest file:
find ~/tmp -size +1M | xargs ls -lh | awk '{print$5,$3,$4,$6,$7,$8,$9}' | sort -rh
cd ~/tmp; du -sh * | sort -h
# Largest temp files:
for i in `find ~/tmp`; do du -sh $i; done | sort -hr |head -n75

# Find files in the /tmp directory that are larger than 10 megabytes (10 million bytes) that have not been modified in the last 48 hours:
find /tmp -size +10000000c -and -mtime +2

# Use the rotate utility if a logfile gets to be 2MB or larger:
find . -name access.log -size +1900000c -exec rotate {} \;

# HP-UX System Admin Tool -- sam
# Solaris Administration Tool -- admintool or sam
# Solaris top is prstat

# The first tar command creates (cf) an archive of thedir and places it into a buffer, instead of creating a file or writing it off to a tape. While the data is in the buffered area (-), it is sent to the remote host. When the data arrives at the remote host, the command changes to the directory /home and begins to extract ( xvfB) the contents of the archive from the buffer where it resides.  (B) is used for blocking and should be used to prevent data loss across the network:
tar cf - tar_me | rsh theotherserver '( cd /home/rheckel/todel; tar xvfB - )'

# Backup workbox code changes each weekday (where code/ is mounted, not symlinked) using a sentinel:
(cd; touch .sentinel -d 'last monday 7am'; find code -type f -not -name '*.sw[op]' -daystart -newer .sentinel | xargs tar cvfz ${HOSTNAME}.tgz)
# Update code from emailed tgz on one of the homeboxes
(cd; tar --extract --verbose --gzip --keep-newer-files --file=ZEBWL10D43164.tgz)
# Backup homebox code since last "sync".  From any dropbox-aware box.
(cd; touch -d 'last friday 16:30' .sentinel && find -L code -type f -not -name '*.sw[op]' -newer .sentinel | xargs tar cvfz ${HOSTNAME}.tgz)
# Midweek backup homebox code (since last "sync").  From box the last untar occurred on.  ASSUMES tgz timestamp isn't from email save time.
(cd; find -L code -type f -not -name '*.sw[op]' -daystart -newer ZEBWL10D43164.tgz | xargs tar cvfz ${HOSTNAME}.tgz)

# passwd format
#    0        1          2          3        4      5       6
# Username:Password:Userid_Num:Groupid_Num:Gecos:Home_Dir:Shell

# Get basename and fully qualified path FQP from $1
$ basenm=`basename $1`
$ dirnm=`dirname $1`
$ echo "debug ${dirnm}${basenm}"
# or a replacement for 'basename'
the_var=foo.txt; echo ${the_var%.*}      <---returns foo

# Get basename
foo=file.tar.gz
echo ${foo%.*}  <---returns file.tar

# Test availability of all hosts:
grep -v "#" /etc/hosts | awk '{print $1}' | xargs ping -c 1
# Contrast with (better if doing more than just a single command):
grep -v "#" /etc/hosts | awk '{print $1}' | while read EACHHOST do
  ping -c 1 $EACHHOST
done

# Keep alive keepalive after exit logout.  Execute it with the command "nohup", then log out.
nohup tar -cf /dev/tape /home &
nohup while true; do date; sleep 5; done  # fails! must be in a script

# Sum file sizes WITHOUT using awk.  Shell's SET creates numbered variables for each whitespace-separated element, size happens to be in position $3
t=0; for f in $(ls); do set -- $(ls -lgo $f); ((t=$t+$3)); done; echo $t

# FIND (modify time could be == create time if file is new)
find . -type f -amin -10 -print # files accessed in last 10 minutes
find . -type f -atime -2        # files accessed in last 2 days
find . -type f -mmin -5         # files modified in last 5 minutes
find . -type f -mtime -1        # files modified in last 1 day (24 hours)
find . -mtime +3 -mtime -8      # a range of times (-a is optional) older than 3 days and younger than 8 days
find . -daystart -mtime 0       # files created since 12 midnight today
find . -daystart -mtime 1       # files created since 12 midnight yesterday (i.e. files NOT created today)
find . -type f -atime +30       # files that have not been read in 30+ days
find . -size 42c                # files exactly 42 bytes
find . -maxdepth 1              # only look in CWD, do not recurse
find . -path '*bqh0'            # directories with the word 'bqh0' at the end

# Do something to each file for each
for f in $( find /Drugs/TMMEligibility -print | grep 20180601 | grep DSBRDTMMPATADD ); do ls $f done

# Throw away 'Permission denied', etc. by dumping STDERR to blackhole device any errors to the bit bucket:
find / -name '*.mac' 2>/dev/null
# Redirect both STDOUT and STDERR to the bit bucket, send nothing to the console (error messages are written to STDOUT instead of STDERR)
$ /opt/tasty/bin/mypgm >/dev/null 2>&1 &

# Canonical Cygwin-safe spaces safe find - what changed during the last week?
find . -mtime -7 -type f -print0 | xargs -0 ls -lt

#                               important
find . -name '.*\.sw*' -exec rm -i {} \;  # eliminate swp,etc. swapfiles
#                                    ^
find mydir/ -name *foo* -exec ls -l {} \;
find mydir/ -name *foo* | xargs ls -l

# Call find(1) recursively to find everything named junk* that is not a dir:
find -name 'junk*' ! -type d -exec find {} \;

# Sum file sizes using awk
find . -name '??03*' | xargs ls -l | awk '{s+=$5}END{print s}'
# Sum file sizes using awk - safe for spaces in filenames
find . -maxdepth 1 -name '*.xls' -print0 | xargs -0 ls -l | awk '{s+=$5}END{print s}'

# Recursively delete files older than 2 weeks old - spaces in name safe:
find . -mtime +14 -print0 | xargs -0 rm

# Canonical find and then grep:
for f in $(find . | grep orion-32 | grep -P '.*pck|.*sql|.*prc|.*fnc'); do grep --with-filename bheck $f; done >| ~/tmp/t.out; vi ~/tmp/t.out
find /opt/QCServer/A.05.00/svr/files -name 'Inspec_Lot-*' -mtime -3 | xargs grep "Error:"
ssh tpsh005 'find /opt/QCServer/A.05.00/svr/files -name 'Inspec_Lot-*' -mtime -3 -exec grep "Error:" {} \; | tail'

# Skip exclude the dirs pattern:
(cd ~ && find ~/bob/ -maxdepth 2 -not -path '*/tmp/*' -name 'Session.vim')

# grep for 'findme' but skip ignore string 'foo' if in the same line:
grep findme * | grep -v foo

find . -name '*.sas7bdat' -a -not -name '*tr_*' |xargs \ls -l

# Look for password in Julie's files:
find . -name '*Julie*.txt' -print0 | xargs -0 grep -3 -i 'password'

# Show only files starting with b, c or containing 'part' somewhere in the name:
ls foo.{b*,c*,prc,*part*}
# or count specific filetypes
ls {*htm,*xls} | wc
# but for find(1), must do this:
find -name '*.txt' -o -name '*.sas' -a -not -name 'google.sas' -a -not -name 'foo*'
FILES=$(find $PTHCODE -type f -not -name baseline.md5 -a -not -name '*.log' -a -not -name '*.lst' -a -not -name '*.txt')

# Do certain filetypes exist in a directory?
PDBSEXIST=$(find "$PDB" '*.pdb' -type f -printf "%s" 2>/dev/null)
if [ -n  "$PDBSEXIST" ];then ...

# Use rough date to find files earlier older than the last time you looked:
find '//Bredsntp002/GDM Reporting Profiles/DATAPOST/Verified/' -newer /cygdrive/u/tmp/mdes.timestamp && touch $u/tmp/mdes.timestamp
# Finding files between datestamp June 26 and June 30 (midnight):
touch -t 200406260000 /tmp/t1 && touch -t 200406300000 /tmp/t2
find . -newer /tmp/t1 ! -newer /tmp/t2

# Recursively update timestamps on all files and directories from current one downward:
$ find . -type f -mtime -40 -name '*sas' | xargs touch
# Recursive touch(1) for dirs that might have spaces in names
$ find from -print0 |xargs -0 touch

# Tarball files in CWD created in the last 24 hours:
find -mtime -1 -type f | xargs tar cvfz junk.tgz

# Tar only the top level directory, skip do not tar subdirectories:
find mydir -maxdepth 1 ! -type d -exec tar cvfz bobh.tgz {} \;
find mydir -maxdepth 1 ! -type d  | xargs tar cvfz bobh.tgz

# tar(1) is a bitch when it comes to specifying individual files, use this instead:
cat my_FullyQualified_filelist.txt | xargs tar cvfz onlySpecificFilesTarred.tgz

find -type f -mtime -1|xargs tar cvfz foo/t.tar.gz && scp foo/t.tar.gz rheckel@daeb:~/tmp/

# Recursive grep (if no GNU -r available and even that doesn't always work):
find . -name '*.h' -exec grep -H foostring {} \;
# or better recursive grep
find . -type f -print | xargs grep foo
find /Drugs/xron -type f -print0 |xargs -0 grep -i Weekly_Detail
# or                                   discard STDERR
find . -type f -print | xargs grep foo 2> /dev/null
# or all text _without_ specifying which file(s) the text came from:
find . -type f -exec grep -i foo {} \;
# or all text specifying which file(s) the text came from (filename will be below the find results):
find . -type f -exec grep -i foo {} \; -print
# or, just the filenames.
find . -type f -exec grep -il foo {} \;

# Find, prompt, then remove if y.
find . -inum 123 -ok rm {} \;
find . -inum 123 | xargs rm -i;
find . -inum 123 -exec rm -i {} \; 

# Find files except for file named e.g. foo.bar AND NOT foo.log:
find -name 'foo????' -a ! -name '*.log'

# To find permissions setuid and setgid file.  Spaces around parens are mandatory, the -a isn't.
find / -type f -a \( -perm -4000 -o -perm -2000 \) -print
find / -perm -0600 -print 2>/dev/null   # finds -rw-r--r--
find / -perm 0600  -print 2>/dev/null   # not   -rw-r--r-- only finds -rw-------
# Find -rwxrwxr-- that aren't symlinks (usually 777)
find . -perm -0775 -a ! -type l

# Change permissions of specific filetypes:
find -name '*.pl' -exec chmod 755 {} \;
find $u/foodir -perm 000 |xargs chmod 755

# Copy all the files in a directory tree into the same, one, single, large directory, preserving their properties:
find . -type f -exec cp -p {} newdir/ \;

# Create an uncompressed tar file of each child directory of the current working directory:
find . -maxdepth 1 -mindepth 1 -type d -exec tar cvf {}.tar {} \;

# Collect all user's .bash_history files into one file:
find / -type f -name .bash_history | xargs cat > /tmp/history.txt

# Find all dead symlinks and remove them:
find . -type l -print | perl -nle '-e || print' | xargs rm

# Non-GNU find is restricted to finding entire filenames so use this:
find / -print | grep 'fin.*me'

# Find grep both strings two strings in files matching pattern start with 'b':
find . -name 'b*' -type f | xargs grep -l replicant | xargs grep 'called'

# Watch, poll, directory for new files (but won't notice files copied with older timstamps)
touch /tmp/f1 && while true;do find /home -newer /tmp/f1 2>/dev/null;touch /tmp/f1;sleep 5;done

# Test parallel printer (as root): Use Ctr-V Ctrl-l to get the ^L.  It sends a form feed to eject the paper:
echo "This is a test." > /dev/lp0; echo "Please ignore this print job." > /dev/lp0; echo "^L" > /dev/lp0

# Count number of blank (including whitespace chars) lines in Unix fmt textfile (see vi solution for better answer):
cat foo.txt | awk ' /^['\ '|'\\t']*$/ { ++x } END{ print "Blanks = " x } '

# Create patch(1) - stand in common parent directory of lao tzu:
diff -Nrup lao tzu >t.patch
# Install patch:
patch <t.patch lao  # or patch -u t.patch lao   lao and tzu are identical now
# Reverse patch:
patch -R < t.patch  # or patch -R t.patch lao   lao and tzu differ again
# Better approach for single file patch:
diff -u setup.html setup.new.html > setup.html.patch
patch --dry-run -Np0 -i setup.html.patch

# Fix a manpage.  The sed script has lines like  s/\.YODLTAGSTART\./\r\.YODLTAGSTART\./g
$ sed -f mysedpatchscript.sed /tmp/rxvt.1 > /usr/man/man1/rxvt.1

# Show others what you're doing on your terminal (demos, etc.).  Poor man's VNC.
bash 2>&1 | tee /tmp/demo      <---you
tail -f /tmp/demo              <---them

# Only important errors and track logfile from same tty that you're working:
tail -f /home/apache/logs/error_log | grep -v 'apache/icons/' &
tail -f /home/apache/logs/error_log | grep -v 'apache/icons/' 2>&1 | tee tail.log

# Do something if the shell receives a signal:
trap 'echo footrapped;' 1 2 3 15
# or
trap 'rm -f footrapped.txt; exit;' 1 2 3 15

# Use the user's PAGER if set, use more(1) otherwise:
${PAGER-more}

# Delete all except saveme.txt (a regex) from a directory (GNU ls only):
ls -I saveme.txt | xargs rm
# Wildcard list all files except FF* MF* NF* 
ls -I '[FMN]F*'
# Wildcard find everything except the file emacs:
find . -not -name emacs
# Wildcard open everything in the directory except file cp.sas
vi [^cp.sas]*

# ls everything except image files:
ls !(*jpg|*bmp)

# Untarball using bunzip2 (bzip2) instead of gzip:
bunzip2 linux-2.4.3.tar.bz2 | tar xvf -
# or if available just
tar tvfj jdk118_v3-glibc-2.1.3.tar.bz2 

# Redirection
mycommand >&0   # STDIN  same as 0>
mycommand >&1   # STDOUT  same as 1>
mycommand >&2   # STDERR  same as 2>

# mod modulo modulus division (every n item mod will equal 0):
bc -lwq    # if need modulus, from within bc, set scale=0

# mod modulo modulus division
if (num % i == 0) { isPrime = false; }
E.g. 3 % 2 = 1    i.e. flip it 2/3 taking the remainder which is 1
E.g. 2 % 3 = 2    i.e. flip it 3/2 taking the remainder which is 2

# Primitive alarm clock
sleep `echo '60*2'|bc` && beep

# Run through base 2 decimal values using C-like syntax.  Prints 2, 4, 8, 16.
for ((i=1;i<5;i++));do echo "2^$i" | bc;done
# better
for ((i=1;i<=32;i++)); do echo -n "2^$i: "; echo "2^$i" | bc; done

# Enable bc floating point e.g. 42.123
set scale=3

# Command line on the fly bc calculation
(echo scale=5; echo 6954/10) | bc
# Canonical bc convert base 10 decimal to hex (note: bc is case sensitive for hex numbers!):
(echo obase=16; echo 10) | bc  # A
# Canonical bc convert hexadecimal to decimal in bc:
(echo ibase=16; echo DEADBEEF) | bc  # 3735928559
(echo obase=2; echo ibase=16; echo F) | bc  # 1111
(echo obase=10; echo ibase=2; echo 1111) | bc  # 15

# Binary addition subtraction multiplication division in bc calculator:
ibase=2;obase=2

# Find size of certain files in dir:
wc [d-h]* 2>/dev/null | grep total | awk '{print $3}'
  
# Find library required e.g. '...shm1.c: undefined reference to `shmget''.  Then add -lcygipc to end of gcc command line in this IPC case.
cd /usr/lib; for i in 'lib*.a'; do echo $i; nm $i | grep shmget | grep -v UNDEF; done

# Vertical cat instead of horizontal cat
echo -n "hello world" | dd cbs=1 conv=unblock 2>/dev/null

# Write specific range of chars to a new file:
dd if=bladerun_crawl of=junkcrawl bs=1 skip=2 count=3

# Uppercase all characters in a file:
dd if=foo.txt of=foo.upper.txt conv=ucase # or lowercase dd if=foo.txt of=foo.lower.txt conv=lcase
# Uppercase all characters in a file:
cat foo.txt | tr '[a-z]' '[A-Z]' >| foo.txt # or lowercase cat foo.txt | tr '[A-Z]' '[a-z]' >| foo.txt

# Delete filenames containing spaces:
$ rm *\ *   $ rm *' '*

# Remove a file whose name is blank or nonprinting non-ASCII weird (i.e. find inode):
ls -i
# then rename using the inode (TODO can use mv {} with xargs??)
find . -inum 41734 -exec mv {} thenrmthisfile \;

# Find out types of files/executables in ~/bin:
for i in ~/bin/*; do file $i; done;

# Find multiple pattern filenames and open all in vi
vi `find . -name '*merge*' -o -name '*join*'`  # DON'T USE ...| xargs vi
# Find and edit vb source files in one swoop - good for code review:
find -mtime -7 -type f -name '*.vb' -print0 | xargs -0 vi  # DON'T USE ...| xargs vi -
# May be easier to edit the .tgz in vim:
find -mtime -7 -type f -name '*.vb' -print0 | xargs -0 tar cvfz junk.tgz

# Simple find and edit search string (like my bgrep but without duplicate filenames):
find /sasdata/Cron/Daily/HPTask -name '*.sas'|xargs grep 'any deceased pat' |awk -F: '{print $1}'|sort|uniq >|~/bob/tmp/1
vim `find . -type f -print0 | xargs -0 grep -i 'http.*' | awk -F: '{print $1}' | sort | uniq`

vi `find . -name "*" -exec grep -l "bobh" {} \;`
# or just show filenames:
find . -name 'dlt*' -o -name 'tst*' -exec grep -l REVISER {} \;
# Find regex bobh or babh, etc. in all html docs, then edit each with vi.
vi `find . -type f -name "*.html" -print | (xargs grep -il "b[a-z]bh" 2>/dev/null)`
vi `grep -[r]il findthisstring *.html 2>/dev/null`

# Find newish files without a 'generated' string and prepare them for a code review form e.g. LotTracking/LotTracking/ASPNETWebApplication/Banner.ascx.vb,Jul-29-2009 13:47
$ find LotTracking/ -name '*.vb' -mtime -90 -print0 |xargs -0 grep -RZL 'This code was generated by a tool' | xargs -0 ls -l | awk '{print $9","$6"-"$7"-2009 "$8}'

# Change owner from me to you:
chown yourid myfile.txt
# Change owner and group simultaneously:
chown oracle:dba disownme.txt  # (or oracle.dba)

# Mount CDROM
mount -t iso9660 /dev/cdrom /mnt/cdrom
# Mount Android
sudo mount -t vfat /dev/sdb /media/Nexus -o uid=1000,gid=1000,utf8,dmask=027,fmask=137
# Unmount Android
sudo umount /media/Nexus

# Zero pad a list of numbers with leading zeros to produce e.g. 0012 0123...:
awk '{printf "%04d\n",$0}' listofnumbers.txt
# Comma delimited zero padded:
awk '{printf "%04d,",$0}' listofnumbers.txt

# Trap window resize:
kill -l    # to find the number for SIGWINCH
trap "echo caught SIGWINCH" 28  # then resize the window
# Trap Ctrl-c:
trap "echo caught SIGINT" 2

# Send mail from command line:
echo 'ok' | mailx bob@taeb.com
echo 'body' | /bin/mutt -s "subject line" robertheckel@solectron.com

# Cygwin.  Place a file's contents onto Clipboard:
cat clipboardme.html | putclip
# Cygwin. Place Clipboard contents into a file:
getclip > clipped.txt

sed 's/day/night/' <old.txt >new.txt
# In place substitution edit:
sed -i .bak 's/day/night/' old.txt

# Remove all double quote quotation marks.
sed 's/"//g' foo.txt > dequoted.txt

# Prints the line to terminal if found:
sed -n '/LADE/p' bladerun_crawl
awk '/LADE/' bladerun_crawl  # awk '/LADE/ {print $0}' bladerun_crawl

# Preview, debug, lines that will change:
sed '/eplic/{p;s/eplic/XYZ/}' bladerun_crawl

# Print only specific range lines 2, 3, 4 and 5:
sed -n '2,5p' bladerun_crawl
# Delete specific line numbers:
sed '2,5d' bladerun_crawl
sed '2,3d;7,8d' bladerun_crawl

# Chain multiple sed substitutions together:
sed 's/replic/xxx/i; s/retire/yyy/i' foo.txt |tee foo.txt >/dev/null 2>&1

# On lines containing the word 'were', do a double substitution:
sed '/were/{s/Repli/foo/;s/not/bar/}' bladerun_crawl >|bladerun_crawl2

# Save just the changed lines to file (for debugging dryrun):
sed 's/Repl/YYZ/w onlythechanges' bladerun_crawl >/dev/null 2>&1

# Double space doublespace a file:
sed G foo.txt
awk '{print ; print ""}' foo.txt

# Split on, parse, colon delimited file:
awk -F: '{print $1 " and " $2}' /etc/passwd
# Same
perl -ne '@x=split /:/; print "$x[0] and $x[1]\n"' /etc/passwd

# Print the entire line, $0, if the second field contains 'John' or 'Fred'.
awk '$2 ~ /John|Fred/ {print $0}' foo.txt

# cat file until the first blank line:
awk '$0 ~ /^$/ {exit;} {print $0;}' foo.txt

# Shift first entry to last entry (rearrange columns).
awk '{print $2, $3, $4, $1}' resortme.txt

# Find bash user's real names
awk 'BEGIN{FS=":"} $7 ~/bash/ {print $5}' /etc/passwd
# Better
awk -F: '$7 ~ /bash/ {print $5}' /etc/passwd

# Select a range of rows:
awk 'NR < 5 {print}' 8_2_ntlx72ba.bm
awk 'NR >5 && NR <11 {print}' 8_2_ntlx72ba.bm

rpm -qip foo.rpm          # query
rpm -qf /usr/sbin/bind    # give the installed pkg name & num
rpm -Uvh foo.rpm          # install
rpm -qa | grep -i pine    # determine if a pine RPM has been installed
rpm -e emacs              # remove

# Athena scrollbar        middle mouse to drag the scroll bar up and down
# Athena scrollbar High   left mouse scrolls one LINE up
# Athena scrollbar High   right mouse scrolls one LINE down
# Athena scrollbar Low    right mouse scrolls one PAGE down
# Athena scrollbar Low    left mouse scrolls one PAGE up

# Checkout a repository on a remote machine:
export CVSROOT=:ext:rheckel@parsifal:/home/rheckel/repository && cvs co eandb

# Debian (at least) date undocumented set time (as root):
$ date --set=17:03:01

# Determine how much memory (in MB) you have:
$ free -m  # 193397 is 193G how much amount of RAM on this system box machine
vi /proc/meminfo
# Determine how much swap (in MB) you have on Solaris:
/usr/sbin/swap -s
# Determine how much memory (in MB) you have on Solaris:
prtconf -v | grep Memory
# Determine what platform you have on Solaris:
isainfo -v
# Determine processor you have on Solaris:
psrinfo -v
# Determine processor you have on Linux:
lscpu

# Poll memory:
while true; do date >> ~/free.txt ; free -g -o >> ~/free.txt; sleep 5; done

# Determine the maximum non-swap memory (in MB) you have on Solaris:
/usr/sbin/prtconf | grep Mem
# Vendorid/deviceid
prtconf -pv

# Echo rxvt text in color (type  echo "foo" with this after foo and before the closequote:  Ctrl-V Esc then [0;31;40mThis Is In Red")

# A reasonable xterm font:
-b&h-arial-medium-*-*-*-12-*-*-*-*-*-iso8859-1

# Cygwin/Linux - to get man -k working, must run makewhatis, Solaris must run catman

# Cut a specific part of a line of text (assumes you know number of fields):
echo 'foo_bar_baz' | cut -d'_' -f1     <---returns baz
echo 'foo bar baz' | cut -d' ' -f1-2   <---returns foo bar

# Can't do this with cut if you don't know your total number of fields:
echo 'foo bar baz' | awk '{print $NF}'
echo 'foo:bar:baz' | awk -F: '{print $NF}'
# And you sure as hell can't do this with cut to get the next-to-last field:
echo 'foo bar baz' | awk '{print $(NF-1)}'
echo 'foo:bar:baz' | awk -F: '{print $(NF-1)}'
# But you can't easily rebuild a tab-delimited file with awk so do this:
head TransactionDetails.dat | cut -d'	' -f2-4

# Determine if disk is almost full (Debian at least):
df -m|awk '{if ($5>=70 && NR>1) print $5,"      " $6 }'

# Remove files based on specific date of Jun 12 (GNU ls):
rm -i ` ls -Al | grep "Jun 12" | awk '{print $9}'`
# Or remove all files except for specific date of Jun 12 (GNU ls):
rm -i ` ls -Al | grep -v "Jun 12" | awk '{print $9}'`
# or just list files (note need 2 spaces for single digit date) modified on a
# specific date:
\ls -AlR | grep "Nov  7" | awk '{print $9}'

# Sort all files created in August by size (col 4, numeric):
ls -l | grep "Aug" | sort +4n

# Poor man's recursive ls:
for i in builddir datadir;do cd $i; ls; cd ..; done

# List all filesystems (e.g. /dev/sda2 ...)
df -k | awk '{print $1}' | sed -n "3,14 p"
# List all *supported* filesystems
cat /proc/filesystems

# Find your MAC address on Debian (via the network, not the card itself).
/sbin/ifconfig eth0       <---shows HWaddr
# or to find daeb's MAC address from a W2K box:
ping daeb
arp -a

# Don't copy exclude from copy all .bak files:
cp OpenRefreshSave.*[^bak] ~/code/vb/

# To format floppy:
mkfs -t ext2 /dev/fd0                <---at least Linux
fdformat -U -H                       <---at least Solaris, formats
newfs /vol/dev/rdiskette0/7alfprodu  <---at least Solaris, creates filesystem
volcheck                             <---at least Solaris, creates /floppy
cd /floppy/floppy0                   <---Windows formatted floppy is ok
eject floppy                     <---when done, don't need volume manager GUI

# Zero out (empty) a file, leaving zero bytes
>| wipeout.txt

# Combine and compress two files (better compression than using -c)
cat doserr2bat.sh open_write.c | gzip >foo.gz

# Rename files with spaces in their names:
for i in *; do mv "$i" `echo $i | sed 's/ /_/g'`; done
# or recursively rename files with the word 'one' in their name:
for i in `find -name '*one*'`; do mv "$i" `echo $i | sed 's/ /_/g'`; done

# Date calculation - add one day to today
echo `date +%s` + 86400 | bc
# Compare convert Unix and SAS epochs (10 years apart):
date +%s;echo `date +%s` + 315569520 | bc
# Convert a string date to a Unix datetime number.  Go from words to numbers.
date +%s -d'05/12/1998'
# Convert a string date to a SAS datetime number.  Go from words to numbers.
echo `date +%s -d'05/12/1998'` + 315569520 | bc

# Sort then sum a column
sed 's/[)(]//g' junk | awk '{print $2}' | sort | xargs | sed 's/ /+/g' | bc
# Sum disk sizes:
df | tail -6 | awk '{print $4}' |  xargs | sed 's/ /+/g' | bc
# Best summing of single column (elim trailing '+' problem):
du -sk  *.sas7bdat|awk '{sum += $1} END {print sum}'
find . -name '*sas' | xargs du -sk|awk '{sum += $1} END {print sum}'
# If spaces in filenames:
find . -name '*sas' -print0 | xargs -0 du -sk|awk '{sum += $1} END {print sum}'

find /Drugs/Archive/Drugs/ -mtime +500|xargs du -sb|awk '{sum += $1} END {print sum}'

# or not summing all lines:
cat foo.txt | awk '/OnlyTheseLines/{t+=$1} END{print t}'
# or sum list
for u in bxj9 cmc6; do du -sk $u|awk '{print $1}'; done | awk '{t+=$1} END{print t}'

# Poor man's editor (create new file only) using HEREDOC:
cat > myfile.txt <<.    <---<CR>, then type, then end with . on it's own line

# Print user id who created file
ls -l | grep foo | awk '{print $3}'
# same (faster?)
ls -l | awk '/foo/ {print $3}'

# Create tarball of all files in pwd that contain string 'ESSENTIAL':
tar cvfz ~/tmp/essential.tgz `grep 'ESSENTIAL' * | awk -F: '{print $1}'`

# Determine total size of selected files.  Add sizes of files together.
wc *.txt

# Find lines that have string '21' in column position 7 and 8 (assumes file too big for vi):
sed -n '/^.\{6\}21/p' BF19.ZZX0166.MORMER
# Find lines that have a blank where ALIAS should be then find the records with February deathdates then count the number of records:
sed -n '/^.\{46\} /p' MORMER | sed -n '/^.\{48\}02/p' - | wc
# Same approach using Perl (perl -ne wraps an implicit loop around the file):
perl -ne 'print "1\n" if /^.{287}Y/' NATMER |wc
# Specific column.  If the file is small enough, repeated global commands in Vim database searching is easier:
:g!/^.\{46}02/d

# Like a database query subtotals counts by group i.e. proc freq textfile:
for i in `seq -w 01 57`; do echo -n $i:; sed -n "/^.\{76\}$i/p" foo.txt|wc -l; done
# Then drill down to view subset of state 14:
sed -n "/^.\{76\}14/p" fri2.txt >| small.txt

# Delete the first 42 columns from a textfile:
sed 's/.\{42\}//' foo.txt  # 1,$s/.\{42\}//  <---or from within ed

# More readable environment variable output:
echo $PATH | tr ":" "\n"

# Substitute only the second appearance of a string on a line:
sed 's/replaceme/FOO/2' foo.txt

# Convert Windows to Unix file format:
sed 's/\r//' CLIDLIST_DOSFMT.txt >| $CLIDLIST_UNIXFMT.txt
# Convert Macintosh to Unix file format:
tr '\015' '\012' <file.mac >file.unix

# Compress 2 or more spaces into 1:
echo 'long   str' | sed 's/ \{2,\}//'

# Make sure user is root:
val=`id | sed 's/uid=0(.*/ROOT/'`; if [ "$val" != "ROOT" ] ; then ...

# Translate convert EBCDIC to ASCII
dd if=myinfile.txt of=myoutfile.txt ibs=800 cbs=80 conv=ascii
dd if=myinfile.txt of=myoutfile.txt conv=ascii
# Translate convert ASCII to EBCDIC
dd if=myinfile.txt of=myoutfile.txt conv=ebcdic

# Canonical zip - foo.zip comes FIRST in parameter list (original is left unchanged!):
zip foo.zip foo.txt
zip foo.zip *
# Canonical recursive zip:
zip -r foodirrecursive.zip mydir/

# Find longest maximum widest line length in textfile. Subtract 1 if ff=dos (or use wc -L):
cat t.txt | awk '{ if (x<length()) x=length() } END{ print x }' 
# Or if want individual max line lengths:
for f in *.sas; do echo $f; cat $f | awk '{ if (x<length()) x=length() } END{ print x }'; done

# Tarball specific filetypes only:
cd $z/datapost && find . -name '*.csv' -a -not -name 'TR*' |xargs tar cfz ~/tmp/datapost.tgz
cd $x/datapostdemo && tar xvfz ~/tmp/datapost.tgz

# Find the Windows PIDS, not just the Cygwin ones (good for using  $ winkill 123 ):
ps -W|grep -i rtv

# Ignore all whitespace (the -c context is always good idea).  Best diff outside of vi -dR 1 2:
diff -cw f1.txt f2.txt

# Find info on Internet ports:
netstat -nl --inet
netstat -af  # Windows (can't use Cygwin)

# Which modules have been compiled-in an Apache webserver:
/usr/local/apache/bin/httpd -l

/sbin/runlevel  # RedHat
who -r  # runlevel on Solaris:

# Cycle among virtual consoles: Left Alt+[left or right arrow]

# Unix heredoc here doc:
cat <<HEREDOC
ok blah blah, this could extend many lines
HEREDOC

cat <<HEREDOC >| $UTMPDIR/t.sas 
  libname l "$UTMPDIR";data l.${2}BKUP(genmax=${4});set l.${2};run;
HEREDOC

# Find alphanumeric characters using character class:
grep [[:alnum:]] foo.txt
grep [A-Za-z0-9] foo.txt
# Numeric character class
echo 19 | sed 's/[[:digit:]]/x/'

# Is a process running (in this case SAS)?
while true; do ps -W | grep sas; date; sleep 3; done
# Better
sas &;  wait %1; echo "SAS process terminated"

# Throwaway skip delete remove first 3 lines of a file:
tail -n +4 foo.txt
cat foo.txt | awk "{if(NR>3)print}"

# Test procmail regex:
echo 'to: bheckel@worldnet.att.net, bheckel@att.net' | egrep '^to:.*bhe[a-zA-Z]+@(worldnet)*att.net'

scp rheckel@otaku.freeshell.org:.muttrc _muttrc.otaku  # remote to local
scp rsh8680@tpsh004://var/adm/scripts/shutlims.sh .  # remote to local
scp procexp.exe rheckel@sdf.org:html/ && ssh rheckel@sdf.org chmod 755 html/procexp.exe  # local to remote

# Combine mkdir with chmod:
mkdir -m 755 foodir

# Print column 3 if column 1 matches Ian (a database-like search):
awk '($1=="Ian") { print $3 }' foo.txt
# compare with Perl's
perl -ne '@f=split; if ($f[0] eq "Ian") { print "$f[2]\n"}' foo.txt
perl -ane '@x=split /\|/;print $x[0], "\n";' foo.txt

Ctr-x Ctr-c  # exit emacs (hopefully never to return...)

# Syntax check the Apache config file:
/usr/local/apache/bin/apachectl configtest

# Is a package properly installed on Sun Solaris:
/usr/sbin/pkgchk -l -p `which gcc`

# A one time cron(1), at(1)
at 17:09 today            #<---press enter
echo 'foo' >/dev/console  #<---type commands followed by ctr-d

# Find dead webpages based on a space delimited textfile of users:
for u in `cat users.txt`; do lynx -dump "http://158.111.250.31/~$u/"; done | m

# Canonical recursive websuck mirror gets linked pages, puts all in toplevel dir www.accesstoinsight.org/ convert to local viewing (-k)
wget -m -p -k -np 'http://www.accesstoinsight.org/lib/authors/thanissaro/wings/index.html'

# Follow only relative links and skip GIF images:
wget -m -L --reject=gif http://www.catb.org/~esr/writings/taoup/html

# Pretend to be IE
wget --header="User-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)" http://msie.only.url/here

# Loop in shell:
while : ; do echo bob; sleep 6; done

# Create several simple dummy files:
for i in 1 2 3;do echo "i am $i" >foo$i; done

# Sequence loop while number is less than 6
for i in `seq 5`; do mem; sleep 3; done

connections over time:
for i in `seq 16`; do date; sqlplus -S sasreport/sasreport@sprd25 @donothing; date;date; sleep 1800; done
for i in `seq 16`; do date; a=`date +%s`; sqlplus -S sasreport/sasreport@sprd25 @donothing; date; b=`date +%s`; c=`expr $b - $a`; if [ $c -gt 7 ];then echo $fg_redbold GT 7 SECONDS! $normal; fi; sleep 1800; done

# Display terminal output on two xterms simultaneously (untested):
sh -c "$prog|tee -a $mytty" 1>$othertty 2>&1 0>$othertty

# Append two files vertically side by side:
paste -d' ' foo1.txt foo2.txt

ifconfig eth0 down
ifconfig eth0 up
route add -host 192.168.1.30 eth0
route add default gw 192.168.1.1 eth0

# Find and tarball only textfiles:
file -F '' * | grep text | awk '{print $1}' | xargs tar cvfz bin.tgz

# Without an enlightened tar xvfz or gtar e.g. Solaris tar gunzip:
gunzip <stable.tar.gz | tar xvf -
tar cf - findutils-4.1-srcdir | gzip >compiled.bobh.tgz
# Unenlightened tar that was compress'ed 
uncompress <Oct08.tar.Z | tar tvf -

# Environment variable check - use $VISUAL or $EDITOR or vi:
${VISUAL:-${EDITOR:-vi}}

# Check valid users via FTP:
for u in bxj9 ckj1 ; do echo "testing $u "; ncftp -u $u -p dAebrpt5 rdrtp; done

ncftp -u myuid -p mypasswd intergate.com

# Force Apache errors to syslog Solaris at least:
*.err;kern.notice;auth.notice;daemon.notice   /dev/sysmsg <---/etc/syslog.conf
ErrorLog syslog:daemon                              <---/etc/apache/httpd.conf

# man replacement (Solaris, not Cygwin):
nroff -man smbd.8 | more

# Broadcast message to all users:
wall < mywallmessage.txt

/sbin/init 0  # shutdown to allow poweroff
/sbin/init 6  # reboot w/o going to BIOS
# or fancy assuming you have users logged in
shutdown -g120 -i0 -y "shutting down server"  # at least Solaris

# Cygwin convert DOS path to Unix path
sed 's/\r//' t.txt >|t2.txt
cygpath 'c:\Documents and Settings\Bob Heckel'
ls `cygpath 'c:\Documents and Settings\Bob Heckel'`
vi `cygpath 'c:\temp\cygwin.txt'`
notepad.exe "$(cygpath -aw "Desktop/Phone Numbers.txt")"
javac -cp "$(cygpath -pw "$CLASSPATH")" hello.java

ufsdump 0uf /dev/rmt/0ubn /home  <---initial
ufsdump 9uf /dev/rmt/0ubn /home  <---incremental

# Solaris Volume Management:  $ eject cdrom  If used paperclip must:
/etc/init.d/volmgt stop; /etc/init.d/volmgt start
# Insertion of a floppy disk (UNIX or MS-DOS format) has to be communicated
# to the Volume Manager manually:
volcheck

# If ls -lS isn't available:
ls -l | sort +4r | grep -v "total"

# Give multiple users the same group and password:
useradd -g daebstat -m -p N6lPzsXhb5TLg dwj

mailx -s 'email subject type CTRL-D or dot on blank line to end' root@adeb
mailx -s "mysubject" -r LMITHELP@dcc.gov -c 'boswell@dcc.gov rheckel@dcc.gov' 'ck@dcc.gov kj@dcc.gov' <junk
? touch *    # mark all as read and write to mbox in mailx...
mailx -f ~/mbox   # ...and read them
ssh tpsh005 'ls -l /home/gaaadmin/GAAAdapter/gaa/receive/Output_Data | mailx -s 'subject' rsh8680@sgk.com'

# Monitor system status (Solaris at least):
echo `uptime|awk '{print $11 $12 $13}' && df -k|grep /data|awk '{print $5}'` | mailx -s "load and /data space [cron tstdev]" 'bqh0@dcc.gov'

# Without an external file redirected in:
$ echo 'ok' | mailx -s 'test4' rsh8680@sgk.com

awk '/#/ {print "Got a comment SOMEWHERE in the whole line"}' /etc/hosts
awk '$1 == "#" {print "got a lone, leading pound sign"}' /etc/hosts
awk '$1 ~ /#/ {print "got a pound sign, SOMEWHERE in column 1"}' /etc/hosts
awk '/#/ {print "Found a comment"} $1 == "#" {print "Found comment in first column"} /^# /  {print "Found comment at beginning"} ' /etc/hosts
# Find the highest number of columns (i.e. fields, words) on one line in a file:
awk 'BEGIN{max=0}{cols=NF;if(cols>max){max=cols}}END{print max}' ~/bladerun_crawl 
awk '/^(From:|Subject:)/{print $2,$3,$4"\n"}' PotentialSpam | m

# bash enhancement like basename()
the_var=amanuensis.sas
echo ${the_var%.*}   <--- amanuensis
# or for mainframe transfers where you don't want the .sas extension on mf:
for f in *.sas;do bfp $f "bqh0.pgm.testlib(${f%.*})"; done

# Unback restore more than one file:
for f in *.bak; do cp $f ${f%.*}; done

# HTMLify recently created files:
find /home -newer /tmp/f1 -name '*PDF' 2>/dev/null | perl -ne "print if s#......(....).............(.*PDF)#<A HREF=http://158.111.250.37/~\1/\2>\1 \2</A><BR>#" >| /home/rheckel/public_html/email_down_list.html

# Which package did a file come from (Solaris):
grep /my/missing/file /var/sadm/install/contents

# Tape drive swap tapes:
mt rewind; mt offline

# Solaris patches information:
showrev -p 

# Nested for loop to build test directories:
for y in 2003 2004 2005; do for e in NAT MOR FET; do mkdir -p mvds/$e/$y; done;

# Paragrep.  Print select blank line separated paragraph if word is found:
sed -e '/./{H;$!d;}' -e 'x;/illegal/!d;' bladerun_crawl
# Less unintelligible paragrep but ff=unix is mandatory:
perl -ne '$/="";@p=<>;for $p(@p){print "$p\n" if $p=~/illegal/;}' <bladerun_crawl

# Debug .bashrc trouble on Cygwin without sourcing config file clean bashrc
C:\cygwin\bin\bash.exe --norc

# Convert uppercase to lowercase:
echo UPPERTOLOWER | tr [A-Z] [a-z]
echo UPPERTOLOWER | tr 'A-Z' 'a-z'
echo "THIS is a STRIng to be LOWErcased" | tr [:lower:] [:upper:]

# Lowercase a filename:
mv FOO.txt `echo FOO.txt | tr A-Z a-z`

# Lowercase an environment variable.  E.g.  export PS1=BAR  already set:
export PS1=`echo $PS1 | tr A-Z a-z`
export PS1=`echo "$LOGNAME@DCCJES$ " | tr A-Z a-z `

# Uppercase all directories (assumes no files in the dir):
for d in *; do mv $d `echo $d | tr a-z A-Z`; done

# Cleanup projects dir before it gets backed up at night:
find ~/projects -name 'junk.*'|xargs rm

# Monitor a directory tree for new pdf files:
find /home -type f -name '*.PDF' -a -newer /tmp/fx -exec ls -lo {} \; 2>/dev/null
# Monitor a box for logons:
while true; do last|head|grep -v rheckel; sleep 60; done

# Monitor process load and get the cpu info you need that xload and uptime don't tell you:
top -d 2 | col -b | grep states

# Print to syslog:
echo 'as root print this message to console' >/dev/console

# Prompt user yn:
read yesno; if [ $yesno = 'y' ]; then echo 'he said yes'; fi

# Find ls only hidden files:
ls -a | grep "^\."

# How much disk space of quota is being used by user
/usr/sbin/quot /dev/dsk/c1t1d0s0

# Convert manpage to text:
man lp | col -b > lp.txt

# Split into pieces.  xaa and xab are max of 1.4MB to fit floppy. Make sure no x* files already exist in the directory:
split -b 1400000 orig.tgz
# Unsplit rejoin the 1.4MB pieces
cat xa* > origrebuilt.tgz

# Encrypt decrypt a file. Original file is not saved.  But foo.txt.gpg is readable in vim if use passphrase:
gpg -c foo.txt  # encrypt
gpg -d foo.txt.gpg  # decrypt to STDOUT
gpg -d foo.txt.gpg >foo.txt  # decrypt to file

# Recursive wc recursive find - safe for Windows filenames w/ spaces (Cygwin) canonical total count lines of code (alternatively use :vimgrep /foo/ **/*.vb)
find . -name '*.vb' -print0 | xargs -0 grep -i 'databound web'
find . -name '*.sas' -print0 | xargs -0 wc -l  # canonical count lines of code

# File attributes - simple access in shell
unixtime=$(find foo.txt -printf "%AT" ); echo $unixtime
size=$(find foo.txt -printf "%s" ); echo $size

# Determine name of NIC
dmesg|grep eth

# Keep checking for job completion HFS
while sysout -v JOB15722|grep -c EXECUTION; do sleep 2; done

# Read file line by line in shell.  Feed textfile to a (single?) shell command.
while read f; do echo $f; done <myfile.txt
# Bulk upload converting extension on the fly upload to mf (fq paths ok)
while read f; do bfp $f "bqh0.pgm.lib(`basename $f .sas`)"; done <filelist.txt

find . -name '*DEL' | while read fn; do echo "found file $fn"; done
find . -type d  | while read dn; do echo "found dir $dn"; done

# Combine all users crons in .txt cron into a new .txt:
while read f; do echo "---$f---"; crontab -l -u $f; done </mnt/nfs/home/bheckel/users.txt >/mnt/nfs/home/bheckel/crontabs20150619.txt

# ROT13 encryption
 echo foo | tr 'a-zA-Z' 'n-za-mN-ZA-M'  # sbb
cat "$@" | tr 'a-zA-Z' 'n-za-mN-ZA-M'   # "a" goes to "n", "b" to "o", etc.

# Find all files opened by a process (Solaris at least):
/usr/proc/bin/pfiles mypid

# Create tarballs out of just text files in multiple directories:
for d in c html misccode perl sas vb; do cd $d && file -F '' * | grep text | awk \
'{print $1}' |xargs tar cfz ../$d.tgz && cd - ; done

for f in c html misccode sas vb; do scp $f.tgz sverige.freeshell.org:~/code/; done

# Where are the files in this (properly installed) Cygwin package?
cygcheck -l apache

# Use a default if no parameter is passed via command line
KNOPPIX_DIR=${1:-/home/rheckel/tmp}
BAR=notemptylikeFOOis; echo ${FOO-$BAR}  # use $bar if $foo doesn't exist

# Determine file size in bytes
filesize=$(find $1 -printf "%s")
if [ $filesize -lt 200000000 ];then echo bigger than 2MB; fi

# Canonical Cygwin updatedb.  alias loc='locate --ignore-case --database=/var/lib/locatedb.code '
$ /bin/updatedb --localpaths='/home/rsh8680/code' --prunepaths='/home/rsh8680/code/misccode/.git' --output='/var/lib/locatedb.code'
# Canonical Linux
$ sudo updatedb --database-root='/home/bheckel/code' --output='/var/lib/locatedb.code'

# Calculate the day before assumes GNU date(1):
date -d '20050801 2 day ago' +"%Y%m%d"

# Solaris 10 SMF rc file replacement
svcs -a   # which daemon services are running on Solaris 10:
svcs -x   # which failed to start
svcadm disable sendmail
svcs -v sendmail

# Compare two Word docs using a temporary fifo(?) pipe:
$ vi -d <(antiword 1.doc) <(antiword 2.doc)
$ vi -d <(antiword Client\ Feedback\ Report\ clm_ID0509_TXT.doc) <(antiword Ctwo.doc)

screen -r  # reattach screen
Ctr-a d  # detach (from within screen session)

# Set a shell variable's default even if it is not set, or is missing:
f=foo.txt; if test "x$f" = "x" && f=bar; then ... fi

test $HOSTNAME = 10g279 && echo ok

# Push, flush, sync bash history from one xterm to another
history -a  # append this terminal history
history -n  # read in the other xterms appended history into this terminal

# Insert, append, add a header line to first line of an existing file:
for f in *.html; do echo "<b>$f</b>" >| new$f && cat $f >> new$f; done;
# or insert, append, add a header line to first line of a single new file:
for f in *.html; do echo $f >>100581.html && cat $f >>100581.html; done

# Print file name and first two fields 
for f in *.xls; do awk '{print FILENAME ": " $1 " and " $2}' $f; done
for f in *.xls; do awk '/search4me/{print FILENAME ": " $1 " and " $2}' $f; done
# Which CSV files contain the string SAPILYN?
for f in *.xls; do awk '/SAPILN/{print $1 ": " FILENAME}' $f|sort|uniq; done

# Don't need an eval()
bytes=$(find $TMPLST -printf "%s") ; if [ $bytes -gt 0 ];then echo 'ok';fi
timestamp=$(find arch.tar.gz -printf "%t" )

# Conditional find(1) on any files older than 60 minutes exist check
if [ `find $PTH2 -maxdepth 1 -not -mmin -60  -printf "%s"` ];then ...
# Conditional find(1) on any files newer than 1 day old check
BTCHS=$(find $PTHBTCH -maxdepth 1 -name '*.xls' -mtime -1) if ! [ -z "$BTCHS"  ];then ERRMSG="$PTHBTCH xls files are less than one day old" catchWarning break fi

diskpct=$(df /cygdrive/c|tail -1|awk '{print $5}'|perl -pe 's/%//'); if [ $diskpct -gt 98 ];then echo 'may have full disk';fi

# Solaris 10 dark background and source my .bashrc (from Console)
/opt/sfw/bin/rxvt -rv -e bash&
rxvt -bg white -fg black -geometry 80x40+159+46 -fn "Andale Mono-12"

# Typing speed
START=`date +%s`;WORDS=`cat|wc -w`; STOP=`date +%s`; SPEED=`echo "$WORDS / ( ( $STOP - $START ) / 60 )"|bc`;echo "You have a typing speed of $SPEED words per minute."

# Configure passwordless ssh for no password:
ssh-keygen -t dsa  # on mario but  ssh-keygen -t rsa -b 4096  is a standard for 2012
cat /home/chronos/.ssh/id_dsa.pub | ssh rheckel@sdf.org 'cat - >> ~/.ssh/authorized_keys'
# Better passwordless ssh no password,  Ignores mkdir if ~/.ssh/ already exists:
ssh user@host "mkdir -p .ssh && cat >> .ssh/authorized_keys" < ~/.ssh/id_rsa.pub
# Best passwordless ssh
ssh-copy-id -i ~/.ssh/id_rsa.pub bheckel@sas-01.twa.taeb.com
ssh-copy-id bheckel@sas-01.twa.taeb.com

# Performance benchmark:
time echo "scale=5000; 4*a(1)" | bc -l -q

# Maximize / minimize rxvt font: Shift++ or Shift+- (+/- is using numeric pad with numlock on)

# Zip and remove original file on success
for c in 1 2; do zip lelim$c.sas7bdat.zip lelim$c.sas7bdat && rm -v lelim$c.sas7bdat; done
# Zip and remove original file on success (better)
for f in `find . -name '*.sas7bdat'`; do zip -mT $f.zip $f; done

# Human readable ctags listing:
$ ctags -x * > ctagsoutput.txt

# Create ctags (Exuberant Ctags 5.2+ - only those files whose names are mapped to languages will be scanned):
ctags -R <---probably  $ ctags *  for other versions, not sure how to recurse
# Then Ctr-] and Ctr-t in Vim to navigate or find function whose name you only know part of (assumes you've run ctags *):
:ta[g]/iknowpartialregex

# Canonical awk parse third column of pipe delimited - works in vim too e.g. :%!awk -F '|' '{print $3}' much easier than vim regex:
awk -F '|' '{print $3}'  # -F ' ' is unnecessary for space delimiters
awk '{print $3}'

# Performance test webpage:
time w3m -dump bashref2_05.html &>/dev/null

# Decompress from pwd to another dir:
unzip '*sumr*zip' -d ../tmp
# Just do a simple extract:
unzip -jo lelimssumres01a$ds.sas7bdat.zip

# 7zip zip
$ 7z a Android-4.4.pdf.7z Android-4.4.pdf
# 7zip unzip
$ 7z x proust.7z

# Date formatted using stftime
$ DATE=`date '+%Y%m%d'` DAY=`date '+%d'` HOUR=`date '+%H'` MONTH=`date '+%m'` MIN=`date '+%M'`
$ date +'%Y%m%d' # print formatted date (e.g. 20010622)
# or find Unix epoch time on a specific human date:
$ date +%s -d'Jul 7 2000'
# Make a local timestamped copy and zip only that new file
$ cp '\\rtpsawn323\SQL_Loader\Logs\LGI.log' LGI$(date +%Y%m%d%S).log; zip -ru log.zip . -i \*.log

# Print only a part, section, range, paragraph, of a file. Sort of like paragrep.
awk "/^xxSASx START/,/^xxSASx END/ {print}" ~/code/misccode/oneliners
ipconfig /displaydns | awk "/tpsh005/,/143.193.6.5/ {print}"
# Scan xml tags that span multiple lines, looking for list of material codes. Sort of like paragrep:
awk "/<ExtractString>/,/<\/ExtractString>/ {print}" cfg/DataPost_Configuration.xml | awk "/'[[:digit:]]+'/ {print}" > mats.txt

# Create backup filename with today's date datestamp
touch foo`date +%d%b%y`.txt
mv //192.168.52.128/callcenter-compile/{Custody.pl,Custody.`date +%d%b`.pl}

# Reset, blank titlebar title bar
unset PROMPT_COMMAND; echo -ne '\033]0;\007'
# Change, write to, rxvt titlebar (won't work in a script, must paste to term):
unset PROMPT_COMMAND; echo -ne '\033]0;ora\007'
unset PROMPT_COMMAND; echo -ne "\033]0;${PWD}\007"

# For quick email attachment transfers across boxes (head gives dividers between each file)
head -n 1000000000 .inputrc .vimrc .bashrc ~/code/misccode/_vtorrc >|essential_combined.txt
find . -name '*.sas'|xargs head -n 10000000 >| datapost.allcode.sas

# Grow enlarge a file to copies of itself (especially good if Vim's undo whacks _viminfo when it gets huge)
for i in `seq 1 500`; do cp FW_ONLINE.txt $i; cat $i >> FW_ONLINE.big.txt; rm $i; done

# Fix backspace in shell (for vi)
$ stty erase ^H intr ^C kill ^K  # or sometimes ^? instead of ^H

# Tampering check:
$ md5sum * > tampering.md5                        # build
$ md5sum * > check.md5; diff tampering.md5 t.md5  # check
$ md5sum * | diff - tampering.md5                 # better check

# Canonical sh bash if then else
if [ expression ];then commands elif [ expression2 ];then commands else commands fi

# Wrong number arguments no parameters passed to shell script:
[ $# -lt 2 ] && echo "Usage: $0 arg1 arg2" && exit 1
[ $# -eq 1 ] || echo "Usage: $0 arg1" && exit 1
if [ $# = 0 ]; then ... fi
# Less than 1 argument default parameter passed to shell script:
[ $# -lt 1 ] && echo "Usage: $0 arg1 arg2" && exit 1

# Default an empty missing bash shelldefault environment variable:
test "x$no_of_days" = "x" && no_of_days=10
# Default an empty missing bash shelldefault incoming parameter environment variable:
daysback=${1}
test "x${1}" = "x" && daysback=1

# Check for any default pararmeters arguments passed no parameter:
[ -z "$1" ] && echo "No argument supplied" && exit 1

# Don't complain if file does not exist:
[ -e $1.txt ] && rm -i $1.txt

# Length of string is 1 character:
if [ ${#month} -eq 1 ];then echo 'ok'; fi

if [ 'foo' = 'bar' ]; then... fi  # shell string comparison
if [ 2 -eq 42 ]; then... fi  # shell integer comparison

# Shell arithmetic addition:
$increment = `expr 42 + 1`

# Determine if a file has a certain suffix, extension (mnemonic # on keyboard is to the left, % is to the right).  Bash only.
if [ "${1##*.}" = 'tar' ]; then ... fi

# Untar single file from tarball
$ tar -x extract_only_me.txt -vf my.tar

CSVS=$(find $PTHPAR -maxdepth 1 -name '*.csv' -not -mtime 0)
if [ -z "$CSVS"  ];then # string is empty zero length, no files meet stale criteria, so now echo 'files have been touched today...'

# Determine Cygwin version:
$ cygcheck -c | grep ygwi

# Input/output IO redirection ( < and > ) connects processes with files, while the pipe ( | ) connects processes with other processes
diff <(sort file1) <(sort file2)
diff <(md5sum *.sas) <(cd tmp;md5sum *.sas)
diff <(md5sum *.mp3) <(cd /cygdrive/e/Decade/Disc\ 1;md5sum *.mp3)

# Yesterday in bash:
TODAY=`date +%b-%Y`
YESTERDAY=$(expr `date +%d` - 1)
echo "$PTHZIP/${YESTERDAY}-${TODAY}.zip"
# Better Postgres quoted string yesterday:
yesterday=`date -d "yesterday 13:00 " '+%Y-%m-%d'`
... created >= date('now')-interval '1 day'
yesterdayq=`echo \'$yesterday\'`
psql -h db-06.twa.taeb.com AETBMART -c "select avg(enrolledratio) from analytics.tmm_enrollmentperf where measure_enddt=${yesterdayq}"

# Remove leading zero:
$ date +%d | sed "s/0//"

# Substring first character:
$ if [ ${foo:0:1} = 9 ];then echo first char is 9;fi
# For ksh use sed (e.g. "NOTE: 0_MAIN_ValtrexCaplets.sas SYSCC: 0 ( ended: 17APR09:07:01:48 / minutes elapsed: 1.78826666673)" ) returns 1.78826666673
grep 'minutes elapsed' Valtrex_Caplets.log |awk {'print $11'}| sed 's/)//g'

# Substring in bash shell:
 [[ ${GS:0:17} != 'nothing to commit' ]] && echo '*'

# Not equal in bash
if [ $x != a ]; then echo not equal; fi

# ksh commandline completion - In vi-mode use <ESC> to control mode and then \ to complete or = to list.

# If stuck with csh use this to escape (an improved $ /bin/ksh )
exec ksh -o vi

# Is today Monday?  If today is Monday.  Use  !=  to negate.  Date filter by day of week.
if [ `date +%a` = Mon ];then echo ok; fi
if [ `date +%a` = Mon -o `date +%a` = Wed -o `date +%a` = Fri ];then echo ok; fi
# Is today the 15th?  Use  !=  to negate. Date filter by day of month.
if [ `date +%d` = 15 ];then echo ok; fi

# Watch for process, send warning email if it's not there
ps -ae | grep lms_nmgr | grep -v grep | read pid && echo "process found `date`" || echo "Subject: LIMS down on ushp9h" | mail lmswatch@ussung9

sz=$(find $PTHQT -maxdepth 1 -name '*.jpg' -print0 | xargs -0 ls -l | awk '{s+=$5}END{print int(s/1000000)}')

# Parse run-time out of a string and calculate if it's within threshold
tm=$(grep 'minutes elapsed' //Rtpdsntp032/DataPostArchive/Ventolin_HFA/CODE/log/Ventolin_HFA.log|awk {'print int($7)'})
if [ $tm -lt 70 -o $tm -gt 95 ];then echo 'uh oh outside time threshold';fi

# Rename powerpoint files with today's datestamp:
d=`date +%d%b%y`; for i in *.ppt; do mv "$i" `echo $i |sed "s/^......./${d}/g"`; done

# Cygwin bash at least
export PS1='\u@\h\$ '
# HPUX ksh at least
export PS1=`whoami`'@'`hostname`' '

# Barebones modified /Cygwin.bat (DO NOT specify  -fg white, rely on .Xdefaults):
$ rxvt -sl 10000 +j +sk +si -bg black -fn "Andale Mono-13" -e bash --login -i
# Normal Cygwin.bat rxvt in a single line:
@echo off & C: & chdir C:\cygwin\bin & start /B rxvt.exe -geometry 80x45+295+135 -fn "Andale Mono-13" -sl 10000 -sr -bg black -fg wheat -e /bin/bash --login -i

# Escape second and higher spaces (echo "cd /fo o/ba r" | sed 's/ /\\ /2' only gets 2nd one)
echo "cd /fo o/ba r" | sed -e 's/ /\\ /g' -e 's/cd\\/cd/g'

# For each file, do something to it like remove carriage returns using temp files:
for file in $(find /path/to/dir -type f); do tr -d '\r' <$file >temp.$$ && mv temp.$$ $file; done

# Canonical for each loop bash shell array [@] quotes array elements.  Arrays need not be decalared.
funcarr=(DPGeneral Valtrex); for f in ${funcarr[@]}; do $f; done

# Determine Windows Box uptime:
$ systeminfo /U 'wmservice\uxx1903' /P pw /S rtpsawn32 | grep Time

# Prepend 'vi' to beginning of line:
$ locate --ignore-case --database=/var/lib/locatedb.code foo|sed 's/^/vi /'
# Prepend and postpend prj:
cd ~/onedrive && find . -type d -iname "*${1}*" | sed 's#^\./# cd "c:/Users/bheck/OneDrive - SAS/#' | sed 's/$/" \&\& st /'

if [ -d '\\rtpdscel01dm06\rsh8680$' ];then echo 'directory exists'; fi

# bash for loop 
 for i in 1 2 3; do echo 'foo'; done;
# bash for loop shell array
for x in "${MAPFILES[@]}"; do ...; done

# Canonical timestamped backup quick tar quick backup:
cd $c && tar cvfz /cygdrive/u/bkup/dpCdrive.`date +%d%b%y`.tgz datapost/ ; cd -  # use "datapost/" instead of "/cygdrive/c/datapost" for easier untarring
tar cvfz /cygdrive/u/bkup/retain.`date +%d%b%y`.tgz $y/retainsamp_sas/
cp -i /Drugs/tmm_targeted_list_refresh.sas7bdat ~/bob/tmp/tmm_targeted_list_refresh.`date +\%d\%b\%y`.sas7bdat  # backslashes for cron

# Comma delimited items split into lines, one item per line (convert wide to long)
awk -F, '{ print $1; print $2; print $3 }' t.csv

# Count unique batches, in column 1, from CSV file:
tail +2 "CSV vlatrex_FreeWeigh.csv"|cut -d ',' -f1|sort|uniq|wc -l

# Is database up?
while true; do date;sqlplus -S sasreport/sasreport@sprd25 @donothing; echo 'ok';date;echo;sleep 300; done;
# Poor man's progress bar timer - how long does it take to connect to database:
i=0;x=0;y=0;while true; do x=`date +%s`;sqlplus -S sasreport/sasreport@sprd25 @donothing; y=`date +%s`;for i in expr $y - $x; do echo -n '.'; done; echo;sleep 300; done;

# Shell parameter passed-in bash shell variable check for starts with chars:
... elif [ "${1:0:4}" = 'http' ];then ...

ssh tpsh005 ps -ef | grep lms_client*|wc -l  # count LIMS users

# Print HPUX
lpr -dprinter_name file_name

# Cygwin w3m compile finish
find . -name "*.dll" -or -name "*.exe" | xargs -r strip

# Choose a random line from a file (bash provides $RANDOM):
F=dhammapada.txt; TOTLINES=`wc -l $F | awk '{print $1}'`; LINENUM=$[($RANDOM%${TOTLINES})+1]; sed -n "$LINENUM"p $F

# Iterate loop bash shell array list of strings filenames:
dotfiles=( .bashrc .vimrc ); for f in ${dotfiles[@]}; do echo $f; done

# bash ls skip do not show .orig files:
ls tzu!(.orig)

# Canonical bash function definitions
myfunction () { ... }
function myfunction { ... }

urxvt-X.exe -display 127.0.0.1:0.0 -bc -e /bin/bash --login

# Create empty directories and subdirs (skip files) TODO NOT SAFE FOR DIRS WITH SPACES:
mkdir -p $c/datapost && find * -type d | while read d; do mkdir $c/datapost/${d}; done

# bash calculator if bc isn't installed poor man's bc:
echo $[(5*3)-2 ]

# For Windows users who don't have tar and gzip:
find . -name '*png' |xargs zip plots14jun11.zip 
# Ignore the directories, all files go in single zip (make sure we don't have dup filenames in subdirs!)
find . -name '*png' |xargs zip -j plots14jun11.zip 
find datapost/ -name '*.sas' -o -name '*.xml' -o -name '*.xslt' -o -name '*.map' |xargs zip -j ~/code/misccode/datapostcode.zip  # -j eliminate folder structure
# TODO handle spaces in names -print0 and -0 aren't working
find $z/datapost/ -name '*.sas' -o -name '*.xml' -o -name '*.xslt' -o -name '*.map' |xargs tar cvfz ~/code/misccode/datapostcode.tgz

# Whack files named "!THIS IS DEMO" in all subdirs (record separator becomes null character instead of space):
find . -name '!THI*' -type f -print0 |xargs -0 rm

# Write file as root if you opened it accidentally as rheckel:
:w !sudo tee %

# Brace expansion - good for creating several new dummy files:
touch {a,b,c}{a,b,c}{a,b,c}

# Append to a remote text file via ssh:
ssh rheckel@sdf.org 'cat >> remotefoo' < localfoo

# System monitoring tools: top iostat ps vmstat (memory) lsof (list open files)

export PROMPT_COMMAND=; echo -ne "\033]0; override change rxvt window title\007"

# Is log file writeable?
[ -w log ];echo $?  # interactive testing
test -w log;echo $?  # interactive testing
if [ -f $file  ] && [ -w $file ]; then ...  # script

# Details on which version Linux distribution architecture release codename am I using:
lsb_release -a

# Avoid the bash Ctrl-s key combo of death that requires a Ctrl-q to escape its clutches
stty -ixon

# Temporary file:
$ PROCSFILE=$(mktemp) && echo $PROCSFILE && ps -ef >$PROCSFILE

# List all installed apt-get packages:
sudo dpkg -l
# Install .deb package on debian ubuntu:
sudo dpkg -i google-chrome-stable_current_i386.deb
# Fix Linux timezone:
sudo dpkg-reconfigure tzdata
# Which large packages are taking up space?:
dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n

# Query apt-get query installed programs:
sudo apt-cache search vim
sudo apt-cache show vim
sudo apt-cache policy vim

# Debian, Ubuntu regular update mantra (not dist upgrade!):
sudo apt-get update && sudo apt-get upgrade
sudo apt-get -y update && sudo apt-get -y upgrade
sudo apt autoremove

# Process substitution ssh diff across network DEPRECATED USE VIM:
vi -d <(ssh b@sas-01.twa.taeb.com "cat /Drugs/Personnel/bob/t.sas") <(cat /Drugs/bheckel/t.sas)
vi -d <(ssh b@atlon3 "cat /Drugs/EGP/Humana_weekly_task_Freds.sas") <(cat Freds_priority_enrollment.orig.sas)

# Diff two files across the network on two boxes using ssh:
ssh user@remote "cat /path/to/remote/file.txt" | diff - /path/to/local/file.txt

# Does vi exist on this box? (avoid which(1):
hash vi &>/dev/null if [ $? -eq 0 ]; then export EDITOR=vi fi

# bash.  Increment +1 ++ like C:
i=$(($i+1))

# Do these batches exist in any of these csv files? Just list filenames if so:
for f in 2ZM3089 2ZM3090; do find . -name 'asampext*' |xargs grep -l $f; done;
# Then filter them in vim:
g!/Bat\|2ZM3089\|2ZM3090\|2ZM3091\|2ZM3092\|2ZM3093/d

# Canonical touch file time stamp date stamp datestamp.
touch -d 'May 2 2008 15:03' foo.txt
touch -d "Sep 24 2006" foo.txt
touch -d "Sep 24" foo.txt
find . -not -name '*co'|xargs touch -d 'Mar 24 2011 13:26'
touch '\\rtpsawnv031\pucc\ALTREX_Caplets\INPUT_DATA_FILES\tmp\DPRunFlg.txt'
touch  //rtpsawnv031/pucc/ALTREX_Caplets/INPUT_DATA_FILES/tmp/DPRunFlg.txt

# Generate a semi-unique bash datestamp:
local unique=`date +%d%b_%H%M`

# Sort on column 3:
find -ls | sort -k 3

# Which processes are running on port 80:
lsof -i :80
# shows pid 25226
ls -l /proc/25226/exe

# Inplace edit (without vi):
sudo sed -i -e "s/# deb/deb/g" /etc/apt/sources.list  # caution sed will turn ff=unix
sed -i '/ifwordonline/s/changeme/tothis/' t.pl  # caution sed will turn ff=unix
sed -i '/polic/s/squad/pod/' bladerun_crawl
# Inplace edit change last field in each t1.txt t2.txt t3.txt - NO BACKUP
find . -maxdepth 1 -name 't[123].txt' | xargs sed -i  -e 's/04\/20\/2017"$/03\/30\/2017"/'

# Avoid having to cd / to untar a cygwin package:
tar -C / -xvf connect-proxy-1.101-1.tar.gz

# Ubuntu system information poke around:
df -h && echo && free -m && echo && grep name /proc/cpuinfo | uniq && lspci | grep VGA && echo && xrandr | grep connected && echo && uname -rms && echo && lscpu

# Easy work synch backup using the previous tarball as a sentinel - Cygwin:
ls -l ~/c && sleep 10 && cd ~ && find code/ -type f -newer c |xargs tar cvfz c && cd -

# Easy work synch backup using the previous tarball as a sentinel - Ubuntu:
cd ~ && find -L code/ -type f -newer ~/Downloads/c.PREV |grep -v '/.git/'|grep -v '.swp'|xargs tar cvfz ~/Downloads/c.NEW  # Ubuntu simple synch
cd && find -L code/ -type f -newer ~/Downloads/c.PREV |grep -v '/.git/' |grep -v '.swp' |xargs tar cvfz ~/Downloads/c.NEW && scp ~/Downloads/c bheckel@dsf.org: && ssh bheckel@dsf.org mailx -a c -s c rsh8680@sgk.com && cd -  # Ubuntu complex synch

sudo fdisk -l
sudo dd if=lubuntu-desktop-12.04-1-miniand.com.img of=/dev/sdb1 && sudo sync

# Imagemagic PNG to PDF conversion:
meth=`find /cygdrive/x/ethylcellulose/ -maxdepth 1 -name '*.png'` && convert $meth -append -compress zip /cygdrive/x/ethylcellulose/Methyl.pdf

ln -s /cygdrive/c/fooreal foosymlinkedfake

# Find filetype by date:
find $z/datapost/dataDose/ |grep 'lims_.*t_.*sas7bdat' |xargs ls -l |awk '{print $10 "\t\t" $8 $7}'|sort

# Build HREF using substitution
find /cygdrive/c/datapost/data/SGK/Zebulon/ -name '*.pdf'|sed 's/\/cygdrive\/c//' |perl -pe 's/(.*)\/(.*)/<a href=http:\/\/zdatapostd.sgk.com\1\/\2\/>\2<\/a>/'

# Run Cygwin X:
xinit -- -multiwindow
ssh -l bheckel -Y 10.11.12.13  # then in resulting xterm /sas/sashome/SASManagementConsole/9.4/sasmc

# Exceed Hummingbird replacement is Cygwin X (for CDE desktop access):
$ XWin.exe -query trpsh005  # don't use startxwin unless want commandline only

# Build cp commands to replicate files to another tree:
find data/sgk/zebulon -name 'ols*.sas7bdat'|sed 's/\(.*\)/cp -i \1 \/cygdrive\/x\/datapostdemo\/\1/'

# Find the bash process id of the current process:
echo $$

# Date calculate date that was 3 years ago from today:
~/code/scripting/datecalc -1080
# Date calculate 42 days from Xmas eve:
~/code/scripting/datecalc 12/24/05 42

# Add a line to first line in each file:
for f in ja_e_*.htm; do cp $f tmpf; echo '<link href="../ja.css" rel="stylesheet" type="text/css" />' >| $f; cat tmpf >> $f; done;

# Search a webpage for text string:
w3m -dump file:///C:/datapost/cfg/Data.xml|grep foo

# Exclude TR* from find but do include OLS*:
find datapost/ -name '*.csv' -a -not -name 'TR*.csv'|grep OLS

# 607378 /cygdrive/z/datapost/data/SGK/eZbulon/DMPI/dAvairiDskus/OLS_0016T_dAvairiDskus   607379 /cygdrive/z/datapost/data/SGK/eZbulon/DMPI/dAvairiDskus/OLS_0016T_dAvairiDskus
x=`diff -ybB -W180 $u/tmp/{ols_PREV.txt,ols_CURR.txt} |perl -pe 's/(^\d+) [^\d+]*(\d+)[^\d+]*(\d+).*/$3-$1/e'`
[[ $x -lt 0 ]] && echo 'FAIL - reduced record count'; [[ $x -ge 0 ]] && echo 'ok'

# Multiple if then choices:
... elif [[ "$HOSTNAME" = 'EZBWL12H26564' || "$HOSTNAME" = 'EZBWD12H01067' ]]; then ...

echo "${fg_redbold}SERIOUS FAILURE - GDM has reduced record count${normal}"

# Insert a CSS include before the closing HEAD tag:
perl -pi.bak -e 's#</head>#<link href="../english.css" rel="stylesheet" type="text/css" /></head>#g' *.html

# Frequency count:
egrep -o "(replic|was)" bladerun_crawl |sort|uniq -c|sort -r

Pico save and exit immediately: Ctrl-x

# Set up ssh ssl tunnel:
ssh -f -L 110:localhost:110 -l rheckel mail.freeshell.org

#     1072    4384    1072       4948    0 1003   Feb  1 /usr/bin/bash
ps | awk '$8 ~ /bash/' -

# Sum column of a CSV file:
awk -F"," '{x+=$2}END{print x}' t.csv
awk -F"," '{x+=$2;print}END{print "Total,"x}' t.csv
# Sum column of a CSV file for only myItem1:
awk -F, '$1=="myItem1"{x+=$2;}END{print x}' t.csv
# Sum row counts of several files:
for f in $(find /Drugs/Immunizations -name '*.csv' -a -not -name '*del*' -daystart -mtime -3); do wc -l $f done | awk -F" " '{x+=$1}END{print x}'

# Unique values of the first column (SELECT DISTINCT * FROM COL1). awk database:
head -n1 t.csv |sed 's/,/\n/g' |nl  # determine field nums
awk -F, '{a[$1];}END{for (i in a)print i;}' t.csv  # filter only that field
# Only list 2014 dates (SELECT DISTINCT * FROM COL28 WHERE COL28 LIKE '%2014%'):
awk -F, '$28 ~ /2014/ {a[$28]} END{for (i in a) print i}' mondayOLS_0016T_vairDiskus.csv |sort |tail -n20| tac
grep 100000089317 t.csv | awk -F, '{a[$19];}END{for (i in a)print i;}' - |uniq |sort

# Are we on Cygwin?:
x=`uname`; if [ ${x:0:6} = CYGWIN ];then echo isCygwin; fi

# awk vs. cut:
git show-ref --heads |cut -d' ' -f2
git show-ref --heads |awk 'print{$2}'

# Open most recent file:
vim $( ls /tmp/*.__* | sort -r | head -n 1 )

# Check for stale (week old+) image files:
find /cygdrive/z/DataPost/data/SGK/Zebulon/ -name '*.png' -mtime +7 |xargs ls -gGh

# Extract .xz file
tar xvfJ foo.xz

# Does file exist?:
$ [ -e t.sh ] && ( echo file exists; exit 1 )

# if then using only brackets:
[ -e /rugs/eports/Health\ Plans/Archive/foo.txt ] && echo file exists

# Add user to another group:
usermod -a -G sas bheckel

# scp recursive scp:
scp -r bheckel@sas-01.twa.taeb.com://Drugs/Cron/Daily/update_shortname_ds/ .
scp -r /Drugs/Drugs/AcmeControl bheckel@sas-01.twa.taeb.com:tmp/

# Send email without an input file as body:
0 * * * * echo 'ok' | mailx bob.heckel@taeb.com > /dev/null 2>&1

# CentOS package manager installer:
sudo yum install vim-enhanced.x86_64
sudo yum install postgresql  # psql

# CentOS reboot:
sudo shutdown -r now

# Sync a remote directory to the local system.  -a syncs recursively, preserves symlinks, special and device files, modification times, group, owner, and permissions, -P gives progress bar for the transfers and allows resume interrupted transfers
rsync --dry-run -avP b@talon3://mnt/nfs/home/bheckel/tmp/1440187439_21Aug15/dir1/ dir1  # pull - trailing slash important
rsync -avP dir1/ b@talon3://mnt/nfs/home/bheckel/tmp/1440187439_21Aug15/dir1/  # push
rsync -avP --delete dir1/ b@talon3://mnt/nfs/home/bheckel/tmp/1440187439_21Aug15/dir1/  # true sync - also rm remote files like local ones already deleted manually

# Megfile about 100MB
dd if=/dev/zero of=biggarbage bs=10000 count=10000

# Find a partial contains string:
if [[ "$f" == *"elet"* ]]; then  # bash wildcard
if [[ $string =~ .*My.* ]]; then  # bash regex

# Shell parse string suffix capture text from 'average:' to end of string:
MYUP=`uptime`
LOAD="${MYUP##*average:}"

# Bash parse string suffix capture text from space to end of string:
JOB='clients.sas -foo 256'
CLIENTID="${JOB##*foo }"  # 256
# Bash strip suffix from foo.txt
echo ${foo%.*}

tmux list-sessions  # we see sas0-ses2 is not '(attached)'
tmux -2 a -t sas0-ses2  # attach if session exists, note sas0-ses2 may be a digit if originally created anonymously
tmux -2 a  # if only one exists to reattach to
tmux -2 new -s sas0-ses3  # if we need a new session
tmux kill-session -t sas0-ses3

if (( `df -h /saswork|grep saswork | awk '{print $4}'|sed s/%//g` > 90 )); then echo warning | mail -s 'workspace almost full' bob.heckel@taeb.com; fi

$ nice -n19 gpg --encrypt --recipient 'Obc (Out Dial App) <obc\@taeb.com>' t.gpg
$ gpg --output /Drugs/Imm/20160817/Output/GE_Imm_20160817.csv.gpg --encrypt --recipient pgp@abc.com /Drugs/Imm/20160817/Output/GE_Imm_20160817.csv

# Check a file extension:
if [[ $f = *.jpg ]]; then echo 'is a jpg' fi

# Check bash string for equality
if [ $s = 'foo' ]; then
# Check bash number for equality
if [ $? -eq 1 ]; then

# tar a directory without retaining the directory structure:
tar cvfz tmp.tgz -C /cygdrive/e/TMMEligibilittPatientReport/20160517/Output .

# Extract the digits 329 coming after space for Log naming:
CID='-sysin /Drugs/Cron/Weekly/TMMCensusHPLoop/tmm_census_loop.sas -sysparm 329'
CLIENTID="${CID##*sysparm }"

watch -d 'ls -l ~ |grep sas'

# Read control file to determine which code to run:
while read -r clid; do nice -n19 $SAS -sysin ~/$clid.sas -log ~/$clid.log done <$FILE

# Count number of cores.  Cores = Cores per socket x Sockets.  CPU cores count.
nproc --all
lscpu | egrep 'Thread|Core|Socket|^CPU\('
# Count available memory:
vmstat -s | grep memory

# Process using most memory:
ps -e -o pid,vsz,comm= | sort -n -k 2

# Name of this running program without the path:
THISPROG=${0##*/}

# Remove carriage return from filename:
$ rename $'\r' '' tmm_build_multiple_clients.44*
$ rename 'fdw.csv' 'fdw.ORIG.csv' *.csv

uuencode /Drugs/TMMEligibility/Studies/QC_DelhcaInc.pdf | mail -s 'mail attachment' bob.heckel@taeb.com

# Shell bash filetest file test operators comparisons flags:
-e  exists, -d is a directory, -f is an ordinary file, -r can be read by the process, -s has a nonzero length, -w can be written by the process, -x is executable, -L is a symbolic link, -z has zero length

# Lookup username from user number id:
getent passwd "594" | cut -d: -f1

# Zero pad a list of numbers e.g. 001 002:
awk '{printf "%03d\n", $0}' junk

zip -P passw0rd secure.zip file

# Grep all SAS logs in a directory.  More powerful than xargs:
for f in $(find /sasdata/Cron/Daily/cce -name '*.log' ) \ do \ ~bheckel/bin/saslog_grep.pl x $f \ done
for f in $(find . -name '*.log'); do echo $f; saslog_grep.pl $f | grep ERROR; done;

# Convert mapped backslash Windows drive path to forwardslash Unix:
perl -e '$x=q{T:\TMMEligibility\WallMediCent\Imports\20170522\Data}; $x=~s:\\:/:g; $x=~s|T:|/Drugs|; print "$x\n";'

# Summary of disk space by folder
for i in `find /Drugs/Personnel -maxdepth 1 -type d`; do du -sh $i; done | sort -hr

# Poor man's expect:
printf 'y\nbob.heckel\nMyPw\npush\n' | /opt/cisco/anyconnect/bin/vpn -s connect portal.taeb.com

cat ~/clids.txt | xargs ~bheckel/bin/isdata.sh; ssh b@sas-01.mrk.taeb.com 'cat ~/clids.txt | xargs ~bheckel/bin/isdata.sh'

# Make tmux windows panes tile evenly:
:select-layout even-horizontal

# What is my DNS?:
nmcli dev show | grep DNS

# What is my IP (if no ifconfig):
curl http://ifconfig.me/ip

# Which distro am I using:
cat /etc/*-release | grep VERSION | perl -pe 's/VERSION="//g'

# Take first field in pipe delimited file in all 2017 folders
for f in $(find /Drugs/TMMEligibility/GiantEagle/Imports/2017* -name 'GiantEagle_TMM_candidates_fdw.csv' ); do cut -d'|' -f1 $f >>~/junk20180417; done;

# RGB hex color picker in terminal print colors available to tmux and vim:
for i in {0..255} ; do printf "\x1b[38;5;${i}mcolour${i}\n"; done

whatismyip=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')

# ssh cron ssh:
50 15 * * * ssh b@sas-01.mrk.taeb.com ~/bin/saslog_grep.pl -x /sasdata/Cron/Daily/TMMTargetedList/tmm_run_check.log

sudo timedatectl set-timezone America/New_York

# Default shell bash variable if none provided:
JIRA=${1:-99999999}

# Find all control characters like BOM byte order mark (handles spaces in filename):
find . -type f -print0 | xargs -0 grep --color='auto' -P -n "[\x80-\xFF]"
grep --color='auto' -P -n "[\x80-\xFF]" SHADOW_INDEX.PRC

# Remove last 4 characters from end of string (space mandatory!):
echo ${PS1:0: -4}

# Static libraries have names like libname.a, while shared libraries are libname.so.x.y.z where x.y.z is some form of version number. Shared libraries often also have links pointing to them.  The standard libraries come in both shared and static formats.  You can find out what shared libraries a program requires by using ldd (List Dynamic Dependencies):
ldd /usr/bin/lynx

# Cygwin Windows free diskspace free
while true; do df -h '//opsawn557/e$'; sleep 60; done

# Capture current Cygpath in Cygwin:
cygpath -w $PWD  # or cygpath -w `pwd`

# fluxbox Resize window: Alt+drag with the right mouse button
# fluxbox Move window: Alt+drag with the left mouse button

# Chain two search criteria i.e. first find x then find y in the x files - a double bgrep:
vim `find . -type f -print0 | xargs -0 grep -i 'ACCOUNT_TEAM' | awk -F: '{print $1}' | sort | uniq | xargs grep -i 'approved' | awk -F: '{print $1}' | sort | uniq`

# if then default parameter:
gco() { \ if [ -z "$1" ];then \ git checkout develop; \ else \ git checkout feature/ORION-${1}; \ fi \ }

# Which of my ports are listening:
lsof -i -P -n|grep LISTEN

# Find monitor resolution aspect ratio:
xrandr

# system messages since last boot:
journalctl -b -1
journalctl --since "2015-02-02 20:30:00"

systemctl list-unit-files --state=enabled --no-pager

# Remove local and remote branches:
git branch -D feature/ROION-50062 && git fetch -p && git push origin --delete feature/ROION-50062

xxUNIXxx END:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:

xxSCRIPTINGxx START:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: {{{1

# Commandline switch -n says not to autoprint, -p says to print while looping, -a autosplits $_ into @F

# Perl as a filter so you don't need to worry about sed & awk regex syntax:
ssh trpsh005 ps -ef | grep lms_client*| perl -ne 'print if $_ =~ /\d?\d:\d\d:\d\d/'

perl -V  # determine the @INC path

find `perl -e 'print "@INC"'` -name '*.pm'  # which Perl modules are installed
find /usr/lib/perl5/site_perl/5.6.1/ -name '*.pm'  # which Perl modules I installed

# Test perl code (or a regex) interactively in the Perl debugger:
$ perl -de 0
DB<1> $x='a1'; $x=~/(\d)/; print $1 # must be on same line or lose $1

# Test perl from the command line without debugger (hardcore):
$ perl; $x='test string'; $x =~ /^(test).*/; $y=$1; print $y; <Ctr-d>
# Better
$x='test string'; ($y = $x) =~ s/^(test).*/$1/; print $y;
# Best (we get readline capability)
perl -e '$x="test string"; ($y=$x)=~ s/^(test).*/$1/;print $y;'

# Hash slice:
perl -e '@h{key1, key2} = (1,2); print $h{key2};'
# Copy hash h2 into hash h1 (silently overwrites any dups):
@h1{ keys %h2 } = values %h2;

# Regex to pick out the filename, i.e. basename, tail, and strip the path off:
$basefilename = $1 if $fullyqualifiedpath =~ m|[/\\:]+([^/\\:]+)$|;
# Pick out the fully qualified path and strip off the filename:
$directory = $1 if $fullyqualifiedpath =~ m|(.*[/\\:])+[^/\\:]+$|;
# Stem is $1 basename is $2
$file =~ m#((?:[^/]*/)*)(.*)#;

# Specify where to install Perl module (if you want a non standard directory):
perl Makefile.PL PREFIX=~/perllib
# then must later say  use lib '~/perllib';  or  export PERLLIB=~/perllib

# Determine if singular or plural word is required:
printf("Retrieving %d email%s...\n", $mailcount, $mailcount==1 ? "" : "s");

# Hook operator:
my $r = $rchg!=1 ? 'records' : 'record';

# Determine current day of the week:
$current_weekday = (Sun,Mon,Tue,Wed,Thu,Fri,Sat)[localtime(6)];

# Canonical directory read:
opendir D, "$dir" or die "$!"; @FILES=grep { !/^..?$/ && !-d } map "$dir/$_", readdir D;
# Quick directory read, skip dot files while reading directory:
@files = grep(!/^..?$/, readdir DIR);

# Put a pair of items into a hash:
$header{$1} = $2  while /(File|Node|Prev|Next|Up):\s*([^,]*)/g;
# Better
%h = /^(.*?): (.*)$/gm;

# Orcish maneuver v5.10 returns the value from the hash, if it exists. Otherwise, it calculates, caches, and returns the value:
my $id = shift; $user_cache{$id} //= create_user($id);

# Cache keys in a hash (the Orcish maneuver), sort on modified time:
@sorted = sort { ($modtimes{$a} ||= -M $a) <=> ($modtimes{$b} ||= -M $b) } @filenames;

# Rewind a file handle:
seek(FILEHANDLE, 0, 0);

# Cryptic OOP constructor:
sub new { bless({}, shift); }

# Do something every 5 times using modulus:
unless ( $i++ % 5 ) { print 'foo'; }
# Do something every 3000 times using modulus:
print $_ if ($i++ % 3000) == 0;
next unless ( $. % 3000 ) == 0;

# Only unique array elements:
%seen = undef; @uniques = grep(!$seen{$_}++, @items)
# Only unique array elements:
@uniques = keys %{ { map {$_ => 1} @items } };
# Only unique array elements:
undef @uniq{ @items }; @uniques = keys %uniq;  # best?

# Remove empty or undef elements from an array:
@x = grep { !/^$/ } @x;

# Format date string (see LibC for %b, etc.).  E.g. this rets 'May 25'
use POSIX qw(strftime);
$fmtdt = strftime("%b %d", localtime(991422942));
$matchdt = strftime('%Y%m%d%H%M%S', localtime(time));

# Time stamp the last modified date.
my $mtime = (stat($0))[9]; my $t = localtime $mtime; print "Last Modified $t";

# Inplace string substitution without clobbering whacking original variable:
($y = $x) =~ s/foo/bar/g;

# Default (unless a 0 is a valid possibility)
$leavealoneifset ||= $default;
$best_suffix ||= $soso_suffix || $notsogood_suffix || 'txt';

# Split a scalar into an array, saving only part of the split result.
$x = 'zero:one:two';
@z = (split /:/, $x)[0,2]    # @z contains 'zero', 'two'

# lvalue is in scalar context (right side is therefore evaluated in a scalar context, $a gets 8 !!!):
$a = (2, 4, 6, 8); 

# Prepend, concatenate, something to each element of array:
@x = grep { s/^/foosuffix/ } @x

# Input from args or stdin, smash several all parameter arguments into one:
$_ = (join ' ', @ARGV) || <>; 

# Source code passed in implicitly via standard input:
echo "print qq(Hello @ARGV)" | perl - World

exit 0  # <--- success  exit 1 <--- failure  both same as shell

# Determine which compiler Perl was compiled with
perl -e 'use Config; print "$Config{'cc'}"'

use whine qw(toobusy twokids codetooscarylookin);  # no commas!

# Iterate over an array:
for ( $i=0; $i<@colors; $i++ ) { ... }
# or Iterate over an array:
for ( $i=0; $i<=$#colors; $i++ ) { ... }
# or Iterate chomp over two arrays:
map { s/[\r\n]+$//; } @colors1, @colors2;

# Constant declaration:
use constant SECONDS_PER_DAY => 60 * 60 * 24;       # 86400 seconds
$delta = abs($stamp - $stamp_mirror) / SECONDS_PER_DAY;

# Constant used as filehandle (must use concatenation in the open()):
use constant OUTPUTTXTFILE => 'foo.txt';
open FILE, '>>'.OUTPUTTXTFILE || die "$0: can't open file: $!\n";

# Classes OOP
$request->redirect($new_url)
# same as
Request::redirect($request, $new_url)

# A subroutine's incoming parameters are held in @_  This includes flattened arrays, etc. (it may be inefficient since it is "pass by value").
my @parms = @_;

# Force, prepend, a non-standard directory onto @INC:
unshift(@INC, '.');
# More elegant prepending of @INC:
use lib ".";

# Don't be greedy on regex:
$x = 'multi, comma, line'
$x =~ /(.*,)/   <---greedily returns 'multi, comma,' in $1
# but replacing the dot with  [^,]  i.e. what you don't want is non-greedy
$x =~ /([^,]*,)/  <---$1 is "multi,"
$x =~ /(,[^,]*,)/;   <---$1 is ", comma,"

$x = 'be stingy very stingy please'; $x =~ s/.*stingy/xxx/; print $x;  <--- xxx please
$x = 'be stingy very stingy please'; $x =~ s/.*?stingy/xxx/; print $x; <--- xxx very stingy please

# Regex matches floating point numbers.
/^[+-]?(\d+\.\d+|\d+\.|\.\d+|\d+)([eE][+-]?\d+)?$/
# or regex that matches floating point numbers less Perlishly,
(\+|-)?([0-9]+\.?[0-9]*|\.[0-9]+)([eE](\+|-)?[0-9]+)? 

# Remember not to use = when you need =~
$x =  /foo/;  # searches $_, puts result in $x
$x =~ /foo/;  # searches $x, discards result

# Strip HTML tags from a string:
$string =~ s/<([^>]|\n)*>//g;

# Lookahead (?=) lookbehind (?!) regex assertions.
$x = "foobar";
$x =~ /foo(?!bar)/;  # doesn't match, 'bar' follows 'foo'
$x =~ /foo(?!baz)/;  # matches, 'baz' doesn't follow 'foo'
$x =~ /(?<!\s)foo/;  # matches, there is no \s before 'foo'

# On the fly substitution of array scalars with hash references:
@usernames = ('joe', 'ted', 'larry');
map { $_ = {$_ => length} } @usernames;
# Now @usernames is ( {'joe' => 3}, {'ted' => 3}, {'larry' => 5})
print $usernames[0]->{joe};  # rets 3

# Redirect STDERR error messages to STDOUT.
open(STDERR, ">&" . STDOUT) or die "Cannot Redirect STDERR: $!";

# Low-level alternative to print
write(2, "I'm using STDERR", 16);

# Want affirmative from user:
die unless <STDIN> =~ /^y|^yes|^ok/i;
# or
<STDIN> ne "n\n" ? print "ok\n" : die "Exiting\n";
print "keep going? "; <STDIN> eq "y\n" ? print "ok\n" : die "dead\n";

# Skip the first line of a textfile:
cat junk.txt | perl -e 'while(<STDIN>){print $_ if $.>1}'       # ok
cat junk.txt | perl -ne 'print if $.>1'                         # better
perl -ne 'print if $.>1'  junk.txt                              # best

# Lowercase a word from the command line:
$ echo ThisWord | perl -pe 's/(.*)/\L$1\E/'

# Uppercase (a.k.a rightcase titlecase smartcase) first letter of word in $all_lower:
($first_ltr_uppercased = $all_lower) =~ s/(\w+)/\u$1/g;

# Search and replace change background color of all webpages, recursively:
find . -name '*.html' -exec perl -pi.bak -e "s/BGCOLOR=\"#ffffff\"/BGCOLOR=\"#cccccc\"/" {} \;
# Then if all is well:
find -name '*.bak'|xargs rm

# Search and replace (interactive :bufdo %s/foo/bar/gic may be better):
$ perl -pi.bak -e "s/foo/bar/" *.sas
# Search and replace inside multiple files (there is no UNDO so may want a backup 1st  $ tar cvfz ~/tmp/bak.tgz *ss_wee*):
find . -name '*ss_wee*'|xargs perl -pi -e "s/db6/jaspertwa/g"
grep -RiIl --exclude-dir={subdir1,subdir2} 'search' | xargs sed 's/search/replace/g'

# Delete multiple blocks paragraphs of text (consecutive with start and finish lines):  TODO why can't use xargs (it only mods first file)??
for f in `find . -name dn.01.0.bodh.html`; do perl -i -e 'BEGIN{$/=undef}$x=<>;$x=~s#<link rel="shortcut icon.*</link>##sg;END{print $x}' $f; done
for f in `find . -name 'testch*.htm'`; do perl -i -e 'BEGIN{$/=undef}$x=<>;$x=~s/Ukrainian Banner START.*?Ukrainian Banner END/FOOZBALL/sg;END{print $x}' $f; done

# Modify all html files by inserting a similar line below:
find . -name '*.html' |xargs perl -pi.bak -e 's:(<link rel="stylesheet" type="text/css" href.*css/screen.css"  />):MARKER_TO_DELETE$1\n$1:g  # 1-replicate line and prepend unique marker
find . -name '*.html' |xargs perl -pi.bak -e 'next unless /MARKER_TO_DELETE/; s:css/screen.css:css/fonts.css:g'  # 2-make change to new line
find . -name '*.html' |xargs perl -pi.bak -e 's:MARKER_TO_DELETE::g'  # 3-remove unique marker
find . -name '*html.bak' |xargs rm  # 4-if successful

# Swap array elements using an array slice:
@x = qw(a b c);  # produce a list of strings
@x[0,1] = @x[1,0];  <---holds bac now

# In Perl, unlike shell and C:
@ARGV contains the command-line arguments for the script but does not include the command name.  E.g. $ ./test.pl foo bar  <---$ARGV[0] is foo and $0 is test.pl
# Get at them like this:
foreach $arg ( @ARGV ) { ...work on param $arg one at a time... }
# or better:
map { print "$_\n" } @ARGV;
# Contrast with:
while ( <ARGV> ) { chomp; ...work on each line of each param... }

# Filter out all but plain text files from the command line parameters.
@ARGV = grep { -f && -T } @ARGV;

# Clear, initialize, an array:
@arr = ();  # assign an empty list to the array
# Clear, initialize, a hash:
%hash = ();  # NOT  %hash = {};

perl Makefile.PL && make && make test && make install  # perl install mantra - build module downloaded from CPAN

# Number of elements in hash:
print scalar keys %myhash;

# Perl variable heredoc
$stuff = <<"EOT"; ... EOT
# or Perl print heredoc
print <<"EOT"; ... EOT

# Variable interpolation of constants -- print (ugly but it works):
use constant FOO => 0;
print qq:The value of FOO is @{[ FOO ]}\n:;
# Variable interpolation of constants -- regex (ugly but it works):
use constant EXTENSION => 'PDF';
next unless ( $d =~ /.*@{[EXTENSION]}$/ );

# Search file for lines containing a specific 2 digit number in a specific column position, in this case 77 and 78
$ perl -ne '/.{76}(..)/; print if $1==15' foo.txt
# same as the verbose:
$ perl -ne '$_ =~ m/.{76}(..)/; print "$_" if $1 == 15' foo.txt
# or for character queries:
perl -ne 'm/.{174}(\w)/; print if $1 eq "Y"' foo.txt

# To sort on a specific column, see the Schwartzian transformation

# Current time timestamp since the Epoch:
print localtime();
# Current time timestamp human-readable:
print scalar localtime();

# Current date today:
$currentday   = (localtime())[3];
$currentmonth = qw(January February March April May June July August September October November December)[(localtime())[4]];
$currentyear  = (localtime())[5]+1900;

# Create a unique filename based on seconds since the Epoch using Perl:
print "foo" . time() . ".txt";

# Remove quotes from each element of an array of enquoted items:
my @fl = map /'(.*)'/, @filelist;

# Create a hash using map on the fly:
my %h = map /(BF19\.\w\wX(.*)\..*)/i, @fl;

# Simple debug comment out a large block of code:
=debugbobh  ...code...  =cut

require Data::Dumper;
print STDERR "HASH DEBUG:\n", Data::Dumper::Dumper( %h ), "\n";

# Set a cookie (after Content-Type: line):
print "Set-Cookie: lastused=foo; path=/; expires=$cookie_expire;\n\n";

# Set a default for an undefined value (using the ternary hook operator):
$x = ($x ? $x : 42);
# Maximum using ternary hook:
$max = $x > $y ? $x : $y;

# Left zero pad a number:
$j = sprintf("%02d", $i);

# C's break is Perl's last.  C's continue is Perl's next.

# Read or edit a Perl module:
vi `perldoc -l net::ftp`
# Documentation for a Perl function:
perldoc -f binmode
# FAQ search:
perldoc -q sort

# Syntax check a directory:
for f in *.pl; do perl -c $f; done

# Automatic command line Perl module installation:
perl -MCPAN -e shell  # interactive mode
perl -MCPAN -e 'install DBI'
perl -MCPAN -e 'install DBD::mysql'

# Commandline Perl:
# perl -l  # add a newline to results
# perl -a  # use @F which splits on whitespace
# perl -n  # while(<>){...} loop - use -p instead to print
# perl -e  # command line perl code in one line

# Sum the 3rd column of a file
perl -l -a -n -e '$n+=$F[2]; END{ print $n}' threecolumnsofnumbers.txt
# Add the first and last columns (@F comes from using -a):
perl -lane 'print $F[0] + $F[-1]' whitespace_separated_nums.txt
# Thanks to the switches, this is what it's doing:
while ( <> ) { @F = split(' '); print $F[0] + $F[-1]; } 
# Compare with:
cat whitespace_separated_nums.txt | awk '{i = NF; print $1 + $i}'

# Print field 3 like awk:
perl -F'\|' -lane 'print $F[2]' pipedelimited.data

# Are columns 1 and 3 equal?
perl -ne '@x=split; print if $x[0] != $x[2]' foo.txt
perl -ane 'print if $F[0] != $F[2]' foo.txt  # same, automatic @F instead of @x

# nl(1) number line replacement
perl -n -e 'print "$. $_"' foo.txt
# Better nl(1) number line replacement
perl -pe '$_ = "$. $_"' foo.txt
# Best nl(1) number line replacement
perl -pe 's/^/$.: /' file1 file2 file3

# Automatic LINE: label is available under -ne
perl -ne 'next LINE unless /eplicant/; print "$. $_"' bladerun_crawl 
# Simpler if don't need the label to break out of a nested loop:
perl -ne 'next unless /eplicant/; print "$. $_"' bladerun_crawl 

# Search a tab-delimited file (may want to use -a)
perl -ne '@x=split /\t/; print "@x" if $x[1]=~/foundme/' foo.txt
# Search a tab-delimited file after removing header line (may want to use -a)
perl -ne '@x=split /\t/; print "$x[0] and $x[1]\n" if $.>1' *.xls

# Remove nulls (ASCII 0) from a file (also works as :'<,'>!perl -pe 's/\0//g')
perl -pe 's/\0//g' 
# Remove single quotes from a file.  Simple substitution like sed:
perl -pe "s/'//g" junk

# Replace all instances in files (without backups):
perl -pi -e "s:#\!/usr/bin/perl:#\!/usr/pkg/bin/perl:" junk
perl -pi -e "s/REPLACEME/foo/" dhammapada.rss

# Swap colon delimited items, looping over foo.txt
perl -pe 's/(.*):(.*)/$2:$1/' foo.txt

# Print capitalized words by looping over file and printing at end of file.
perl -ne 'push @w,/(\b[A-Z]\S*?\b)/g;END{print "@w"}' file.txt

# Parse a file for email address pattern (used for Palm Pilot Memo) by looping over file:
perl -ne 'print "|$1 $2" if /\w+ \w+ (.*)<(.*)>.*/' ~/.email_addr

# Uppercase all letters in file (works on foreign characters) to STDOUT:
perl -pe 's/(\w+)/\U$1/g' foo.txt
# Lowercase all words in a file to STDOUT:
perl -pe 's/(.*)/\L$1\E/' foo.txt
# Inplace edit to lowercase all words:
perl -pi -e 's/(\w+)/\L$1/g' desc.LST

# Current time in seconds since the epoch
perl -e 'print time, "\n"'
# Convert a Unix time (1970 is epoch) to RFC822 format.
perl -e "print scalar localtime(983595600)"

perl -e "print crypt('mummy','garbagesalt'),\"\n\""

# Test system function outside of code to debug (Windows examples):
perl -e 'system "attrib +R c:/temp/translate.tpg"'
perl -e "system 'mozilla file:///C:/cygwin/tmp/junk.html'"

# Extract the rightmost (last) column.  Split on whitespace.  Don't need to know how many columns exist.  @F is automatic via -a:
perl -ane 'print pop(@F), "\n";' foo.txt
# Extract the leftmost (first) column.  Split on whitespace:
perl -ane 'print shift(@F), "\n";' foo.txt

# Convert decimal to binary:
perl -e "print unpack('B32', pack('N', 12))"
# Convert binary to decimal:
perl -e "print unpack('N', pack('B32', substr('0'x32 . 1100, -32)))"

# Simple test regex test from commandline check regex without needing a variable (see ~/bin/regex_test.pl for complex tests):
perl -e 'print "found" if "a"=~/[^1-9]/'
# Test a multi-line string using a regex:
perl -e 'print "match!" if "This is my\nmultiline string" =~ /This.*string/s;'
perl -e 'BEGIN{$foo="avenue"};print "ok" if $foo=~/ave/'
perl -e '$foo="avenue";print "ok" if $foo=~/ave/'  # same

# Parse on specific fixed column positions -- also see parse_fixed_width.pl
perl -ne 'push @x, unpack "@1 A36 @37 A36",$_; END{$i=1;for(@x){print "$_\t"; if(++$i%2){print "\n"' foo.txt

# Extract print a section full lines of a file where you know the start and end patterns:
awk '/a being/, /colonization of/ {print}' bladerun_crawl
# Same (don't need  while(<>){...}  when using -ne):
perl -ne 'print if /a being/ .. /colonization of/' bladerun_crawl
# Extract print a section of a file where you know the start and end line numbers:
perl -ne 'print if 15 .. 17' foo.txt  # inefficient but simple
perl -ne 'print if $. >= 15; exit if $. >= 17;' foo.txt  # efficient but complex

# Pipe file or directory names for perl to filter:
find /u/dwj2/mvds/NAT -type d | perl -ne 'print if /NAT/ and !/2004|2005/'; 

# Print repeat string 5 times:
perl -e 'while($i++<5){print "ok "}'

# Convert ASCII num to char:
perl -e 'print pack "C", 97'
# Convert ASCII char to num:
perl -e 'print unpack "C", a'

# Count the exact number of occurrences of X:
perl -e '$s="ThisXlineXhasXsomeXxsXinXit"; $x=($s =~ tr/X//);print $x;'

# Print 0123456789:
perl -e 'print pack( "H2"x10, map { "3$_" } ( 0..9 ) )'

# Replacement for ls -l:
perl -e 'print scalar localtime((stat "t.pl")[9])'

# Convert a space delimited file to a pipe delimited (to STDOUT):
perl -ne 's/ /|/g; print' foo.txt
perl -pne 's/ /|/g' foo.txt > foopipes.txt

# Get info about a perl module using -M:
perl -MCPAN -e 'print $CPAN::VERSION'
perl -MMail::Sendmail -e 'print $Mail::Sendmail::VERSION'

# Show days between modify and access for all files in dir:
perl -e 'map \{printf "%10.3f - $_\n",(-C)-(-A)},@ARGV' *

# wc replacement:
perl -ne '@w=split; $x+=@w; END{print $x}' foo.txt
perl -ane '$x+=@F; END{print $x}' foo.txt  # same

perl -e 'print "it is now @{[scalar localtime]}"'
perl -e 'print "it is now ", scalar localtime'
# m/d/yyyy formatted date like unix date +%m/%d/%Y
perl -e '($d,$m,$y) = (localtime)[3,4,5];print join "/", $m+1, $d, $y+1900'

# Parse string into an array:
perl -e '@words = "What did he say?" =~ /([A-Za-z]+)/g; END{print "@words"}'

# Split CSV string into multiple lines:
echo "a,b,c" | perl -pe 's/,/\n/g'

# Use capturing parentheses to swap two items:
grep -v fips | perl -pe 's/(.*) (.*)/\2 \1/'
cat bladerun_crawl |sed 's/\(etire\)/FOO\1BAR /'

# Filter ls list.  Don't display any file containing dontlistme in it.
ls | perl -e 'while(<STDIN>){print $_ if grep(!/dontlistme/,$_)}'
ls | perl -ne 'print if grep !/dontlistme/,$_'  # better
ls | perl -ne 'print "$1\n" if /.*(2001_\d+).*/'
# Compare but do so less precisely since \d doesn't exist under awk
ls | awk '/2001_\w/{print $1}'

# Do something alternating days, will return '1' every other day.
date | awk '{print $3}' | perl -e '$x = (<> % 2); END {print $x}'

# Does a file exist?  Pop message box if so:
perl -e 'system msgbox if (-f "./myfile.txt")'
perl -e 'print "ok" if (-e "./bladerun_crawl")'

# Thin out, print 10 random lines from a file (good for creating small dummy files):
cat bladerun_crawl | perl -e '@line=<>; for(1..9){print $line[int rand @line]}'
perl -e '@line=<>; for(1..9){print $line[int rand @line]}' bladerun_crawl

# Simple canonical inplace edit replace like vim :g/trendid_/d or sed -i -e '/trendid_/d' foo.txt (caution: sed will turn ff=unix)
perl -i.bak -ne 'next if /trendid_/' foo.txt
# Replace all occurences of number 55 with a random number less than 100
perl -i.bak -pe "s/55/int rand(100)/eg"
# Recursively for specific extensions
perl -pi.bak -e "s/Output Compiled Data/Output_Compiled_Data/" `find . -name '*.sas'`
# Substitute, inplace edit, and make backup from command line.  NOT recursive.
perl -pi.bak -e "s/old/new/g" *.pl
perl -pi.bak -e  's/old/new/g' `find . -name "foo.txt"`

# Print a random number (automatically seeded by Perl):
perl -e 'print rand()'               # <---floating point from 0 to 1
perl -e 'print int rand 5'           # <---integer from 0 to 5
perl -e 'print int(rand(4)) + 1'     # <---integer from 1 to 4
perl -e 'print int(rand(51)) + 25;'  # <---integer from 25 to 75
# Print 3 random numbers which will be 1, 2, 3 or 4
for i in 1 2 3; do perl -e 'print int(rand(4)) + 1, "\n"'; done

# Random password generator:
perl -le 'print map { ("a".."z")[rand 26] } 1..8'

# Print the longest line
perl -ne '$l = $_ if length($_) > length($l); END { print $l }' bladerun_crawl

# Poor man's tac(1) to reverse lines in a file:
perl -e 'print reverse <>' foo.txt

# Parse a textfile grid:
perl -ne 'push @AoA, [ split ];END{print "$AoA[1][1]\n"}' junk.txt

# Number of elements (minus 1 so say (0 .. $#a) ) in array:
perl -e '@a=(1,2,3);print $#a'

# Print the shortest line
perl -ne '$s = $_ if $. == 1; $s = $_ if length($_) < length($s); END { print $s }' bladerun_crawl

# Paragrep - delete entire paragraph if word found in it:
perl -00 -lne 'unless (/genetic/) {print}' bladerun_crawl

# Word frequency counter:
perl -0777 -lape's/\s+/\n/g' bladerun_crawl | sort | uniq -c | sort -nr

# Parse a date string:
($mon, $day, $year) = (localtime())[4,3,5];

print "Maximum commandline index: $#ARGV\n";
print "Last commandline argument: $ARGV[$#ARGV]\n";

# Use a default if not provided on command line:
$ARGV[0] ||= 66;
$ARGV[0] = ($ARGV[0] ? $ARGV[0] : 66);  <---instead of this mess

# Insert an array inside roughly the middle of another array:
splice @arrayA, $#arrayA/2, 0, @arrayB;

# Create a module template (we only care about MyModule.pm unless CPANing it)
$ h2xs -AX Foo::MyModule

# 'our' allows you to circumvent strict for variables you want accessible from anywhere using the $Package::variable or @MyModule::ISA notation.

# Delete specific hash keys:
delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};

# Pipes (can avoid using system()):
open OUT, "|more" or *OUT = *STDOUT;
open IN, "ps|" or die "Can't start ps";

# Parse delimited string:
@x = split /:/,  "ab:cd:::ef:gh";  # two empty fields between cd and ef
@y = split /:+/, "ab:cd:::ef:gh";  # one big fat delimiter between cd and ef

# Find all installation directories:
perl '-V:install.*'

# Using rcs (automatically inserts revision sequence on co)
our $VERSION = sprintf("%d.%02d", q$Revision$ =~ /(\d+)\.(\d+)/o);

# Quick irenamer install: mkdir -p $HOME/perllib/File && cp -i $HOME/code/scripting/Irenamer.pm $HOME/perllib/File/
perl -MFile::Irenamer -e 'InteractiveRename(verbose,recurse)'

# Reverse sort a hash:
@files = sort { $filehash{$b} <=> $filehash{$a} } keys %filehash;

# Determine a script's module dependencies (add to eof):
END { print join( $/, values %INC ), $/ }

# Social security ssn number regex:
[0-9]\{3\}-[0-9]\{2\}-[0-9}\{4\}

# Use reverse video for debugging (this doesn't require ctrl chars, just paste)
print "DEBUG> \e[7mUnexpected format of 'mystr':\e[m\n";

m/$foo/o  # compile interpolation pattern only once o regex switch:

system('/bin/bzip2', '-k', @zipme);
system('cp', '-i', $maxname, 'c:/cygwin/home/rheckel/tmp/foo');

# Like SAS' scan():
$x = (split / /, $x)[0];

# Hash of anonymous arrays:
%h = ( one => [ 'a', 'b', 'c' ], two => [ 'd', 'e', 'f' ] ); print $h{one}->[1];  # b
# Anonymous hash of anonymous arrays:
$h = { one => [ 'a', 'b', 'c' ], two => [ 'd', 'e', 'f' ] }; print $$h{one}->[1];  # b

use Data::Dumper; print Dumper $myref;
open FH, '>foo' or die "$0: $!"; use Data::Dumper; print FH Dumper @a;

# Read a file into a variable:
open PID, '/usr/local/apache/logs/httpd.pid' or die"; $pid = <PID>;  close PID;

# Read a file into an array (one element per line):
@data = <FH>;
# Print 2nd line in that file:
print "$data[1]";

# push and pop == a stack   push and shift == a queue

push @meals, @breakfast, @lunch, @dinner;  # can push multiple lists, but pop one at a time

push @existingarray, 'more', 'stuff';

@array = ("anicca", "dukkha", "anatta");
%hash = (1=>'One', '2'=>'Two', '3'=>'Three');

$#array is the index of the highest defined array element
# Truncate an array
@whatever = ();  or  $#whatever = -1;

# Check webserver return code to see if it's down
perl -MLWP::UserAgent -e '$u=new LWP::UserAgent;$r=$u->head;print $r->{_rc}'

print "Content-type: text/html\n\n";  # web CGI (HTTP/1.0 at least)

# Split comma-delimited string into anonymous array and show 2nd element:
$a='one,two,three'; $aa = [ split /\s*,\s*/, $a ]; print $$aa[1];

# Unbuffer the LOG filehandle and switch back to the original filehandle:
select((select(LOG), $|=1)[0]);

# Is timestamp recent?:
perl -e 'print "ok" if (stat("myfile.txt"))[9] > time-86400'

# Modify CPAN module settings (perl -MCPAN -e shell) TODO 2008-08-06 not working
cpan> o conf http_proxy http://setproxy.sgk.com/proxy.pac
cpan> o conf urllist push ftp://myurl/'

# For each key value pair in hash:
while ( ($key, $value) = each %myhash ) { ... 

# Is module installed properly?:
perl -MDBI -e 0

# Append 2 hashes (leftside hash takes precedence):
%comb = (%hashx, %hashy);

die 'debug archwitutl.pm', scalar localtime;

# Canonical system call:
system("/bin/ls  $_") if $. eq 1;
system('mv', '-i', "$new", "$path/");

# Check return status of system call before proceeding:
if ( system("du -sh $basedir") != 0 ) { die "\n\n\nERROR: can't du $basedir\n\n\n" };

print 'deleted' if unlink '/cygdrive/x/sql_loader/junk';

my ($multiple, $vars, $must, $be, $parethesized);

# Canonical hash:
%hash = ("laurel" => "hardy", "nick" =>  "nora");
# Canonical array:
@array = (10, 20);

# Toggle warnings:
no warnings; $discSize=$W2LIni->{Recording}{mediaSize}; $mediaType=$W2LIni->{Recording}{mediaType}; use warnings;

# Call sub 100 times, and time it
use Benchmark; timethis(100, "MySub()"); 

# Why anonymous arrays are useful:
@children = (\%john, \%peggy); $sues{'children'} = \@children;
# becomes simply
$sues{'children'} = [ \%john, \%peggy ];
print $sues{children}->[1]->{age};  # Peggy's age
# Same
print $sues{children}[1]{age};

# Quick dump Main (see dumpmain.pl for hash included version)
open F, '>junkdumpmain'; for $s(sort keys %main::) { local *sym=$main::{$s}; print F "\$$s is $$s\n" if defined $sym; print F "\@$s is @$s\n" if defined @sym;}
# Then do a >junkdumpmain to "seed" tail and...  TODO tail part not working
$ tail -f junkdumpmain | grep -a potentialHeaderFields junkdumpmain

$array[7][12]				# array of arrays
$array[7]{string}			# array of hashes
$hash{string}[7]			# hash of arrays
$hash{string}{'another string'}		# hash of hashes
$hohoh{Robot}{Santa}{Claus}='mostly harmful';  # hash of hash of hash

# Round a number:
printf("%.3f", 3.1415926535);

# Convert a hash to an array to make unique eliminate duplicates:
%hash = map { $_, 1 } @array; @unique = keys %hash;

# Canonical perl translate:
$novowels =~ tr/aeiou/!/;  # change any vowel in $novowels into !

# uppercase en passant (but it's better to use \U and \L for Unicode):
($HOST = $host) =~ tr/a-z/A-Z/;

# Expressions - a sequence of literals, variables, function connected by one or more operators that evaluate to a single value-scalar or array. 
# Statements are a complete unit of instruction for the computer to process. Statement modifiers: if, unless, until, and while.

# Canonical map:
my @tripled = map { $_ * 3 } @numbers;

# Canonical count number of elements in an array without a temp variable:
$count = () = myarray();

print 'hash key "c" is undefined and this will not autovivify it' if ! defined $h{c};

# Canonical print an array:
@a = ('a','b','c'); print "Hello, $_" for @a;

# Canonical regex en-passant - EXTRACT first name (reads left to right)
my ($firstname) = $name =~ /($firstname_precompiledregex)/;
# Canonical regex en-passant - MODIFY first name (reads right to left)
(my $normalizedname = $name) =~ tr/A-Za-z//dc;

# Print the 3rd line in file:
while ( <FH> ){ print if $. == 3; }

# local - saves the current value somewhere, creates a new value, and arranges that the old value will be restored at the end of the current block.
# my    - lexical scope does not create an entry in the symbol table, variables that you declare in one subroutine can't be tampered with by other subroutines. 

# File into an array:
open FH1, 'junk1.txt' or die "Error: $0: $!"; @foo = <FH1>;

# Paragrep - read in whole paragraph, not just one line
$/ = '';
# Slurp - read in whole file, not just one line or paragraph
undef $/;

# Slurp an entire file into a single variable -- make sure ff=unix !!
my $contents = do { local $/ = <$fh> };  # old style

# Can use __DATA__ filehandle like SAS CARDS; or DATALINES to slurp a fake file;
my $contents; { local $/ = undef; $contents = <DATA>; }

# Slurp an entire file into a single variable -- make sure ff=unix !!
my $contents = do { local $/=undef; open my $fh, '<', 'foo.txt' or die; <$fh>;};

# Choose a random array value (int is optional):
$surprise = $files[int rand @files];

# De-chomp un-chomp reverse chomp:
for ( @lines ) { $_ .= "\n"; }

# chomp improvement for Windows, remove <CR> and/or <LF> from the end of $_
s/[\r\n]+$//;

# Remove part of string and 'chomp' all elements in an array in one swoop.
map{ s/.*=// && s/[\r\n]+$// } @previousrun;

# Read user's input from the commandline:
chomp(my $transtyp = <STDIN>);

# Carriage return newline (i.e. linefeed) cleanup:
s/\015\012/\n/;

# Print hash:
while ( (my $k, my $v) = each %h ) { print "$k=$v"; }
# Print sort hash:
foreach my $k ( sort keys %h ) { print "$k=$h{$k}\n"; }

# Calculate record count change using eval:
diff -ybB -W180 $UTMPDIR/{ols_PREV.txt,ols_CURR.txt} |perl -pe 's/(^\d+)[^\d]*(\d+).*/$1-$2/eg'

# Install CPAN replacement to /usr/local/bin using itself (CHECK CODE MANUALLY 1ST):
curl -L http://cpanmin.us | perl - --sudo App::cpanminus
sudo cpanm Modern::Perl

print "$_" for 1 .. 10;  # horizontal listing of topic variable 
use v5.10; say "$_" for 1 .. 10;  # vertical listing of topic variable 

@chars = 'a' .. 'z';  @nums = 1 .. 10;  # range operator

# undef is always false

# Initialize an array from a list:
@a = ('one', 'two', 'three');

my ($pkg, $file, $line) = caller(); print "DEBUG: this sub was called from $pkg in $file:$line\n";

# Enforce mandatory parameters from user:
$ARGV[1] || die "Usage: $0 90 Imports";

# Grouping regex.  Side effect is to capture to $1:
m/house(cat|)/;  # matches either 'housecat' or 'house'

# Regex with assignment on the fly:
($hours, $minutes, $second) = ($time =~ /(\d\d):(\d\d):(\d\d)/);

# Regex to find duplicated adjacent words using backreferences g1 g2 ...:
m/(\w\w\w)\s\g1/;  # find sequences like 'the the'

# Fill array using regex to split:
$x='Calvin adn Hobbes'; @word = split /\s+/, $x;
$x='/usr/bin'; @parts = split m!(/)!, $x;  # $parts[0] is '', $parts[1] is /, $parts[2] is usr ...

# Paired regex delimiters instead of slash:
s{/usr/local/}{/usr/share}g; 

# Remove non-alpha characters regex:
$x='B@@b_test-1'; ($y = $x) =~ s/[^A-z-_]+//g; print "ok $y";

# Does executable file exist:
if ( -f "/mnt/nfs/home/bheckel/bin/myls" ) { system "/mnt/nfs/home/bheckel/bin/myls $file"; }

# Swap items on either side of a delimiter:
while (<>) { s/(.*):(.*)/$2:$1/; print; }

#!/usr/bin/perl -wT<CR><CR>use strict qw(refs subs vars);<CR># DEBUG<CR>use CGI::Carp qw(fatalsToBrowser);

' Determine which sheet you're using:
MsgBox "'" & ActiveSheet.Name & "' is the currently active worksheet."

:: Add append directory to DOS path:
set PATH=d:\newpath;%PATH%

' Find last used cell in an Excel worksheet:
Sheets("Centura").Cells.SpecialCells(xlCellTypeLastCell).Row

' Iterate all Excel cells in a column range:
For Each c In [b1:b400]

' Excel -- recognize a letter in a cell.
=If(find("G",A1),1,0)

:: Test for existence of a file in BAT (note no quotes on echo):
if exist foo.txt echo ok

Python help for open function:
>>> print open.__doc__
>>> help("open")  # or help(open)
>>> quit()

// Scripting processing instruction (or use <![CDATA[ ):
<? ... >

// Javascript arrays
coffees = ["French Roast", "Columbian", "Kona"]; myArray = new Array("Hello", myVar, 3.14159)

# Where Ruby libraries are installed
ruby -e "puts $:"

# Test AJAX etc that won't work using file:// etc.
$ python -m SimpleHTTPServer  # http://0.0.0.0:8000 now exists

# Chain filters:
perl -pe 's/ {2,}/ /g' sp_audit.out | perl -pe 's/,//g' | perl -pe 's/(Failure: Account \d+) /,$1,/' | perl -pe 's/(Success: Account \d+) /,$1,/' | perl -pe 's/<br> ?/,/g' | perl -pe 's/: Account/,/' >| sp_audit.csv

# Read a csv file in R language:
d <- read.table('/home/rsh86800/t.csv',header=TRUE,sep=',')
d2 <- read.csv(file="readfile.csv.r.txt",head=TRUE,sep=",")  # same

xxSCRIPTINGxx END:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:

xxDATABASExx START:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: {{{1

-- Connect to oracle db SER as user SEKMC with pw xxx:
SQL> connect SEKMC/xxx@ser;

SQL> connect scott/tiger;

$ sqlplus / as sysdba;

-- LEFT|RIGHT [OUTER] joins preserve the rows that don't match and pad remaining columns with NULLs. OUTER keyword is optional.
-- (+) replaces the comma between tablenames in old non-ANSI style Oracle (+) outer join operator joins (for LEFT JOIN operator goes on the rightside table):
-- Only on one table (A) not in the other table (B), pad B with nulls:
select a.numb, b.numb from tmp1 a LEFT JOIN tmp2 b on a.numb=b.numb where b.numb IS NULL
select a.numb, b.numb from tmp1 a, tmp2 b where a.numb=b.numb(+) and b.numb IS NULL

-- Rows only on one table not in the other table:
(select * from z_REF_CORPORATE_INITIATIVE minus select * from REF_CORPORATE_INITIATIVE) -- all rows that are in T1 but not in T2
union all
(select * from REF_CORPORATE_INITIATIVE minus select * from z_REF_CORPORATE_INITIATIVE)  -- all rows that are in T2 but not in T1

-- Records common to both tables:
select deptno from scott.emp INTERSECT select deptno from scott.dept  -- 10, 20, 30

-- Determine Oracle version digits v9+.  E.g. 18:
SQL> SET SERVEROUT ON; SQL> EXEC DBMS_OUTPUT.PUT_LINE(DBMS_DB_VERSION.VERSION);
-- Full dotted Oracle version:
SELECT * FROM v$version; -- Oracle Database 11g Enterprise Edition Release 11.2.0.4.0 - 64bit Production

--Oracle database hostname instance version, rack, status information:
select * from v$instance;

-- TNS, Oracle version etc:
show connection

-- Also allows determination of which oracle version(s) are installed:
/oracle/app/oracle/product/9208HP64DB1_PAR/bin/tnslsnr LISTENER
/oracle/app/oracle/product/8.0.6/bin/tnslsnr LISTENER -inherit

c:\oracle\ora920\network\admin\tnsnames.ora

-- Oracle substring:
SELECT SUBSTR('CORPORATE FLOOR', 2, 4) FROM dual  -- ORPO

SELECT INSTR('CORPORATE FLOOR', 'OR') FROM dual  -- 2
SELECT INSTR('CORPORATE FLOOR', 'OR', 4) FROM dual  -- 5 start looking from pos 4
SELECT INSTR('CORPORATE FLOOR', 'OR', 4, 2) FROM dual  -- 14  start looking from pos 4 but skip the first match at pos 5
SELECT INSTR('CORPORATE FLOOR', 'XX') FROM dual  -- 0
SELECT INSTR(NULL, 'ORA') FROM dual  -- NULL

select * from territory_ptg_targets where instr(territory_description,'Ireland') > 0;
-- same
select * from territory_ptg_targets where territory_description like '%Ireland%';

-- Overflows using PLS_INTEGER but ok with INTEGER:
DECLARE p1 PLS_INTEGER := 2147483647; p2 INTEGER := 1; n NUMBER; BEGIN n := p1 + p2; END; /

-- Find my active sessions:
select s.PROGRAM, s.SQL_ID, s.SQL_EXEC_START, s.LOGON_TIME, q.sql_text from v$session s, v$sql q where s.sql_id=q.sql_id(+) and /*status='ACTIVE' and*/ osuser='bheck';
-- Find active sessions active for more than 10 seconds:
select s.sid||','||s.serial# sess, s.osuser, s.USERNAME, s.last_call_et, s.status, s.sql_address, s.program from v$session s where ( s.status = 'ACTIVE' and s.last_call_et > 10 );
-- Find inactive sessions older than 20 minutes:
select s.sid||','||s.serial# sess, s.osuser, s.USERNAME, s.last_call_et, s.status, s.sql_address, s.program from v$session s where ( s.status != 'ACTIVE' and s.last_call_et > 1200 );
-- Find all recent sql executed:
select s.SID, s.SERIAL#, USERNAME, s.STATUS, SCHEMANAME, OSUSER, s.MACHINE, PORT, PROGRAM, TYPE, s.SQL_ID, LOGON_TIME, CLIENT_IDENTIFIER, STATE, SQL_TEXT, SQL_FULLTEXT, RESULT_CACHE from v$session s, v$sql q where s.sql_id=q.sql_id(+) and SQL_EXEC_START > sysdate - interval '1' hour order by LAST_ACTIVE_TIME desc;
-- Find sql_id of my recent query that started with this LIKE:
SELECT * FROM v$sql WHERE lower(sql_text) like 'with edw%';-- 5w8bqa53r774x
select dbms_sql_translator.sql_id('SELECT * FROM salesgroup') from dual;

lock table table1 in exclusive mode; -- then rollback;

-- Oracle find uncommitted transactions locks:
SELECT s.OSUSER, s.sid ,s.serial# ,s.username ,s.machine ,s.status ,s.lockwait ,t.used_ublk ,t.used_urec ,t.start_time from v$transaction t inner join v$session s on t.addr = s.taddr;
-- What user and what is their sql that is locking? tables actively locked:
SELECT s.osuser, O.OBJECT_NAME, S.SID, S.SERIAL#, P.SPID, S.PROGRAM, SQ.SQL_FULLTEXT, S.LOGON_TIME FROM V$LOCKED_OBJECT L, DBA_OBJECTS O, V$SESSION S, V$PROCESS P, V$SQL SQ WHERE L.OBJECT_ID = O.OBJECT_ID AND L.SESSION_ID = S.SID AND S.PADDR = P.ADDR AND S.SQL_ADDRESS = SQ.ADDRESS order by 1;

-- Oracle user sessions who is logged and potentially kill them:
select s.sid||','||s.serial# sess, s.osuser, s.username, s.last_call_et, s.status, s.sql_address, s.program from v$session s where ( s.status = 'ACTIVE' );
select 'exec sys.kill_session(' || sid || ',' || serial# || ');' x, USERNAME, COMMAND, STATUS, SCHEMANAME, OSUSER, MACHINE, PROGRAM, TYPE, SQL_ID, SQL_EXEC_START, MODULE, ACTION, LOGON_TIME, CLIENT_IDENTIFIER, STATE from v$session where username is not null order by status, logon_time;
-- Kill running session Cloud. Column 's' also allows viewing of running SQL:
select distinct 'ALTER SYSTEM KILL SESSION ''' || sid || ',' || serial# || ''';' x, substr(q.sql_text,1,500) s from v$session s, v$sql q where s.sql_id=q.sql_id(+) and q.sql_text not like 'select distinct ''exec sys%';

-- Insert newline for blank row spacing:
rc PLS_INTEGER; rc := SQL%ROWCOUNT; dbms_output.new_line(); dbms_output.put_line('rows affected: ' || rc);

-- Oracle collections:
CREATE OR REPLACE TYPE numberTable IS TABLE OF NUMBER; TYPE dateTable IS TABLE OF DATE; TYPE varcharTable IS TABLE OF VARCHAR2(4000); TYPE CursorTable IS TABLE OF c1%ROWTYPE; TYPE varray_type IS VARRAY(4) OF VARCHAR2(4000); TYPE associativearrayTable IS TABLE OF INTEGER INDEX BY VARCHAR2(10); TYPE aa_t IS TABLE OF scott.emp.deptno%TYPE INDEX BY BINARY_INTEGER; TYPE aa_t IS TABLE OF scott.emp%ROWTYPE INDEX BY BINARY_INTEGER; TYPE aa_numbers_t IS TABLE OF NUMBER INDEX BY PLS_INTEGER;

TYPE numberTable IS TABLE OF NUMBER; numtbl numberTable;
IF numtbl IS NULL OR numtbl.COUNT = 0 THEN DBMS_OUTPUT.PUT_LINE('collection is empty'); END IF;

-- Oracle collection declare and initialize a table:
TYPE names_t IS TABLE OF VARCHAR2(100); my_family names_t := ('Vera','Chris','Eli');

define_editor="C:\Program Files (x86)\Vim\vim74\gvim.exe -u C:\Users\obheck\_gvimrc"

-- Oracle DATE literal
select * from t WHERE t.min_end_time> '16jan19'
-- Oracle ANSI date constants literals (client controls display format):
select TRUNC(date'2020-02-20', 'Q') dt, TRUNC(TO_DATE('2020-02-20','YYYY-MM-DD'), 'Q') dt_same from dual;
select to_date('1978-12-25 09:00 AM', 'YYYY-MM-DD HH:MI AM')  -- 9am
-- ANSI date literal must be YYYY-MM-DD             _________________ not Oracle '21JAN17':
SELECT TO_DATE('21 JANUARY 2017','DD MONTH YYYY') - DATE '2017-01-01' "date diff" FROM DUAL;
SELECT LAST_DAY(DATE '2019-01-01') last_day_of_month FROM dual
lastDayOfQuarter := LAST_DAY(TO_DATE(to_char((payoutQuarter * 3), '00') || '/01/' || targetYear, 'mm/dd/YYYY'));

-- Oracle ANSI datetime timestamp constants literals (client controls display format). Both are 29-OCT-12 12.01.01.123000000 PM:
select TIMESTAMP '2012-10-29 14:01:01', TIMESTAMP '2012-10-29 12:01:01.123', to_timestamp('2012-10-29 12:01:01.123', 'YYYY-MM-DD HH:MI:SS.FF AM') from dual;
-- Oracle ANSI TIMESTAMP literal:
select * from t WHERE t.min_end_time> TIMESTAMP '2019-01-16 08:26:50'
INSERT INTO test_table (timestamp_col) VALUES (TIMESTAMP '2017-01-21 12:34:56.78');
-- Oracle ANSI TIMESTAMP literal with timezone:
INSERT INTO test_table (timestamp_tz_col) VALUES (to_timestamp_tz('2017-01-21 21:05:53.46 +02:00', 'YYYY-MM-DD HH24:MI:SS.FF TZH:TZM');

-- Copy first few rows of Oracle table into an existing table:
INSERT INTO mynewtbl SELECT * FROM myoldtbl WHERE rownum<11; commit;
-- Copy all rows of Oracle table into an existing empty table (CTAS for insert):
insert into mkc_source (CHOICE, DESCR1, DESCR2) SELECT CHOICE, DESCR1, DESCR2 FROM mkc_source@sep;

-- Copy first few rows of Oracle table into a new table:
CREATE bob AS select patientid FROM public.patientstarpdc;
-- Copy first few rows of Oracle table into an existing table using a query correlated (see also CTAS for XML list):
INSERT INTO asp_processing (ACCOUNT_ID, OLD_ID, ASP_PROCESSING_REQUEST_ID) SELECT ACCOUNT_ID, OLD_ID, ASP_PROCESSING_REQUEST_ID FROM tmp_audit_sp WHERE rownum<9;

-- Correlated update query:
UPDATE contact_note SET original_contact_ID = contact_id WHERE contact_id IN (SELECT contact_id FROM rion32806) AND original_contact_ID IS NULL;

-- If same then NULL otherwise first parameter:
select nullif('a','a') from dual  -- NULL
select nullif('a','b') from dual  -- a
case qty when 0 then 0.0001 else qty end / nullif(mycol, 0)  -- avoid any division by zero errors

-- Fill down sparse values with the previous value if current is zero:
nvl(last_value(nullif(col2, 0)) IGNORE NULLS OVER (ORDER BY col1), 0) col2,

-- This won't include NULLs as Profit because the result of comparing NULL to anything is unknown, not < 0 i.e. nulls propagate:
where Profit < 15 
--  This will include null/missing values as Profit:
where Profit < 15 or Profit IS NULL
-- Better Oracle way to include nulls (you no longer need a separate "or column is null" test):
where NVL(Profit, 0) < 15

coalesce(patriots_didnt_cheat, honest_salesman, lowprice_at_disney, emacs_is_great, 0) as coalesce_approach_1st_nonnull_is_returned;

-- Choose the most recent of 3 dates highest higher date Oracle:
select greatest(nvl(an.updated, ac.updated), nvl(an_parent.updated, ac.updated), nvl(an_sup.updated, ac.updated)

-- When any part of an expression evaluates to NULL, the entire expression will evaluate to NULL unless wrapped in a function like NVL:
select NVL(NULL, 'it is NULL') from dual;  -- returns 'it is NULL'
select NVL(TO_CHAR(3), 'NULL') from dual;  -- returns 3
DBMS_OUTPUT.PUT(NVL(TO_CHAR(name.age.years), 'NULL') || ' yrs ');  -- just put() with no newline
NVL2(x, return_value1_bc_x_isNOTnull, return_value2_bc_x_ISnull);

-- NVL vs NVL2:
SELECT opportunity_id, actual_sale_amount, nvl(ACTUAL_SALE_AMOUNT, 999) x FROM opportunity_base WHERE  opportunity_id in(999);  -- puts 999 in place of null
SELECT opportunity_id, actual_sale_amount, nvl2(ACTUAL_SALE_AMOUNT, 'AMOUNT IS NOT NULL', 'NULL') x FROM opportunity_base WHERE  opportunity_id in(999);  -- better

-- Oracle - prevent nulls from propagating:
SELECT ename, comm, sal, 12*sal+NVL(comm,0) ...
IF NVL(l_salary,0) <= 40000 ...

select DECODE(checkme, ifcheckmeisthis, thenuseme, elseuseme) ...
DECODE(a, b, c, d)
CASE a WHEN b THEN c ELSE d END

select decode(nvl(geo1, 0),0,'IS NULL','NOT NULL')...

-- Better than  DECODE(p.ip_role_lov_id, null, 34657, p.ip_role_lov_id) :
NVL(p.ip_role_lov_id, 34657);

-- Set zero to null:
TO_CHAR(CASE WHEN a.result_number=0 THEN null ELSE a.result_number END) AS result_number

-- Compare NULL:
where  ... and nvl(width,0) = nvl(length,0)  -- finds only if both are NULL
where DECODE(col1, col2, 1, 0) = 1  -- finds sameness of col1 & col2 - even if both NULL

-- Update only if value is NULL:
UPDATE contact_note SET original_contact_id = contact_id WHERE contact_id IN (SELECT contact_id FROM zzorion32806) AND original_contact_ID IS NULL
UPDATE contact_note SET original_contact_id = contact_id WHERE NVL(original_contact_id, -1) = -1

-- Don't ignore NULLs in counts:
SELECT count(nvl(POOR_CLOSEOUT_OPT_OUT,0)), POOR_CLOSEOUT_OPT_OUT FROM OPPORTUNITY_OPT_OUT GROUP BY POOR_CLOSEOUT_OPT_OUT

-- HTML use <BLANK> use when description is NULL;
NVL(lov.value_description, '&lt;;BLANK&gt;;') AS value_description,

-- Update table to new value if newloc not null otherwise leave it alone:
update departments set location = decode(newloc, NULL, location, newloc);
-- Update the CODE column for 10 rows, setting it to itself for 8 rows and to the value NULL for 2 rows. BETWEEN is inclusive like >= ... <= operators:
UPDATE dest SET code = DECODE(id, 9, NULL, 10, NULL, code) WHERE id BETWEEN 1 AND 10;

-- If day is Saturday set flag:
CASE WHEN TO_CHAR(b.sample_status_date,'DY')='SAT' THEN 1 ELSE 0 END;

-- Do division on a potential zero:
SELECT symbol, DECODE(earnings, 0, NULL, price / earnings);

select dt, ticker, decode(transact, 'Buy', +1, -1)*qty qty;

select prod_nm, DECODE(prod_grp, 'MDPI','m', 'Solid Dose','sd', 'unk') from samp;

CASE WHEN warehouse_id=1 THEN 'Southlake' WHEN warehouse_id=2 THEN 'San Francisco' WHEN warehouse_id=3 THEN 'New Jersey' ELSE 'Non-domestic' END;
DECODE(warehouse_id, 1,'Southlake', 2,'San Francisco', 3,'New Jersey', 'Non-domestic') ;

select distinct count(distinct decode(th.parent_territory_lov_id, NULL, ataa.assign_territory_lov_id, NULL)) OVER (PARTITION BY ataa.account_id) as total_nonjmp_territories,...

-- SQL sum count a group flag.  Good for later excluding a group of records if any record contains 'CANCEL':
sum(case when status = 'CANCEL' then 1 else 0 end) as cancelflag

-- SQL convert timestamp to date then sum pickeduptimestamp if picked up in a during month, a range of dates:
sum(case when date(pickeduptimestamp) between '01MAY2015' and '31MAY2015' then 1 else 0 end) as May2015, ...
...and (date(pickeduptimestamp) between date('2016-02-01') and date('2016-04-30'))...

-- Set binary date flags in SQL:
sum(case when date(pickeduptimestamp) between '01MAR2015' and '31MAR2015' then 1 else 0 end) as Mar2015

-- PLSQL return a BOOLEAN:
RETURN(CASE WHEN(l_column_count > 0) THEN TRUE ELSE FALSE END);

-- CASE WHEN between:
case when (sal > (comm * .9) and sal < (comm * 1.1)) then 1 else 0 end value_is_in_range

-- case when assignment:
l_db_name := CASE WHEN (l_db_name = 'ERS') THEN 'EPS' ELSE 'ESSP' END;

-- PLSQL check a column as BOOLEAN:
... v_gonereason := (c.gonereason = 0); IF v_gonereason THEN ...

-- Custom sort order:
order by decode(TOP_LEVEL_ITEM_TEXT, 'accounts', 1, 'contacts', 2, 'opportunities', 3, 999)

-- Avoid ugly double space 'John  Doe' while allowing for a blank middle initial 'John Q. Doe':
SELECT x.*, trim(x.first_name || ' ' || x.middle_name || DECODE(x.middle_name, NULL, '', ' ') || x.last_name) as contact_name

-- SQL Server
WHERE datepart(year,insert_date)='2005' AND datepart(month,insert_date)='7' AND datepart(day,insert_date)='31'

-- PLSQL null comparison (DECODE is better):
IF (updated1 = updated0) AND (updatedby1 = updatedby0) AND ( (srch_match_code1 = srch_match_code0) OR ((srch_match_code1 IS NULL) AND (srch_match_code0 IS NULL)) ) THEN

INSERT INTO...; SAVEPOINT bobora; INSERT INTO...; ROLLBACK TO bobora;

-- Oracle date subtraction:
where lc.updated >= SYSDATE - (365 * 2) -- 2 year window
SELECT DATE '2019-03-05' - (365 * 2) FROM dual  -- 3/5/2017

-- Oracle function declaration default parameter:
FUNCTION hasLinkages(in_accountId NUMBER, in_contextBeingUsed NUMBER DEFAULT 2) RETURN NUMBER;
FUNCTION hasLinkages(in_accountId NUMBER, in_contextBeingUsed NUMBER := 2) RETURN NUMBER;

-- Oracle package count:
SELECT OBJECT_NAME, count(*) FROM dba_procedures WHERE OWNER = 'SETARS' AND OBJECT_TYPE IN('PROCEDURE' , 'PACKAGE','FUNCTION') AND procedure_name IS NOT NULL GROUP BY object_name;

-- Does schema-level procedure exist?:
SELECT count(1) FROM user_procedures WHERE object_name = 'AUTO_CREATE';
-- Does a procedure inside a package exist?:
SELECT * FROM user_procedures WHERE OBJECT_TYPE IN('PROCEDURE', 'PACKAGE') AND object_name='REFERENCES' AND procedure_name='AUTO_CREATE';

-- Oracle single q quote quoting masking:
foo CONSTANT  varchar2(4000) := q'[bar 'ok' then 4000 is max varchar2]';

DROP PACKAGE test_bob;

-- Oracle cross database hint:
SELECT /*+ DRIVING_SITE(SITE) */ COUNT(*) FROM DB_OWNER.SITE_DATA@DNB_XXXX SITE WHERE SITE.DUNS_NBR = :1

-- Oracle force index scan - not full table scan hint:
SELECT /*+ parallel(8) full(<table_1_name_or_alias>) index(<table_1_name_or_alias> <index_1_name>) index(<table_2_name_or_alias> <index_2_name>) */...
SELECT /*+ INDEX (employees emp_department_ix)*/ employee_id, department_id FROM employees WHERE department_id > 50;

-- Oracle force full table scan hint:
SELECT /*+ FULL(ddl_event)*/ * FROM ddl_event;

select /*+ NO_PARALLEL */ empno from emp;

-- Kill Oracle kill session sqlplus format:
SQL> set linesize 200
SQL> col sql_text format a160
SQL> col x form a30
select distinct  'exec sys.kill_session(' || sid || ',' || serial# || ');' x, q.sql_text from v$session s, v$sql q where s.sql_id=q.sql_id(+) and osuser='bheck' and sql_text is not null;
-- Kill Oracle kill session (sid, serial#):
SQL> exec sys.kill_session(51,6449);

GRANT EXECUTE ON SYS.DBMS_LOCK TO unit_test_repos;
alter system kill session '671,62164';

-- Only those columns explicitly listed in the GROUP BY clause may appear un-aggregated (i.e. not as a parameter of an agg. function) in the SELECT or HAVING clauses. Put negatively, It is prohibited to use an un-aggregated column in the SELECT or HAVING clauses, unless it is explicitly listed in the GROUP BY clause.

-- Loop a cursor:
OPEN c1; LOOP FETCH c1 INTO v_lastname, v_jobid; EXIT WHEN c1%NOTFOUND; DBMS_OUTPUT.PUT_LINE( RPAD(v_lastname, 25, ' ') || v_jobid ); END LOOP; CLOSE c1;

-- Oracle case insensitive:
where ename LIKE UPPER('foo%')

-- Oracle 11/2/2018 9:08:23 AM becomes 11/2/2018 00:00:00:
select trunc(SYSDATE) from dual
select trunc(SYSDATE, 'day') from dual

select SYSDATE, TO_CHAR(SYSDATE, 'DD-MON-YYYY HH24:MI:SS') sysdate_with_time from dual;
select to_char(sysdate, 'DDMONYYYY HH:MI:SS PM') into start_time from dual;

-- Oracle days from today, two days ago no time component:
select to_char(sysdate-2, 'DD-MON-YY') from dual;
-- Oracle days from today, two days ago with time component:
select sysdate-2 from dual;

-- Date format: 20070304184943
select to_char(sysdate, 'YYYYMMDDHH24MISS') from dual;

-- Oracle date formatting https://docs.oracle.com/en/database/oracle/oracle-database/12.2/sqlrf/Format-Models.html#GUID-DFB23985-2943-4C6A-96DF-DF0F664CED96
select to_char(sysdate, 'Dy DD-Mon-YYYY HH:MI:SS AM') as "Current Time" from dual;  -- Wed 19-Aug-2009 02:51:33 PM  TODO is the 'AM' correct??
select to_char(sysdate, 'Dy DD-Mon-YYYY HH24:MI:SS') as "Current Time" from dual;  -- Wed 19-Aug-2009 14:53:41
select TO_DATE('6-JAN-06'), TO_DATE('06JAN06'), TO_DATE('6JAN2006');  -- all same
select TO_DATE('15-may-2006 16:00:01','dd-mon-yyyy hh24:mi:ss') from dual; -- 15-May-06 04:00:01 PM
select * from activity_log where trunc(activity_dt)=TO_DATE('16-JAN-06','DD-MON-YY');

-- Oracle date with hours minutes seconds:
SELECT to_char(SYSTIMESTAMP, 'YYYY-MM-DD HH24:MI:SS') FROM dual; --2020-01-16 18:26:57
SELECT SYSDATE FROM dual; --16-JAN-20 18:26:57

dbms_output.put_line('rpt at: ' || TO_CHAR(sysdate, 'dd-mon-yy hh:mipm'));

-- Oracle Business hours only:
if (TO_CHAR(sysdate, 'DY') in ('SAT', 'SUN') or (TO_CHAR(sysdate, 'HH24') not between '08' and '18')

-- Unhide a date in future e.g. 02-DEC-99 is really 02-DEC-2099:
SELECT updated, trunc(updated), to_char(updated, 'DD-MON-YYYY') FROM contac;

-- Oracle date criteria only this month's orders:
WHERE order_dt > TRUNC(SYSDATE, 'MONTH')

select rpad('5star', 10, '*'), lpad('6dot', 10, '.'), lpad('xxx', 2) || 'doublex' from dual

-- Create a poor man's horizontal bar graph:
SELECT empno, job, LPAD('*', sal/100, '.') graph FROM emp
... RPAD('#', units_sold, '#') AS graph ...

-- Update query: 
update retain.fnsh_prod set prod_sel = 'N', prod_sel_dt = NULL;

-- Oracle SQL*Plus (like SELECT TOP 10 *... in SQL Server)
select * from activity_log where rownum<10;

-- Format Oracle format if column too wide that truncation occurs in sqlplus window:
SQL> col MFG_SPEC_TXT_A form a15  -- sqlplus column format width 15 characters
SQL> column MFG_SPEC_NUM format 999  -- sqlplus number format width w/o zeros

-- Oracle substring replace:
UPDATE pec SET pks_txt=REPLACE(pks_txt,'GEN','GEN_') ...

-- Strip table name suffix:
replace(ui.table_name,'_BASE','')

-- SQL Server hardcoded date between:
WHERE batch_time >= {ts '2011-01-03 00:00:00'} and batch_time <= {ts '2011-01-04 00:00:00'}

-- Oracle hardcoded specific date time range:
h.retired_time between to_date('13-mar-2020 20:00', 'dd-mon-yyyy hh24:mi') and to_date('13-mar-2020 21:10', 'dd-mon-yyyy hh24:mi')
WHERE prod_sel_dt BETWEEN TO_DATE('01-JAN-10','DD-MON-YY') AND TO_DATE('31-JAN-10','DD-MON-YY')
TEST_END_DATE BETWEEN TO_DATE('2012-09-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE('2014-06-13 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
SS.EntryTs >= TO_DATE('01-JAN-05','DD-MON-YY') AND SS.EntryTs <= TO_DATE('31-DEC-05','DD-MON-YY')

-- Only returns 1 record because Oracle assumes that the time is midnight (00:00) and returns only those records that contain the specified date value and midnight as the time component:
SELECT * FROM hr.bob WHERE hire_date = TO_DATE('21-JUN-2007', 'DD-MON-YYYY'); -- 1rec
-- So you might try this to get the other record at 9:40:
SELECT * FROM hr.bob WHERE trunc(hire_date) = TO_DATE('21-JUN-2007', 'DD-MON-YYYY') ; -- 2rec but not performant, indexes are not used with functions
SELECT * FROM hr.bob WHERE hire_date >= TO_DATE('21-JUN-2007', 'DD-MON-YYYY') and hire_date < TO_DATE('22-JUN-2007', 'DD-MON-YYYY'); -- 2rec best

-- All employees hardcoded date hired in year 2019:
SELECT * FROM employees WHERE trunc(hire_date) = '01-JAN-2019';

-- Use this for BETWEEN (inclusive queries so subtract 1 second to pull the range back to the last day of quarter) which then can use regular indexes on the date column:     
select TRUNC(date'2020-02-20', 'Q') quarter_start, TRUNC(ADD_MONTHS(date'2020-02-20', +3), 'Q') - (1/(24*60*60)) quarter_end from dual;

v_day_of_week VARCHAR2(20) := TO_CHAR(SYSDATE, 'DAY'); -- SATURDAY

-- TRUNC(sale_date) = TRUNC(sysdate) is used sometimes because Oracle's DATE has a time component. Explicit date range is better, it will use index since no functions are involved:
sale_date >= TRUNC(sysdate) AND sale_date < TRUNC(sysdate + INTERVAL '1' DAY)
-- or
sale_date >= TO_DATE('1970-01-01', 'YYYY-MM-DD') AND sale_date <  TO_DATE('1970-01-01', 'YYYY-MM-DD') + INTERVAL '1' DAY

-- SQL check for duplicates, returns nothing if all samp_id are unique:
select count(*) from samp group by samp_id having count(*)>1;

-- SQLplus save spool output to file:
set termout off; set linesize 2000; set pagesize 9999; spool u:/serevent.out; ...SQL...; spool off; quit;

-- SQLplus show running code with line numbers when executing:
set echo on

-- Pass a parameter to sqlplus
... AND spid='&1'; ...

-- Oracle SQLPlus
SQL> ed  -- edits afiedt.buf (assuming a query has already been run)
SQL> r  -- run query

-- Oracle sqlplus do not display query results (usually when sending output to .out file)
set termout off

-- Oracle run script:
$ sqlplus -S me/pw@esd @query  # default is SET SUFFIX .sql
$ vi ~/code/misccode/query.sql && (cd ~/code/misccode/ && sqlplus -S me/pw@esd @query.sql && vi $c/temp/query.out)

-- Re-execute the plsql block or SQL in sqlplus:
SQL> /

-- Oracle prompt (1st time only) for saved environment substitution variable prompt:
BEGIN DBMS_OUTPUT.PUT_LINE ('Today is '||'&&sv_day'); DBMS_OUTPUT.PUT_LINE ('Today is still '||'&sv_day'); END;

-- Avoid sqlplus prompts for ampersand substitutions:
SQL> set define off;
SQL> @C:\Users\bheck\OneDri~1\workspace\data\ource\SQL\3.50rionScripts\RION-33855_ddl_change.sql
-- sqlplus BOOLEAN parameters are translated from/to integers 0/1/null <--> false/true/null:
in_debug boolean := sys.diutil.int_to_bool(:in_debug);

-- Implicit cursor simple loop using a table's ROWTYPE record anchor:
BEGIN FOR r IN ( SELECT * FROM SYS.dual ) LOOP dbms_output.put_line(r.dummy); END LOOP; END;

-- Return a cursor variable:
CREATE OR REPLACE FUNCTION f RETURN SYS_REFCURSOR AS cv SYS_REFCURSOR; BEGIN OPEN cv FOR select * from dual; RETURN cv; END; /

-- Strong cursor because Weak types do not have a RETURN clause.  SYS_REFCURSOR is always weak, almost always used with dynamic queries.
DECLARE TYPE book_data_t IS REF CURSOR RETURN book%ROWTYPE;  cv book_data_t;  BEGIN ...

DECLARE cv SYS_REFCURSOR; en VARCHAR2(80); jo VARCHAR2(80); BEGIN OPEN cv FOR 'select 1, 1 from SYS.dual'; LOOP FETCH cv INTO en, jo; EXIT WHEN cv%NOTFOUND; dbms_output.put_line(en || ' is ' || jo); END LOOP; END;

DECLARE TYPE mynt_t IS TABLE OF my_tbl%ROWTYPE; mynt mynt_t; CURSOR c IS SELECT * FROM my_tbl; BEGIN OPEN c; LOOP FETCH c BULK COLLECT INTO mynt LIMIT 100; EXIT WHEN mynt.COUNT = 0; FOR i in 1..mynt.COUNT LOOP dbms_output.put_line('Dept('||i||'):' || mynt(i).dept); END LOOP; END LOOP; CLOSE c; END;

-- Dynamic cursor OPEN-FOR:
DECLARE rn NUMBER := 1; myres varchar(1); cv SYS_REFCURSOR; BEGIN OPEN cv FOR 'select * from SYS.dual where rownum = :1' USING rn; FETCH cv INTO myres; dbms_output.put_line(myres); CLOSE cv; END;

-- Oracle nonaggregated expression (ROWNUM) in an aggregated query - SQL hack:
select ROWNUM, a.* from (select cust, count(ord) from tbl group by cust) a;

-- Iterate a sparse nested table collection:
DECLARE TYPE x_t IS TABLE OF NUMBER; x x_t := x_t(9, NULL, 42); BEGIN FOR i IN x.FIRST .. x.LAST LOOP DBMS_OUTPUT.PUT_LINE(x(i)); END LOOP; END;

-- Oracle DDL for DROP all procedures matching pattern:
SELECT 'DROP PROCEDURE "'||owner||'"."'||object_name||'";' FROM all_procedures WHERE procedure_name IS NULL AND UPPER(object_name) LIKE 'Z_SET_%';
SELECT * FROM user_procedures a WHERE a.procedure_name like 'REMOVE_L%';  -- like all_procedures but for schema only
SELECT * FROM all_objects WHERE  owner='SETARS' AND object_type NOT LIKE 'JAVA%'  -- jobs, indexes, triggers, tables, procedures, types...
select * FROM all_objects WHERE OWNER = 'BOBHECKEL' and object_type = 'FUNCTION'

-- Using data DICTIONARY aka DICT find Oracle USER_TABLES etc from which to further query poke around:
select * from DICTIONARY WHERE table_name LIKE 'USER_%' ORDER BY 1;
-- Table's comment:
select table_name, comments from DICT where table_name like 'DBA%SCHEDULER%' order by table_name;
SELECT * FROM user_tab_comments  where table_name ='MKC_REVENUE_FULL';
-- Column's comments:
SELECT * FROM user_col_comments where table_name ='MKC_REVENUE_FULL';

-- Oracle list browse show all schemas poke around:
SELECT username FROM all_users ORDER BY username;
-- Does this table exist? num_rows is NOT NULL if so:
select num_rows from user_tables where table_name like 'KR11MAR2021%'; 
-- Oracle list browse all database tables poke around all available schema:
SELECT owner, table_name FROM all_tables where owner = 'SCOTT';
SELECT owner, table_name FROM user_tables where owner = 'SCOTT';
SELECT owner, table_name FROM all_tables@xyz.us.oracle.com

-- Oracle list browse all views find view is it a view:
select * from all_views where view_name like '%SPEC%'
select * from user_views where view_name ='MKC_REVENUE';

-- Oracle list browse all table details:
SELECT table_name, column_name, data_type, data_length, nullable, num_distinct, low_value, high_value, density FROM all_tab_columns WHERE table_name in(SELECT table_name FROM all_tables where owner ='SCOTT') and owner ='SCOTT' ORDER BY table_name, column_name
-- Where 'DDL WW_MGMT_DASH_DATA_IDEAS' is not available:
SELECT table_name, column_name, data_type, data_length, nullable, num_distinct, low_value, high_value, density FROM all_tab_columns@dew WHERE table_name='WW_MGMT_DASH_DATA_IDEAS';

-- Find query search all Oracle tables & views for a certain field name column name poke around:
SELECT table_name, column_name FROM cols WHERE lower(table_name) LIKE 'accou%' AND lower(column_name) LIKE '%id%';

-- Find query search all Oracle tables & views with a certain table name poke around:
SELECT table_name FROM user_tables WHERE lower(table_name) LIKE '%search%' order by 1;

-- Poke around search all tables want for a specific column name does column exist:
SELECT * from  user_tab_columns WHERE table_name = 'FOO' AND column_name LIKE '%NEW%';

-- What the object references, tables etc:
select * from user_dependencies where name = 'RPT_OPP_MULTI_YDEAL' and referenced_type not in ('SYNONYM') order by 4;
-- What references the object, views etc:
select * from user_dependencies where REFERENCED_NAME = 'OPP_BASE' and referenced_type not in ('SYNONYM') order by 1;

-- List all of a table's indexes and tablespace does table have index all indexes for a table what is indexed:
select index_name, tablespace_name from user_indexes where TABLE_NAME = 'SP_PROCESSING' and index_name not like 'SYS_%';

-- Indexes and column (or columns if compound index) indexed for a table what is indexed:
SELECT i.table_owner, i.table_name, i.index_name, i.uniqueness, c.column_name, f.column_expression FROM all_indexes i LEFT JOIN all_ind_columns c ON i.index_name = c.index_name AND i.owner = c.index_owner LEFT JOIN all_ind_expressions f ON c.index_owner = f.index_owner AND c.index_name = f.index_name AND c.table_owner = f.table_owner AND c.table_name = f.table_name AND c.column_position = f.column_position WHERE i.table_name ='MKC_REVENUE_FULL_BOB' ORDER BY i.table_owner, i.table_name, i.index_name, c.column_position;

-- Want table name that uses this index where is this index used:
select table_name from user_indexes where index_name='CONTACT_FIRSTNAME_IX';
-- Want table and columns are being indexed for this index user_index which columns begin used for this index:
SELECT * from user_ind_columns WHERE index_name = 'KIR_HC_AC_CIX';
-- Is this column being indexed anywhere:
SELECT * from user_ind_columns WHERE column_name = 'MYCOL';
-- What is the index that relies on this column:
SELECT * from user_ind_columns WHERE column_name = 'ACCOUNT_ID' and table_name='MKC_REVENUE_FULL';

-- Foreign Key is that same value stored within MULTIPLE rows of the other aka "detail" table. It should be indexed unless its matching PK is never updated or deleted:
create table emp(empid NUMBER(20) PRIMARY KEY, ename VARCHAR2(20), sal number(10,2), dept_id NUMBER(10) REFERENCES dept(dept_id) ON DELETE CASCADE);
ALTER TABLE contact_opp   ADD CONSTRAINT opp_contact_opp_fk FOREIGN KEY (opp_id) REFERENCES opp (opp_id) ON DELETE CASCADE ENABLE;

-- Oracle Primary key (P) foReign key (R):
SELECT column_name FROM user_cons_columns ucc, user_constraints uc WHERE uc.table_name = 'ACCOUNT_BAS' AND uc.CONSTRAINT_TYPE = 'P' AND ucc.CONSTRAINT_NAME = uc.CONSTRAINT_NAME;
-- Have constraint name want column affected by it
SELECT column_name FROM user_cons_columns ucc, user_constraints uc WHERE uc.CONSTRAINT_NAME = 'ACCT_TM_ACC_TM_ASSIGN_FK' AND ucc.CONSTRAINT_NAME = uc.CONSTRAINT_NAME;

-- Want all constraints including primary on this table:
SELECT * FROM user_cons_columns ucc, user_constraints uc WHERE uc.table_name = 'KMC_REVENUE_FULL' /*AND uc.CONSTRAINT_TYPE = 'P'*/ AND ucc.CONSTRAINT_NAME = uc.CONSTRAINT_NAME;

-- What foreign keys are on this table:
select * from all_constraints where table_name ='SP_PROCESSING' and CONSTRAINT_TYPE='R';

-- Oracle view check constraints why if DROP TABLE etc fails:
select * from user_constraints where table_name = 'COUNTRIES';
select * from user_constraints WHERE constraint_name = 'NN_ACCOUNT_NAME_CB';
select constraint_name, constraint_type from user_constraints WHERE constraint_name LIKE 'NN%';

-- Does any other table reference this table LIST_OF_VALUES i.e. do any foreign keys exist:
select * FROM all_constraints WHERE constraint_type = 'R' and r_constraint_name IN (select constraint_name from all_constraints where table_name like 'LIST_OF_VALUES%') order by table_name;

-- View all details of Oracle table in a schema poke around table:
select DBMS_METADATA.GET_DDL('TABLE', 'EMAIL_MESSAGES', 'SETARS') from dual;

-- Get DDL to recreate an index (and SET to avoid truncation of set serveroutput on):
set long 90000; select dbms_metadata.get_ddl('INDEX','KRB_9BYTE_CD_IX','SETARS') x from dual;

-- SQL Developer view indexes, last analyzed etc alternative to DBMS_METADATA sqlcl:
clear screen; info contact_dhub; ddl contact_dhub;

-- View some details of Oracle table (like sqlplus DESC):
select column_name, nullable, concat(concat(concat(data_type,'('),data_length),')') from user_tab_columns where table_name = 'EMAIL_MESSAGES';

-- Poke around:
-- Oracle DBA_OBJECTS : All objects in the database  ALL_OBJECTS : All objects accessible to the user  USER_OBJECTS : All objects owned by the user

-- Oracle are you listening listener?
$ ps -ef |grep lsn  # /oracle/app/oracle/product/8.0.6/bin/tnslsnr LISTENER -inherit
-- Confirm LDAP adapter etc:
$ tnsping usdev10

-- Oracle are you pingable?
$ while true; do tnsping sprd25|grep OK|awk '{print $2}'|sed 's/^.//'; sleep 120; done;

-- Sleep pause execution for 60 seconds using a java include:
CREATE OR REPLACE PROCEDURE SLEEP(P_MILLI_SECONDS IN NUMBER) AS LANGUAGE JAVA NAME 'java.lang.Thread.sleep(long)';
BEGIN sleep(60 * 1000); END;
-- Oracle sleep 9 seconds if no Java:
begin for i in 1 .. 3 loop DBMS_OUTPUT.put_line('x'); sys.dbms_lock.sleep(3); end loop; end;
SYS.DBMS_SESSION.sleep(60);  -- 18c+ 1 minute

-- Oracle date time yesterday one day ago:
select (SYSDATE - INTERVAL '1' hour) from dual  -- one hour ago
select (SYSDATE - INTERVAL '1' day) from dual  -- 17-JUL-19 12:11:48
select (SYSTIMESTAMP - INTERVAL '1' day) from dual  -- 17-JUL-19 12.12.11.043644000 PM -04:00
select sysdate, (sysdate - .5) twelve_hours_ago_ora, (SYSDATE - INTERVAL '12' hour) twelve_hours_ago from dual;

-- 18-JUL-19 12.13.00.755657000 PM -04:00 / 18-JUL-19 12.13.00.756657000 PM -04:00 / 18-JUN-19 12:13:00
SELECT (systimestamp - INTERVAL '0.001' SECOND), SYSTIMESTAMP, (SYSDATE - INTERVAL '1' MONTH) FROM dual

-- Oracle date calculation 15 minutes ago (SYSDATE won't work here):
SELECT CURRENT_TIMESTAMP - NUMTODSINTERVAL(15, 'MINUTE') localtime, systimestamp - NUMTODSINTERVAL(15, 'MINUTE') utcsometimes FROM dual;

-- Max number of seconds that won't throw ORA-01873:
select NUMTODSINTERVAL(power(2,31) - 1, 'SECOND') as interval from dual;
select date '1970-01-01' + NUMTODSINTERVAL(power(2,31) - 1, 'SECOND') as max_interval_from_epoch from dual; -- 19-JAN-38 03:14:07

-- SHOW ERR[ORS] in sqlplus uses this table (but sqlplus only shows the latest error):
SELECT * FROM USER_ERRORS WHERE name IN ('PLCH_PKG', 'PLCH_GET_NUMBERS')

-- Search view full source code of all compiled database objects (except Views):
select * from SYS.USER_SOURCE t WHERE t.TYPE='PACKAGE BODY' and lower(t.text) like '%assignment_approved%';
select * from SYS.USER_SOURCE t WHERE t.TYPE='PACKAGE BODY' and t.name like 'RION%' AND (upper(t.TEXT) LIKE '%BHECK%');  -- my abandoned WIP packages
-- View full source code of all compiled database objects (not Views) for SYS:
select * from dba_source s where s.name = 'MYSECURITY' order by s.type, s.line;
select * from dba_source s as of TIMESTAMP (systimestamp - interval '25' minute) where s.name = 'MYSECURITY' order by s.type, s.line;

-- SQL Server list information about each owner's table in a database:
select * from information_schema.tables where table_type='BASE TABLE' and table_schema='rheckel'

-- Oracle parent hierarchy:
SELECT LOV.LIST_OF_VALUES_ID, LOV.VALUE FROM LIST_OF_VALUES LOV WHERE LOV.RETIRED = 0 START WITH LOV.LIST_OF_VALUES_ID IN (1,2,3) CONNECT BY PRIOR LOV.LIST_OF_VALUES_ID = LOV.PARENT_ID
select sys_connect_by_path (job, '/') job_path, sys_connect_by_path (ename, '/') ename_path from scott.emp start with mgr is null connect by prior empno=mgr

rc pls_integer := 0; rc := SQL%ROWCOUNT; dbms_output.put_line('rows affected: ' || rc); 

-- Oracle random 50% subset create test table:
CREATE TABLE zzorion32822 AS SELECT * FROM zorion32822 SAMPLE(50)
-- Random subset 0.1% of all records in Oracle table:
SELECT account_id FROM t SAMPLE(0.1);

-- Error exception handler (if you don't give SQLERRM a valid Oracle error code it uses SQLCODE as the error code):
WHEN OTHERS THEN dbms_output.put_line(SQLCODE || ': ' || SQLERRM || ': ' || DBMS_UTILITY.format_error_backtrace);

BEGIN DBMS_OUTPUT.put_line(TO_DATE('2010 10 10 44:55:66', 'YYYSS')); EXCEPTION WHEN OTHERS THEN IF SQLCODE = -01830 THEN DBMS_OUTPUT.put_line('we hit a date error, throw it'); END IF; RAISE; END;

-- Print Oracle EXCEPTION error code description for a given code:
BEGIN dbms_output.put_line(SQLERRM(0)); END; -- ORA-0000: normal, successful completion

-- Usually only good for error logging. Or wrap EXECUTE IMMEDIATE DDL statements (which auto commit) in one of these to avoid accidental session commits:
DECLARE PRAGMA AUTONOMOUS_TRANSACTION; BEGIN INSERT INTO log ...; commit; END;

-- Want triggers on a table does trigger exist:
SELECT trigger_name, trigger_type, triggering_event, table_name, status, trigger_body FROM USER_TRIGGERS WHERE table_name ='ACCOUNT' ORDER BY 3, 2, 1;

-- Toggle trigger off/on:
ALTER TRIGGER "SETARS"."DDL_LOGGING_TRIG" ENABLE;

-- Oracle calculate business non-weekdays days:
(TO_CHAR(b.sample_status_date,'J')-TO_CHAR(b.sample_received_date,'J'))+1 - ((((TRUNC(b.sample_status_date,'D'))-(TRUNC(b.sample_received_date,'D')))/7)*2) -
  (CASE WHEN TO_CHAR(b.sample_received_date,'DY')='SUN' THEN 1 ELSE 0 END) - (CASE WHEN TO_CHAR(b.sample_status_date,'DY')='SAT' THEN 1 ELSE 0 END) as BusinessDays

-- Oracle number format angle bracket for negative numbers, commas and decimal point e.g. <7,592.59>:
to_char(rate*qty,'999,999.99pr') amt
select to_char(-12345,'999,999.99pr') from dual; -- <1,234.00>

-- Postgres dates:
created > date('now') - 365
created > date('now') - interval '1 year'
select date('now') - interval '1 month' as x
-- Postgres data from last 2 days:
select clientid, taskdate, hpprogramid, count(*) from naalytics.ehalthplanpatients_test where taskdate > date('now')-interval '2 day' group by clientid, taskdate, hpprogramid order by taskdate desc

-- Postgres jobs status of jobs I am running:
select * from pg_stat_activity where usename='bheckel'

-- Postgres find duplicates:
select * from healthplanpatients hp where row(hpprogramid, externalpatientid, cardholderid, pharmacyid) in (select hpprogramid, externalpatientid, cardholderid, pharmacyid from .healthplanpatients_test);

-- Rows which have duplicate values for a set of columns (c1, c2, ...) using analytic function:
with dups as ( select t.*, count(*) over ( partition by c1, c2, ...) ct from ... t) select * from dups where ct > 1

-- Change field's datatype:
select stre_id as stid, cast(value as TIMESTAMP) as Waitime ...

-- Postgres commandline ODBC:
isql -v jaspre bheckel mypw

-- Postgres commandline:
psql -h ajsperdb1.edp.atbe.com TEBMART
psql -U atbleau -h db-02.twa.taeb.com teb
psql -h db-06.taeb.com TAEBMART -c "select * from analytis.reportlog where rpt='TMMRep' order by lastmodified desc LIMIT 1"

-- Empty 2 tables (implicit COMMIT because TRUNCATE is DDL, DDL statements issue a commit BEFORE and AFTER they run). Faster than DELETE. (1) it does an implicit commit (exceptions: PostgreSQL and SQL Server); (2) it does not execute any triggers:
TRUNCATE bigtable, fattable;  -- no WHERE clause allowed

-- Postgres remove leading zeros to find 01, 1, 03, 3:
where trim(leading '0' from storeid) in ('1','3')
select distinct concat(a.clientid::text,trim(leading '0' from b.clientstoreid::text),pharmacypatientid::text) as upid

-- Postgres cast convert type:
select * from stores where clients_fkid=999 and storeid::int4=3

-- Postgres version
select version();

-- SQL GROUP BY count more than one
select patientid, count(*) from health group by patientid having count(*)>1
-- Select only those with 2 or more maskedkey for one patient:
select id, count(distinct maskedkey) from xrfilldata where id in ('999','888') group by id having count(distinct maskedkey)>1;

-- Postgres what is running. Terminate query, self-kill a Postgres kill query:
select current_query, procpid from pg_stat_activity where usename = 'bheckel'
select pg_cancel_backend(8501);

-- SQL take only the highest value:
where listdate = (select max(listdate) from test.master_npi)

-- Postgres date range, pull data from last year for patients over 50:
filldate > date('now') - interval '1 year'  and  patientdob < date('now') - interval '50 year'

-- Postgres date range specific start date, go back 18 days:
and filldate>=(date('2016-05-15')-18) and filldate <='2016-05-15'

-- Postgres determine birthdate age range:
case when extract(years FROM age(patientdob))>=90 then 90 else extract(years FROM age(patientdob)) end as age
date_part('year',age(patientdob))>=41 and date_part('year',age(patientdob))<=75

-- Postgres calculate age:
date_part('year'::text, age(pd.dateofbirth::timestamp with time zone)) AS age
... patientdob < date('now') - interval '18 year'

-- Oracle select year portion year part only this year between years periods date part:
extract(YEAR from h.updated) in(2017,2018)
if (extract(year from sysdate) not between (compYear - 1) and (compYear + 1)) then...
select distinct account_id from tmp_audit_sp where extract(YEAR from created) = extract(YEAR from sysdate)

-- Postgres min max calculate age:
select min(date_part('year',age(dateofbirth))), max(date_part('year',age(dateofbirth))) ...

-- Postgres date selection, capture all activity for the 14th
select * from generate_series('2015-12-13'::timestamp without time zone, '2015-12-15'::timestamp without time zone, '1 second'::interval)
where date(generate_series) <= date('2015-12-14')

-- Postgres psql save write output to file:
select distinct pmapuserid, loginname as pmapusername, defaultclientid as clientid
\o saveoutput.txt  (\o to quit)  then run query

-- Postgres date truncation:
where date_trunc('minute', ahpp.lastmodified) = '2016-02-23 08:56:00'::timestamp

-- Postgres help $ psql help  \?

-- full join fulljoin FULL [OUTER] JOIN: returns all rows from both tables, matching up the rows wherever a match can be made and placing NULLs in the places where no matching row exists (rather than throwing the row away like LEFT JOIN). A "double OUTER" join, LEFT & RIGHT that returns all rows from A and B, extended with nulls if they do not satisfy the join condition

-- selfjoin SELF JOIN: a recursive join that results when a set of data is joined back to itself. Typically encountered when a parent-child relationship in a hierarchy needs to be traversed.  When using ANSI syntax to accomplish this, only the JOIN...ON syntax will work, and the keyword INNER can be used for clarity.

-- Find next Postgres sequence number:
select nextval('enrollmentperf_tmm_enrollmentperfid_seq');

-- Postgres remove seconds from timestamp:
psql -h db-06.twa.taeb.com TAEBMART -c "select to_char(lastmodified, 'yyyy-mm-dd HH24:MI') from reportinglog where reportname='TMMRep_Reporting_Automation' order by lastmodified desc limit 1"

-- Postgres between two dates date range:
where created>='2016-05-11' and created<'2016-05-12'
-- Postgres 2016-09-01 thru 2016-09-30 date range:
select min(filldate), max(filldate) from sdfarchive where filldate >= date_trunc('MONTH', now())-'1 month'::interval and filldate < date_trunc('month', NOW())-'1 month'::interval+'1 month'::interval;

-- Postgres datetime truncated to date for grouping:
select count(*), created::date from cce.ccepatientstaging where created >'2016-12-28' and clientid=2000000 group by created::date;

-- Postgres extract months:
select clientstoreid, to_char(filldate, 'YYYY-MM') as mymonth, count(*) as cnt ...
select SUM(amount) as sales, date_trunc('month', created_at)::date as date from orders group by date order by date DESC;

-- Postgres substr:
select distinct substring(cr.gpi,1,10)

-- Postgres reformat date no dashes:
select 'EXPIRE='||to_char(date('now')+365,'YYYYMMDD') as x2

-- Yesterday in Postgres date:
and lastmodified >= CURRENT_DATE-1

To save postgresql output to comma pipe delimited csv file (warning - multiple runs append so \q when done):
psql> \o t.out
psql> \f '|' \a \o /Drugs/Personnel/bob/t.csv
psql> \f ',' \a \t \o ~/tmp/bob/withoutheader.csv
psql> \f '\t' \a \t \o /sasdata/Personnel/bob/tabdelimited.out

-- Postgres commit transactions (case-sensitive).  Or use:  BEGIN; update tbl set field=0; COMMIT; (or ROLLBACK;):
\set AUTOCOMMIT off
commit;

-- Zero pad a number in postgresql:
select distinct lpad(clientstoreid::text, &sidlen, '0') as clientstoreid, ...

-- Postgres double pipe || alternative it does a SAS compress(clientstoreid)||compress(pharmacypatientid): 
select patientdateofbirth, concat(clientstoreid::text,pharmacypatientid::text) as upid
select patientdateofbirth, concat(trim(leading '0' from clientstoreid::text),pharmacypatientid::text) as upid

-- Yesterday (24 hours ago) SQL Server SQLServer date interval:
SELECT CURRENT_TIMESTAMP-1

-- SQL Server - similar to DESCRIBE in other databases SQLServer
USE sandbox
EXEC sp_help lu_prescriber
-- or less helpfully
EXEC sp_columns lu_prescriber

-- SQL Server whoami
select user_name()

SQL Server < 2005 alternative to Microsoft SQL Server Management Studio
osql -L   # list available SQL Servers on network
osql -E -S 'W23PSQL02\PRODUCTION' -i t.sql -o t.out
osql -n -E -w 200 -d bpms_nd -S 'W23PSQL02\PRODUCTION' -i ckbpmsoutliers.step07.sql 
Interactive (GO to run and QUIT to exit)
osql -n -E -S 'w23psql02\PRODUCTION' -d bpms_mt
Interactive but feeding it from the commandline:
osql -n -E -w 200 -d bpms_ak -S 'W23PSQL02\PRODUCTION' -Q "select count(*) from bpmsoutliers"

-- sqlserver 2005 command line, counterpart to oracle's sqlplus
$ sqlcmd -S zebsamoc00 -d uprd120 -i input.sql -o output.txt

SQL Server 2005 (like sqlplus, replaces osql & isql):
U:\>sqlcmd -S zebsamoc00 -d sprd120
1> select top 5 * from fwn.variablestp    2> go   ...n rows affected...   1> quit

U:\>sqlcmd /?
U:\>sqlcmd -S rtpsamoc008 -d ustst1236 -i t.qry -o t.res

-- now() for SQL Server:
select getdate()
select current_timestamp

-- Size of table in SQL Server database SQLServer:
EXEC SP_SPACEUSED N'rheckel.[bpmsoutliersnc60]'

-- Copy an SQL Server table into a new one that does not already exist:
SELECT * INTO xBpmsOutliersNC60 FROM BpmsOutliersNC60 

-- Delete table (even if records exist in it):
DROP TABLE bobhlm;

-- Oracle's MINUS is EXCEPT in ANSI SQL:
INSERT INTO links_material (matl_desc) VALUES ('Waiting for update from SAP'); commit;
INSERT INTO links_material (matl_desc, matl_mfg_dt, matl_exp_dt, matl_nbr, batch_nbr, matl_typ) VALUES ('Waiting for update from SAP', '01-JAN-1960', '01-JAN-1960', '0737003', '6ZP8404', 'MANL'); commit;

-- Oracle first day of current month:
select trunc(sysdate,'MM') from dual;

-- First and last day of last year date:
SELECT ADD_MONTHS(TRUNC(SYSDATE,'YEAR'), -12) jan_prev_yr, ADD_MONTHS(TRUNC(SYSDATE, 'YEAR'), -1) +30 dec_prev_yr FROM dual

-- Postgres first day of last month:
select date_trunc('MONTH', now())-'1 month'::interval;
-- Postgres earlier than first of this month:
select distinct clientid, dashstart from dshbrd.dashboardclients where deactivated != TRUE and dashstart < date_trunc('MONTH', now());

-- Postgres first day of year beginning of year
SELECT date_trunc('year', now())::date;

 /* Group by month counts by month: */
select count(distinct taebpatientid), month(filldate) from statin_final group by 2; -- Postgres
-- Count group by day:
SELECT count(1), trunc(actual_updated) FROM employee WHERE actual_updated >(systimestamp - INTERVAL '30' day) group by trunc(actual_updated) order by 2;
-- Count column group by month:
SELECT COUNT(u.msg), EXTRACT(YEAR FROM u.execute_time), EXTRACT(MONTH FROM u.execute_time) FROM User_Oncall_Results u GROUP BY EXTRACT(YEAR FROM u.execute_time), EXTRACT(MONTH FROM u.execute_time)  ORDER BY 2,3
-- Oracle count group by month last 3 months:
SELECT to_char(TRUNC(o.updated, 'MONTH'),'YYYY-MM') AS mo_fmtd_without_time, COUNT(o.updated) AS COUNT FROM opp o WHERE o.updated > ADD_MONTHS(SYSDATE,-3) GROUP BY TRUNC(o.updated, 'MONTH') ORDER BY 1 DESC
-- Count column IDs by month:
select count(distinct contact_id), trunc(actual_updated, 'MONTH') from c_base group by trunc(actual_updated, 'MONTH') order by 2;
select count(distinct contact_id), trunc(actual_updated, 'MONTH'), (sysdate - 65) visualize_date_back_65_days from contact_base where actual_updated > sysdate-65 group by trunc(actual_updated, 'MONTH') order by 2;

-- Postgres bulk load a textfile to a table:
\COPY analytics.obcdaily (client_name, , job_type_extra, att_count) FROM /Data/psql_import_temp.csv CSV HEADER

-- Only those columns explicitly listed in the GROUP BY clause may appear un-aggregated (i.e. not as a parameter of an aggregate function) in the SELECT or HAVING clauses.  That usually means the SELECT is equal or shorter to the GROUP BY.

-- Oracle Nth Top-N select top 5 rows of a table in order:
SELECT * FROM scott.emp WHERE ROWNUM <= 5 ORDER BY ename;  -- probably not what you want!
SELECT * FROM (SELECT * FROM scott.emp ORDER BY ename) WHERE ROWNUM <= 5;  -- top 5 employees by alphabetical name
SELECT * FROM emp ORDER BY ename FETCH FIRST 5 ROWS ONLY;  -- Oracle 12c+ but  WHERE rownum<6  is more efficient because it does't read the whole table
SELECT * FROM emp ORDER BY ename FETCH FIRST 5 ROWS WITH TIES;  -- can end up with more than 5 recs (in indeterminate order)
-- Oracle Nth Top-N select first top 20% percent of rows of a table in order:
SELECT * FROM emp ORDER BY ename FETCH FIRST 50 PERCENT ROWS ONLY -- 7 of the 14 rows
SELECT * FROM emp ORDER BY ename OFFSET 2 ROWS FETCH NEXT 3 ROWS ONLY  -- of the top-5 rows, skip the top 2 just list #3, #4, #5
-- Analytic Function to get the employee(s) with the 5 Top-N Nth highest salary, non-Olympic:
select * from ( select empno, ename, job, hiredate, sal, comm, dense_rank() OVER (order by sal desc) r from  emp ) where r < 6;

-- Top-N query, but it can only do the top-rows (RANK aka Olympic rule), internally implementing it like an inline view with row_number or rank analytic functions. But if you want top-values rule, you must do it yourself with dense_rank.
FETCH FIRST 3 ROWS WITH TIES

-- Build concatenate a random comma separated CSV list of ids:
SELECT listagg(account_search_id,', ') WITHIN GROUP (ORDER BY account_search_id) FROM account_search SAMPLE(0.1) WHERE ROWNUM<99;

-- Determine the min and prove it with a list of all radiuses for that class, using listagg as an Analytic Function:
select class, planet, min(radius), listagg(min(radius),',') within group ( order by planet ) over ( partition by class ) class_radii from named_moons group by class, planet order by 1,2

-- Display list all columns in a table CSV list output (cannot use DISTINCT):
SELECT listagg(column_name, ', ') within group (order by column_name) csv_list_of_the_columns FROM all_tab_columns WHERE lower(table_name) = 'email_messages' GROUP BY table_name;

-- Handle comma separated list string overflow error gracefully with elipses ellipses after 327671 bytes:
SELECT LISTAGG(ename, ', ' ON OVERFLOW TRUNCATE '...' WITHOUT COUNT) WITHIN GROUP (ORDER BY ename) AS csv_list_truncated_dots FROM emp CROSS JOIN (SELECT level FROM dual CONNECT BY level <= 1000) WHERE deptno = 30;

LISTAGG(ao.associated_opp_id, '/' ON OVERFLOW TRUNCATE '...' WITHOUT COUNT) WITHIN GROUP (ORDER BY ao.associated_opp_id) OVER (partition by op.opportunity_id) as linked_consulting_oppts,
COUNT(ao.opportunity_id) over(partition by op.opportunity_id) as num_linked_consulting_oppts

-- RANK as an aggregate function:
select rank(1600) WITHIN GROUP (order by sal desc) from emp;  -- 7 i.e. 7th place, vs. analytic OVER(ORDER BY...) gives whole table with ranks
select dense_rank(1600) WITHIN GROUP (order by sal desc) from emp;  -- 6 i.e. 6th place

-- Analytic Function SQL partition-order-windowing:
,count(1) OVER (order by d) cnt_cumul_grp  -- 1,2,4,4,5,6
,row_number() OVER (order by d) row_seq_in_dt_order  -- 1,2,3,4,5,6
,rank() OVER (order by d) orderbydt -- 1,2,3,3,5,6 have dups "Olympic" rank has holes
,dense_rank() OVER (order by d) orderbydt_dense -- 1,2,3,3,4,5,6 still have dups but fill the holes, unlike Olympic
,row_number() OVER (partition by d order by d) rownumbyday  -- 1,1,1,2,1,1
-- Can be Top-N by day if used as a subquery
,rank() OVER (partition by d order by amt) rank_by_day -- 1,1,1,1,1,1 would be 1,1,1,1,3,1,1 --if union all select date '2000-01-03', 99 from dual existed and dense_rank would make the 3 a 2
,first_value(amt) OVER (partition by d order by d) firstdot  -- 10,11,30,30,10,14
-- Good for cols where only the first appearance holds empno and rest are blank and need to be padded out (like a report for human consumption)
,last_value(amt IGNORE NULLS) OVER (order by d)  lastdot_fillin_the_blank  -- 10,11,30,30,10,14
,last_value(amt) OVER (order by d RANGE between current row and unbounded following) last_from_lastdategrp  -- 14,14,14,14,14,14
-- The NTH_VALUE clause lets us identify boundary values that are not necessarily the minima and maxima which could be identified by FIRST_VALUE() and LAST_VALUE()
,nth_value(amt,2) OVER (order by d) second_highest_skip_outliers  -- , 11, 11, 11, 11, 11
,round(amt/nth_value(amt,2) over (order by d),2)*100 percent_diff  -- , 100, 273, 273, 91, 127
-- Default windowing clause for ORDER BY is "RANGE between unbounded preceding and current row"
,sum(amt) OVER (order by d) running_total0  -- 10,21,51,81,81,91,105
-- But usually the default isn't what you want, normally running totals should only include values from previous ROWS
,sum(amt) OVER (order by d ROWS between unbounded preceding and current row) running_total1  -- 10,21,51,81,91,105
--      ,sum(amt) OVER (order by d ROWS between MYFUNC(foo) preceding and 0 following) running_total2
--      ,sum(amt) OVER (order by d ROWS between MYSEQ-MYTRAILING_SEQ preceding and 0 following) running_total3
,avg(amt) OVER (order by d ROWS between 1 preceding and 1 following) moving_average  -- 10.5,17,23.6666666,23.333333,18,12
-- Use time RANGE not physical ROWS to avoid missing data
,sum(amt) OVER (order by d RANGE between interval '2' day preceding and current row) running_total_2day  -- 10,21,81,81,81,84
,avg(amt) OVER (order by d RANGE between interval '2' day preceding and current row) moving_average_2day  -- 10,10.5,20.25,20.25,20.25,21
-- Always need an ORDER BY for LAG() & LEAD()
,lag(amt) OVER (order by d) amt_before  -- NULL,10,11,30,30,10
,lag(amt, 2, 0) OVER (order by d) amt_2before_nonull  -- 0,0,10,11,30,30
,lead(amt) OVER (partition by d order by d) amt_after  -- , , 30, , ,  good for finding a change in status when you have daily data
-- Want only first date in a contiguous series otherwise leave blank
,case when nvl(lag(d) over (order by d), d) != d-1 then d end lowval_of_range  -- 01jan, , , 03jan, , 
,nvl(amt, lag(amt IGNORE NULLS) OVER (partition by d order by d)) fillin_the_blank_handle_nulls  -- 10,11,30,30,10,14
--_______________________________________ <--still just another aggregation function like count(1) or sum(amt)
,listagg(d,', ') within group(order by d) OVER (partition by amt) csv
,100*cume_dist() OVER ( order by d) as cumedist  -- 16.666, 33,333, 66,66, 66,66, 83,333, 100
,100*percent_rank() OVER (order by d) as pctrank  -- 0, 20, 40, 40, 80, 100
-- Put row into one of 4 buckets quartiles:
,ntile(4) OVER (order by amt) as quartile  -- 1(10), 1(10), 2(11), 2(14), 3(30), 4(30)
,sum(amt) OVER () grand_sum  -- 105,105,105,105,105,105
,avg(amt) OVER () grand_avg  -- 17.5,17.5,17.5,17.5,17.5,17.5
,count(1) OVER () grand_sum -- 7,7,7,7,7,7

-- Want only the first value in case of duplicates:
SELECT DISTINCT FIRST_VALUE(account_name_id) over(partition by account_id order by updated desc) ...

-- Analytic Function quartile split employees randomly into 4 buckets:
select empno, ename, job, hiredate, sal, deptno, ntile(4) over ( order by DBMS_RANDOM.VALUE ) as grp from scott.emp order by grp;

-- Find employees with salary greater than the average revenue generated in their department.  Correlated subquery:
SELECT * FROM employees e WHERE salary > (SELECT AVG(revenue_generated) FROM employees e2 WHERE d.department = d2.department);
SELECT * FROM scott.emp e WHERE sal > (SELECT AVG(sal) FROM scott.emp e2 WHERE e.deptno=e2.deptno);

-- Calculate percent of total after adding total in subquery:
select a.*, b.*, a.UPID/b.tot as pct format=PERCENT8.2 from report1_nRx a join (select nRx, sum(upid) as tot from report1_nRx) b on a.nRx=b.nRx

masked_patientkey = encode(digest(coalesce(split_part(patientnamefirst, ' ', 1),'') || patientnamelast || (case when patientdob is not null then to_char(patientdob,'yyyy-MM-dd') else '' end) || substring(coalesce(patientposctalcode, ''), 1,5), 'sha256'),'hex')
select digest(patientnamefirst,'sha1') from rxfilldata_parent limit 1;

-- Postgres client encrypted using salt 'theirsalt', encrypt to compare with original pharmacypatientids hash
select pharmacypatientid, encode(digest(pharmacypatientid||'theirsalt','sha1'), 'hex') as patient_num2, filldate

-- Postgres rounding percentages
select clientid, avg(enrolledratio)::decimal(5,2)

-- Postgres datetime criteria:
select * from tmm_enrollmentperf where created > '2017-01-30 09:00:00'::timestamp;

-- Do we have 12 months for each client?:
select clientid, year, count(*) from (select distinct clientid, year, month from dshbrd.pdctracksummary where year=2016) as t group by clientid, year order by clientid, year;

-- CTE WITH temporary table creation:
with val as ( values ('1427315266'),('1003048109'),('1003109422'),('1003128414') ) select column1 from val;
with v as ( select date '2000-01-01' d, 10 amt from dual union all select date '2000-01-02', 11 from dual) select d FROM v;

-- Postgres age today and at end of year e.g. 51 years 8 mons 4 days | 52:
select age('1965-10-30'::date), date_part('year', age('2017-12-31', '1965-10-30'))

-- Run Postgres script:
bb@db-dev-01.twa.taeb.com:TAEBMART \i /sasdata/Personnel/bob/DashboardETLenroll/Dev_to_db-06_20171111_final.sql

-- Postgres copy table:
CREATE TABLE mycopy (LIKE mytable INCLUDING ALL); INSERT INTO mycopy SELECT * FROM mytable;

-- Postgres insert a file into a table:
\copy bob from 't.txt' (delimiter ',');
$ psql -h db-dev-01.twa.taeb.com TAEBMART -c "\copy public.bob from 't.txt' (delimiter ',');"

-- Postgres execute sql from file command line:
psql -h db-dev-01.twa.taeb.com TAEBMART -f /sasdata/Dev_to_db-06_20180316_dshbrd_hppatientstarpdc.sql

-- User prompt msgbox:
... AND UPPER(a.sample_id) like &< name = "Sample Id or mask.  Wildcard is %" hint = "Entry not required" type = "string" uppercase = "yes" default = "%" ifempty = "%" > ...

-- Exit sqlite3: .q
-- View attached sqlite3 databases: .databases
-- View available sqlite3 tables: .tables
-- View various sqlite3 settings: .show
-- View field names sqlite3: .schema mytbl
$ sqlite3 test.db "SELECT * FROM Cars;"

-- Cartesian join cross join non-ANSI:
SELECT Name, Day FROM Customers, Reservations;
-- ANSI e.g. shirt manufacturer with many different products. They have a set of sizes (S, M, L). They create each shirt in every size. Generate stock rows for every shirt in every size:
select * from shirts CROSS JOIN shirt_sizes  -- be explicit instead of just ','

-- INSERT ALL - the shorthand multi-table INSERT rows into 2 or more tables at once (unconditional version - every row from the source query goes into every table):
INSERT ALL INTO teddies values ('Dinosaur King', 'red')  into bricks values ('sphere', 'green', 100)  select * from dual
-- INSERT ALL - the shorthand multi-table INSERT rows into 2 or more tables at once (conditional version - every row from the source query goes into every table where the clause is true) Use INSERT FIRST to ensure source rows only go into ONE of the target tables, but if you use INSERT FIRST, you must have a WHEN clause before your tables:
INSERT ALL INTO people values (full_name) WHEN hire_date is not null THEN into staff values (hire_date) WHEN nhs_number is not null THEN into patients values (nhs_number) select * from people_details;

-- Check for recent last recompilation or invalid status:
SELECT owner, object_name, object_type, status, last_ddl_time FROM dba_objects WHERE object_name = 'USER_ON' AND object_type LIKE 'PACKAGE%'
-- Check last time table was touched:
SELECT owner, object_name, object_type, status, last_ddl_time, CREATED, TIMESTAMP FROM dba_objects WHERE object_name = 'MYTBL';

SELECT SYSTIMESTAMP INTO starting_time FROM DUAL;

-- Oracle LIKE regex case-insensitive compare with LIKE:
SELECT * FROM user_source WHERE lower(text) like '%cdhub_jms%' and type != 'PACKAGE' order by type, name, line;
SELECT * FROM user_source WHERE regexp_like(text, 'cdhub_jms\.[ac]', 'i') and type != 'PACKAGE' order by type, name, line;

SELECT job_name, start_date, regexp_replace(start_date, '[AP]M -\d\d:\d\d.*$', 'EST5EDT') from user_scheduler_jobs
-- Oracle regex count the finds of the 'ora' strings returns 2:
SELECT REGEXP_COUNT ('Oracle PL/SQL By Example Updated for Oracle 11g', 'ora', 1, 'i') FROM dual;
-- Oracle regex - returns 250/50 MCG:
select regexp_substr(upper('Disk Inh Pwdr 250/50 mcg 60D'),'\d+/[^/]* *MCG') as stren from dual

-- If too complicated for REGEXP_LIKE:
select employee_id, jobtitle from employee e where extract(year from termination_date) = 2019 and instr(upper(jobtitle),'ACCOUNT') > 0 and instr(upper(jobtitle),'ACCOUNTANT') <= 0 and instr(upper(jobtitle),'ACCOUNTING') <= 0 and instr(upper(jobtitle),'TECHNICAL ACCOUNT') <= 0 and instr(upper(jobtitle),'SUPPORT ACCOUNT') <= 0

-- Split on semicolon FREQ=MINUTELY;INTERVAL=10;
,regexp_substr(repeat_interval, '[^;]+;', 1, 1) time  -- FREQ=MINUTELY;
,regexp_substr(repeat_interval, '[^;]+;', 1, 2) interval  -- INTERVAL=10;

-- Concatenate full name without extra spaces when no middle name provided:
RETURN (TRIM(REGEXP_REPLACE( (first_name_in || ' ' || middle_name_in || ' ' || last_name_in), ' +', ' ')) );

-- Comma separated delimited parse split a record holding a CSV string to rows, one to many:
SELECT table_name, column_name, generation_type, REGEXP_SUBSTR(identity_options,'[^,]+', 1, LEVEL) identity_options FROM user_tab_identity_cols WHERE table_name = 'T_ID_COL' CONNECT BY REGEXP_SUBSTR(identity_options,'[^,]+',1,level) IS NOT NULL;

-- Comma separated delimited parse split hardcoded CSV input string to numbers column:
SELECT to_number(TRIM(regexp_substr(accounts, '[^,]+', 1, LEVEL))) AS account_id FROM (SELECT '123,456' AS accounts FROM dual) CONNECT BY regexp_substr(accounts, '[^,]+', 1, LEVEL) IS NOT NULL;
-- Comma separated delimited parse split hardcoded CSV input string to numbers column, list can be >1K 1000 chars without overflow (18c+):
SELECT account_id FROM (SELECT TO_NUMBER(COLUMN_VALUE) AS account_id FROM XMLTABLE(TRIM('123,456')));

-- Delimited list of hardcoded numbers:
...AND territory_lov_id IN(SELECT to_number(column_value) FROM xmltable(('"' || REPLACE(terrlist, ',', '","') || '"')))  -- terrlist is a varchar2 holding '123,456'
...AND ( territory_lov_id IN(SELECT to_number(column_value) FROM xmltable(('"' || REPLACE(terrlist, ',', '","') || '"'))) OR terrlist IS NULL )  -- accomodate cases where no comma delimited input parameter passed to procedure:
-- Delimited list of hardcoded numbers:
CURSOR c1 IS SELECT account_id FROM account_base WHERE account_id IN ( SELECT in_id FROM (SELECT TO_NUMBER(COLUMN_VALUE) in_id FROM XMLTABLE(TRIM(in_ids))) );

-- Compare Oracle table to csv list of numbers:
SELECT aid, ab.account_id FROM (SELECT to_number(column_value) aid FROM xmltable(('"' || REPLACE('123,456', ',', '","') || '"'))) csv LEFT JOIN account_base ab ON csv.aid=ab.account_id

CURSOR contacts IS SELECT trim(COLUMN_VALUE) contact_id FROM XMLTABLE(upper(TRIM('"' || replace(in_contact_id_list, ',', '","') || '"'))); FOR rec IN contacts LOOP...

-- Oracle date time interval in the last 5 minutes:
SELECT (SYSTIMESTAMP - INTERVAL '5' minute) AS five_minutes_ago, SYSTIMESTAMP FROM dual
SELECT * FROM account_team where created>(SYSDATE - INTERVAL '5' minute);
SELECT controlfile_time, CURRENT_TIMESTAMP - controlfile_time minutes_ago FROM v$database;
WHERE execute_time >= (SYSTIMESTAMP - INTERVAL '5' minute)
start_date := cast(SYSTIMESTAMP + (1/(24*60) * 5) AS TIMESTAMP);  -- 5 minutes from now in future DEPRECATED
-- 18-MAR-19 09.40.30.000000 AM   18-MAR-19 09.40.30.000000 AM       3/18/2019 09:40:30 AM   33/18/2019 09:40:30 AM      3/20/2019 09:38:30 AM
SELECT cast(SYSTIMESTAMP + (.000694 * 2) AS TIMESTAMP) AS cast_ddmmmyy, CAST(sysdate + interval '2' minute AS TIMESTAMP) AS cast_ddmmmyy2, SYSTIMESTAMP + (.000694 * 2) AS mddyyyy, sysdate + interval '2' MINUTE AS mmddyyyy2, SYSTIMESTAMP + 2 AS days FROM dual
-- 3 hours from now DEPRECATED:
SELECT systimestamp + (3/24) FROM dual;
-- 3 minutes from now DEPRECATED:
SELECT systimestamp + (3/(24 * 60)) FROM dual;
-- 12 hours from now:
select sysdate+1/2 from dual;
select sysdate + interval '12' hour from dual;
-- 23 months ago:
SELECT add_months(systimestamp,-23) FROM dual;
SELECT sysdate - interval '23' month from dual;
select add_months(date '2016-01-01', level - 1) from dual connect by level <= 48;  -- generate build time series the last 48 months dates rows

SELECT last_day(TIMESTAMP '2017-01-21 21:32:48') "last day of month", next_day(SYSDATE', 'FRIDAY') "next day after friday" FROM dual;
-- 5 years and 3 months from now in future:
SELECT systimestamp + TO_YMINTERVAL('5-3') "fiveyrs threemos fromnow" FROM dual;
-- 12 days 8 hours and 4 minutes from now in future:
SELECT systimestamp + TO_DSINTERVAL('12 8:04:00') "near future" FROM dual;

-- Oracle default full date time with timezone, both same 27-AUG-19 04.17.21.981474000 PM -04:00:
select to_char(SYSTIMESTAMP, 'DD-MON-YYYY HH.MI.SS.FF9 AM TZR'), SYSTIMESTAMP from dual;
select SYSTIMESTAMP - INTERVAL '1' day from dual                       -- 17-JUL-19 11.59.01.335483000 AM -04:00
select cast(SYSTIMESTAMP - INTERVAL '1' day as timestamp) from dual    -- 17-JUL-19 11.59.01.335483000 AM
select cast(SYSTIMESTAMP - INTERVAL '1' day as timestamp(1)) from dual -- 17-JUL-19 11.58.14.800000000 AM
select cast(SYSTIMESTAMP - INTERVAL '1' day as timestamp(7)) from dual -- 17-JUL-19 11.59.01.335483000 AM

-- Oracle repeat character tab:
dbms_output.put_line('modifying: ' || j.full_job_name || rpad(chr(09), 4, chr(09)) || ' ' || j.start_date || ' to ' || j.new_start_date);

-- SQL Server date datetime literal or  { d '1990-10-02' }  { t '13:33:41' }
WHERE fwn.VariableStp.dtSplTakenTime= {ts '2008-11-21 15:46:59.727'}
-- SQL Server like Oracle TO_DATE: 
WHERE  batch_time > {ts '2008-02-13 00:00:00.000'}
-- but if simple SQL Server date just use:
WHERE batch_time > '2008-02-13'

-- SQL Server version:  SELECT @@VERSION

-- Return anything but Y, regardless of existence of nulls (where val != 'Y' would not include any nulls):
select * from basic_data where lnnvl(val = 'Y')

-- Oracle generate random number roll dice:
exec dbms_random.seed(0);
SELECT DBMS_RANDOM.VALUE(1, 6) FROM dual;  -- 3.32932424
SELECT round(DBMS_RANDOM.VALUE(1, 6), 0) FROM dual;  -- 3 (like dice)
SELECT ADD_MONTHS(SYSDATE, -1 * DBMS_RANDOM.VALUE(1, 6)) FROM dual  -- 8/29/2018 11:20:27 AM  or 9/29...etc

to_number(trunc(dbms_random.value(1000,9999))|| to_char(systimestamp,'FFSS')|| seq.nextval))

CAST(trunc(aa.duns_nbr) AS VARCHAR2(90)) duns_nbr
cast(l.value_description as varchar2(96)) as value_description,

-- Benchmarking:
SELECT st.VALUE FROM v$mystat st, v$statname sn WHERE st.statistic# = sn.statistic# AND sn.name = 'Oracle session pga memory';
DECLARE t1 INTEGER; t2 INTEGER; BEGIN t1 := dbms_utility.get_time(); ...; t2 := (dbms_utility.get_time()-t1)/100; dbms_output.put_line(t2); END;

-- Throws NO_DATA_FOUND:
declare eid number; begin SELECT e.empno INTO eid FROM emp e WHERE e.empno=99999; dbms_output.put_line(eid); end;
-- Don't error on NO_DATA_FOUND if count is 0:
SELECT COUNT(*) FROM account_base WHERE 1 = 1 AND account_id = 42;

-- Is parent or any children in the hierarchy an existing cust?:
SELECT count(1) FROM account_base b WHERE b.account_id = 181477 AND EXISTS (SELECT 1 FROM account_base sup, account_base detail WHERE sup.account_id = b.sup_account_id AND detail.sup_account_id = sup.account_id) AND detail.existing_customer = 1);

-- Oracle will cache input values and return values for the duration of the SQL statement. If the function is called more than once with the same input values, Oracle will only execute the function body the first time.
FUNCTION get_dept_info(dept_id NUMBER) RETURN dept_info_record DETERMINISTIC;
-- If a session makes a change to a table on which a cache is reliant, but that session does not commit those changes, then the cache is disabled for the CURRENT SESSION ONLY. The cache is still valid for and used by all other sessions.
FUNCTION get_dept_info(dept_id NUMBER) RETURN dept_info_record RESULT_CACHE; -- Function Result Cache

-- Expire password Oracle user password:
ALTER USER LIMSARCH PASSWORD EXPIRE;
-- Change Oracle user password:
ALTER USER limsarc IDENTIFIED BY "newpw" REPLACE "oldpw";

-- Change password Postgres password:
ALTER USER heckel WITH PASSWORD 'myPass';

ALTER TABLE mytable RENAME TO othertable;
alter index RBB_HC_JI_CIX rename to "krbb_HC_JI_CIX";  -- case-sensitive

EXECUTE IMMEDIATE 'ALTER TABLE EMAIL_MESSAGES ADD CONSTRAINT EMAIL_MESSAGES_PK PRIMARY KEY (EMAIL_MESSAGES_ID)'; -- Oracle

CREATE TABLE plch_employees ( employee_id   INTEGER PRIMARY KEY, last_name  VARCHAR2 (100), salary  NUMBER (3))

ALTER PACKAGE ZTESTBOB COMPILE PACKAGE; show errors PACKAGE ZTESTBOB;
ALTER PACKAGE ZTESTBOB COMPILE BODY; show err BODY ZTESTBOB;

ALTER TABLE analytics.build ADD COLUMN rundatacheck BOOLEAN NOT NULL DEFAULT TRUE;

ALTER TABLE archivebuildconfig ADD COLUMN job_type text NOT NULL DEFAULT 'Imports';

ALTER TABLE Customer DROP COLUMN Birth_Date;

CREATE TABLE zorion35282 (a NUMBER, b NUMBER, c NUMBER, d NUMBER, e NUMBER, f NUMBER, g NUMBER)
INSERT INTO zorion35282 VALUES (1, 2,3,4,5,6,7); COMMIT;
ALTER TABLE zorion35282 RENAME COLUMN a3 TO a4;
ALTER TABLE user_role1 RENAME TO user_role2;
ALTER TABLE zorion35282 ADD sql_text_all CLOB;  -- no COLUMN keyword for Oracle!
EXECUTE IMMEDIATE 'alter table ASP_DET drop (FUTURE_TIER, FUTURE_COVERAGE, FUTURE_TSR_OWNER)';
-- Change data type (if column is all NULLs):
ALTER TABLE email_messages MODIFY msgbody VARCHAR2(63);

-- Oracle which objects are invalid objects:
select * from user_objects o where object_type != 'JAVA CLASS' and status = 'INVALID' and to_date(timestamp,'YYYY-MM-DD HH24:MI:SS') > sysdate - interval '5' minute  order by 8 desc;

-- After dropping table TEMPTBL, verify no invalids check object validity:
select object_name, object_type, status from all_objects where object_name like 'TEMP%';
-- If INVALID, why (some, like VIEWS, will only get an entry after we make an attempt to access them):
select name, type, line, position, text from all_errors where name like 'TEMP%';

-- Compile selectively:
SQL> ALTER PROCEDURE z_set_activ_match_code COMPILE;  -- if compilation errors: SHOW ERROR
-- Compile entire schema's invalid objects:
EXEC DBMS_UTILITY.compile_schema('SETARS', FALSE);  -- FALSE == compile only INVALID objects

create table emp as select * from scott.emp; insert into emp values (999, 'joe', 'CLERK', 0, null, 10, null, 99);

-- Create an empty zero record table based on another table:
CREATE TABLE orion_37551 AS SELECT * FROM valid_orders WHERE 1=0;

CREATE SEQUENCE UID_RION_37551 MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 10  START WITH 1 CACHE 20 NOORDER NOCYCLE 
-- Increment sequence using it as a primary key:
INSERT INTO RION_37551 (email_messages_id, subject) VALUES (uid_rion_37551.NEXTVAL, 'test sequence'); COMMIT;

CREATE OR REPLACE TRIGGER on_schema_mod_trigger AFTER ALTER OR CREATE ON scott.SCHEMA WHEN (ORA_DICT_OBJ_TYPE = 'TABLE') BEGIN dbms_output.put_line('ok'); END;

-- Choose highest value in list:
SELECT GREATEST(SYSDATE, to_date('01JAN2029'), to_date('01jan2030')) FROM dual

-- Sample CTAS database table with tens of thousands of rows:
CREATE TABLE dummy_table AS SELECT owner, object_name, object_id FROM all_objects;
-- Sample CTAS database table with 1 column holding 1,2,3... in 10 rows:
CREATE TABLE dummy_table AS SELECT level l FROM dual CONNECT BY level <=10;
-- Sample CTAS database table with 1 column and 6000 rows (6 deptno = '30' rows x 1000) in the cartesian:
CREATE TABLE dummy_table AS SELECT deptno FROM emp CROSS JOIN (SELECT level FROM dual CONNECT BY level <= 1000) WHERE  deptno = 30
create table dummy_table as select rownum pid, 'product '||rownum descr from dual CONNECT BY level <= 100000;
-- Sample CTAS database table with primary key:
create table dummy_table(id PRIMARY KEY, tag) as select rownum id, to_char(rownum) tag from dual CONNECT BY level <=10;
-- Sample CTAS database table load 5 years of data from 2018-01-02 to 2022-12-31:
create table dummy_table as select DATE '2018-01-01'+rownum x, rownum y from dual connect by level <= 365*5;
-- Sample CTAS table using a csv list that would normally overflow an IN() list max of 1K 1000 items (18c+):
create table dummy_table as SELECT to_number(COLUMN_VALUE) account_id FROM xmltable(('"' || REPLACE('123,456', ',', '","') || '"'));

-- Print SQL for a deep copy CTAS sqlcl:
ctas orders bobclonedtbl;

-- Populate an existing sample dummy Oracle table with 100K random strings of VARCHAR(30):
insert /*+APPEND*/ into mytbl select level, dbms_random.string('a',30) from dual connect by level <= 100000

-- Oracle create sample data and round to 15 minute increments intervals:
WITH v AS (select trunc(sysdate)+548/1440+rownum/1440 d1 from dual connect by level <= 10 ) SELECT TRUNC(d1, 'hh24') + ROUND(to_char(d1,'MI') / 15) * 15 / 1440 round_to_15min_intervals FROM v

-- View list determine Oracle grants privileges:
SELECT * FROM  DBA_SYS_PRIVS WHERE grantee='SETARS' and privilege like '%OBJ%';
SELECT * FROM  DBA_role_PRIVS WHERE grantee='SETARS';
SELECT * FROM user_role_privs WHERE granted_role = 'SELECT_CATALOG_ROLE';
-- View list determine Oracle grants privileges for a specific user view (d.table_name can be a view):
SELECT * FROM DBA_TAB_PRIVS d WHERE d.table_name = 'RPT_PTG_OPPORTUNITIES' and d.grantee='SE_PSUX';

-- Build Oracle GRANT statements dynamically:
select 'GRANT SELECT,INSERT,UPDATE,DELETE,EXECUTE ON ' || tname || ' to pks_user' from mytab;

BEGIN sys.dbms_scheduler.create_job( job_name => 'NIGHTLY_RISK_IP_UPDATE_JOB', job_type => 'PLSQL_BLOCK', job_action => 'BEGIN RISK_PKG.periodicRiskUpdate; END;', start_date => '19-DEC-18 12.30.00PM EST5EDT', repeat_interval => 'FREQ=Daily', end_date => to_date(null), job_class => 'DEFAULT_JOB_CLASS', enabled => true, auto_drop => false,  -- run more than once comments => 'Nightly update job'); END;
BEGIN dbms_scheduler.drop_schedule('DAILY_SCHEDULE'); dbms_scheduler.drop_job('DAILY_JOB'); END;
BEGIN dbms_scheduler.drop_job('SETARS.DAILY_DATA_MAINTENANCE_JOB'); END;
exec DBMS_SCHEDULER.stop_job(job_name => 'JOB_LOAD_NB'); 
exec DBMS_SCHEDULER.disable(job_name => 'JOB_ROION48384');

SELECT SYSDATE + interval '1' minute from dual; --01-MAY-20 13:36:33
-- Good for dbms_scheduler start_date start_date => '01-MAY-20 01.51.00PM EST5EDT',:
SELECT CAST(SYSDATE + interval '1' minute AS TIMESTAMP) from dual; --01-MAY-20 01.37.07.000000000 PM

-- Oracle dbms_scheduler scheduled jobs:
SELECT * from USER_SCHEDULER_JOBS order by last_start_date desc
select * from user_scheduler_job_log order by log_date desc
SELECT * FROM user_SCHEDULER_JOB_RUN_DETAILS order by actual_start_date desc
-- Oracle dbms_scheduler scheduled job next run and what it executes (JOB_ACTION):
SELECT * from user_scheduler_jobs WHERE job_name LIKE '%MAINT%' or upper(job_action) like '%MAINT%'

-- What dbms_scheduler scheduled jobs exist with this string:
select a.job_name, a.JOB_TYPE, a.JOB_ACTION, a.start_date, a.REPEAT_INTERVAL, a.end_date, a.JOB_CLASS, a.ENABLED, a.AUTO_DROP, a.comments from user_scheduler_jobs a where lower(job_action) like '%period%';

-- Oracle dbms_scheduler scheduled job canonical:
--scheduled/running status
SELECT state, job_name, job_type, job_action, start_date, repeat_interval, end_date, job_class, enabled, auto_drop, comments FROM user_scheduler_jobs WHERE job_name = 'JOB_RION48384';
--job finished status
SELECT job_name, status, error#, errors, actual_start_date, run_duration, output, errors FROM user_scheduler_job_run_details WHERE job_name = 'JOB_RION48384' ORDER BY actual_start_date DESC;

-- What are all the dbms_scheduler scheduled jobs that ran in the last 2 days:
SELECT distinct job_name FROM ALL_SCHEDULER_JOB_RUN_DETAILS WHERE actual_start_date>sysdate-2 order by 1;
-- Oracle dbms_scheduler scheduled job outcome log success or fail (STATUS) and the error text (ADDITIONAL_INFO):
SELECT * FROM user_SCHEDULER_JOB_RUN_DETAILS WHERE JOB_NAME LIKE 'MAINT%' order by log_id desc;
-- dbms_scheduler SCHEDULED or DISABLED;
SELECT state from user_scheduler_jobs WHERE job_name = 'PERIODIC_LIFECYCLE_UPDATE';
-- Disable dbms_scheduler scheduled job:
exec SYS.DBMS_SCHEDULER.disable('SETARS.PERIODIC_LIFECYCLE_UPDATE');
-- What dbms_scheduler scheduled jobs are running:
SELECT job_name from user_scheduler_jobs WHERE state='RUNNING';
-- Which scheduled jobs ran around 1am?:
SELECT * FROM user_SCHEDULER_JOB_RUN_DETAILS WHERE to_char(REQ_START_DATE, 'HH24MI')  between '0100' and '0200' ;

AUTHID DEFINER is the default PLSQL permission, aka define's rights, check SQL at compile-time. AUTHID CURRENT_USER, aka invoker's rights, check SQL at run-time
CREATE OR REPLACE PACKAGE rion37368 AUTHID DEFINER IS ... -- only on the spec, not body

-- Generate unique random GUID string:
select to_number(sys_guid(), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') from dual

-- Build temporary index if not already existing:
select count(1) into cnt from USER_INDEXES s where s.index_name = 'MY_IX'; if (cnt = 0) then execute immediate 'create index MY_IX on SALES_CRED(Sdm_Business_Key, Deal_Id)'; end if; ... execute immediate 'drop index MY_IX';

-- Insert if not exists already in another table:
insert into bricks_target  select * from bricks_source b2 where NOT exists ( select 1 from bricks_target b1 where b1.brick_id=b2.brick_id )
-- Upsert:
MERGE into target a using ( select id, name, score from source ) b on (a.id=b.id) WHEN MATCHED then update set a.name=b.name, a.score=b.score WHEN NOT MATCHED then insert (a.id, a.name, a.score) values (b.id, b.name, b.score)

-- Full drop:
drop table mytbl cascade constraints purge

/* Check for data existence: */
EXECUTE IMMEDIATE 'select count(*) from accounts ast, site s where ast.site_id=s.site_id and s.site_number=trim(:1)' into cnt_orion using l_curr_site;

-- Run MySQL from command line:
$ mysql -t mydatabase < mysql.sql

-- Postgres variables are created through the \set command but strings need this contortion:  \set dt '\'20180501\''
\set myvariable value
SELECT * FROM :myvariable.table1;

select top 10 * from tbl  -- SQL Server & Access

-- Oracle user defined exception. Oracle ERROR_CODE is an integer in the range -20000..-20999 and message is a character string of at most 2048 bytes:
invalid_emp_dates EXCEPTION; PRAGMA EXCEPTION_INIT(invalid_emp_dates, -20042);
failure_in_forall EXCEPTION; PRAGMA EXCEPTION_INIT (failure_in_forall, -24381);  -- ORA-24381: error(s) in array DML

-- List describe browse Postgres tables in psql:
\d

-- Canonical SQL count function:
COUNT(1)                -- returns the number of rows in a table
COUNT(ColName)          -- returns the number of rows that have a non null value for ColName
COUNT(DISTINCT ColName) -- returns the number of unique values for column ColName (can't use * )
-- Oracle faster but less accurate count function:
SELECT NUM_ROWS FROM ALL_TABLES WHERE TABLE_NAME = 'MYTBL';
SELECT prod_id, APPROX_COUNT_DISTINCT(cust_id) ...

-- Oracle how many rows of data in table:
select max(rownum) from pks_extraction_control

-- Cross database access SQL Server:
select count(*) from [W23PSQL01\Production].bpms_va.dbo.claims_pharmacy

-- INNER JOIN eliminate the rows that *don't* match

-- Built-in scalar date function SQL Server:
SELECT CURRENT_TIMESTAMP

SELECT DATEDIFF (YEAR, '1/1/2002', '1/1/2005')

-- Faster alternative to max() on unindexed table:
select filldate from rxfilldata_201709 where clientid=19 order by 1 desc limit 1 ;

-- Analytic to get person with highest salary by dept, ties broken by length of service:
select distinct deptno, first_value(ename) over ( partition by deptno order by sal desc, hiredate ) as top_oldest_emp, first_value(sal) over ( partition by deptno ) as sal from scott.emp order by 1;
-- Get person with highest salary by dept, ties broken by length of service, using correlated self join subquery:
select deptno, empno top_oldest_emp, sal from scott.emp e where not exists ( select 1 from scott.emp where deptno = e.deptno and (sal > e.sal) or (sal = e.sal and hiredate < e.hiredate)) order by 1;

SELECT TO_CHAR(SYSDATE, 'Q') numeric_quarter_qtr FROM dual
SELECT TO_CHAR(TO_DATE(mydt, 'dd.mm.yyyy'), 'Q') numeric_quarter_qtr FROM mytbl
-- Group by character quarter date:
group by prod_category, to_char(trunc(time_id,'Q'),'MON')

-- Want quarter in which a date falls:
SELECT to_char(TRUNC(DATE '2019-11-20','Q'), 'MON') FROM dual -- OCT

-- Quarter in which date falls.  qtr is all '01-JAN-10', qtrnum is all '1':
create table t1 as select date '2010-01-01'+rownum x, rownum y  from dual connect by level <= 35; select x, TRUNC(x,'Q') qtr, to_char(TRUNC(x,'Q'), 'Q') qtrnum from t1;

-- Modified analytic outer join to get every hr, every room and who reserved it:
select hrs.hr, t1.room, t1.who from bookings t1 partition by (t1.room) right outer join hrs on hrs.hr=t1.hr order by 1,2;

-- Suppress sqlplus SQL output while calculating execution plan cost:
set autotrace traceonly explain
SELECT ename FROM emp;

EXPLAIN PLAN FOR SELECT * FROM emp WHERE sal > 10; select * from table(dbms_xplan.display(null, null, 'typical')); ROLLBACK;
-- Find a previous sql in cache:
select * /* my uniquified qry id */ from foo; select * from v$sql where sql_text = 'my qry id'; select * from table(dbms_xplan.display_cursor('THE ID YOU JUST FOUND');
-- Autotrace:
select /*+ gather_plan_statistics */ * from bricks b join colours c on b.colour=c.colour; select * from table(DBMS_XPLAN.display_cursor(null, format => 'ROWSTATS LAST'));  -- alternatively set this to avoid the hint: ALTER SESSION SET statistics_level = all;
SELECT /*+gather_plan_statistics*/ * FROM emp WHERE sal > 10; select * from table(dbms_xplan.display_cursor(sql_id=>null, format=>'ALLSTATS LAST +cost +bytes +outline +PEEKED_BINDS'));
SELECT SQL_FULLTEXT, SQL_ID, FIRST_LOAD_TIME FROM v$sql WHERE lower(sql_text) like '%fooba%' order by 3 desc;  -- find your query l234kj9afl
select * from table(dbms_xplan.display_cursor('l234kj9afl', format => 'ALLSTATS LAST'));  -- BEST implies ROWSTATS IOSTATS MEMSTATS

select sql_id, child_number, sql_text, sql_fulltext from v$sql where sql_text like '%CUSTOMER%'
-- Have sql_id want running query text:
select sql_id, child_number, sql_text, sql_fulltext from v$sql where sql_id='63ygwpcj2s227';

begin dbms_stats.gather_table_stats('SETARS','SAP_DETAILS');  end;

-- Check for histograms:
select utcs.column_name, utcs.histogram, utcs.num_buckets from user_tables ut join user_tab_col_statistics utcs on ut.table_name = utcs.table_name where ut.table_name = 'BRICKS';
-- Update analyze stats but disable histograms:
exec DBMS_STATS.gather_table_stats(null, 'bricks', method_opt => 'for all columns size 1');
-- If you want to ensure histograms remain disabled:
begin DBMS_STATS.set_table_prefs(null, 'bricks', 'method_opt', 'for all columns size 1'); DBMS_STATS.gather_table_stats(null, 'bricks' ); end;

-- Create update histogram stats statistics manually:
BEGIN DBMS_STATS.gather_table_stats(USER, 'CONTACT_EXTERNAL2', estimate_percent=>100); END; 
SQL> exec DBMS_STATS.gather_table_stats('HR', 'EMPLOYEES', method_opt=>'FOR COLUMNS SIZE 254 JOB_ID');

-- Are table statistics stale? last gather stats is NULL until first exec dbms_stats.gather_table_stats(null, 'bricks'); Both have LAST_ANALYZED column:
select stale_stats from user_tab_statistics where table_name = 'BRICKS'; -- YES or NO
select table_name, last_analyzed from user_tables where table_name = 'BRICKS';
exec DBMS_STATS.gather_SCHEMA_stats(null);

-- Fix unused indexes:
select * from user_indexes where status='UNUSABLE' where index_name='DI_SITE_DATE_DUNS_NBR';
alter index DI_SITE_DATE_DUNS_NBR rebuild ONLINE PARALLEL;
alter index DI_SITE_DATE_DUNS_NBR NOPARALLEL;

-- Split string into pieces chunks 5 chars wide based on length:
select regexp_substr(s, '.{5}', 1, lvl) chunk from (select s, level lvl from (select '00000111112222233333' s from dual) connect by level <= length(s) / 5)
-- Split string into pieces chunks 5 chars wide based on length:
with data as (select '00000111112222233333' s from dual) select substr(s, (level-1)*5+1, 5) chnk from data connect by level <= length(s) / 5
with data as (select '00000111112222233333' s, 5 len from dual) select substr(s, (level-1)*len+1, len) chnk from data connect by level <= length(s)/len
-- Split string into pieces chunks into 2 chunks of 18:
with data as (select '00000111112222233333' s from dual) select substr(s, (level-1)*18+1, 18) chnk from data connect by level <= 2   
-- Split comma-separated list of number to rows:
select split_out_nums from customer_favorites OUTER APPLY json_table( '[' || cf.favorite_list || ']', '$[*]' columns ( split_out_nums number path '$'));

-- Enquote a date with single quotes:
quoteddatestring := chr(39) || to_char(SYSDATE - 1, 'DDMONYY') || chr(39);
SELECT 'select count(*), ' || chr(39) || t.from_table || chr(39) || ' x from ' || t.from_table || ' where ' || t.from_column || ' =  14377280;' FROM ACCT_NAME_ID_FK_MV t;

-- Oracle number data type floating point precision & scale:
NUMBER(3, 2)  -- min -9.99  max 9.99
NUMBER(12, 2)  -- store up to one cent below $10B, $9,999,999,999.99

-- A record is in second and third normal forms 3NF if every field is either part of the key or provides a (single-valued) fact about exactly the whole key and nothing else

-- Oracle wildcard select find "Miss Smelly_bottom", the only toy_name that includes a literal slash overriding SQL/LIKEs idea of the underscore character:
select * from toys where  toy_name like '%\_%' ESCAPE '\';

-- Prove linefeed was appended:
dbms_output.put_line(ASCII(SUBSTR(DBMS_UTILITY.FORMAT_ERROR_STACK, -1))); -- 10 
-- Embedded single quote Oracle q statement:
dbms_output.put_line(q'[single quote has been ok'd here]');

-- Multiple substitutions in one command:
ffColumnPrefix := replace(replace(replace(inFlexTablePrefix, 'ACCOUNT', 'ACCT'), 'ACTIVITY', 'ACT'), 'OPPORTUNITY', 'OPP');

-- Oracle SELECT compare NLSCOMP collation foreign characters:
SELECT custom_property_id FROM custom_property c WHERE convert(c.property_name,'US7ASCII') IN('Počet zamstnanc')  -- find Czech accented char č but not char like á
SELECT custom_property_id FROM custom_property c WHERE c.property_name in('TOP 100 v ČR','Verifikován') OR CONVERT(PROPERTY_NAME,'US7ASCII') in('TOP 100 v ČR','Verifikován')  -- find both TODO better way for 11g?

-- Oracle histogram:
select min(sal), max(sal), rpad('*', count(1), '*') AS Bar, count(1) from ( select sal, ntile(4) over ( order by sal ) as grp from scott.emp ) group by grp order by 1

-- Oracle search which objects are available exists? An ls for db:
select object_name, object_type from user_objects where object_type in ('VIEW','TABLE','PACKAGE','PROCEDURE','FUNCTION') and lower(object_name) like '%acc%' order by 2,1

delete from pks_extraction_control where rowid='AAB5QNACDAAARalAAo';

-- Semi join compared to left join. More efficient using semi but you lose ability to select g.*:
SELECT s.id FROM students s WHERE EXISTS (SELECT 1 FROM grades g WHERE g.student_id = s.id)
SELECT s.id FROM students s LEFT JOIN grades g ON g.student_id = s.id WHERE g.student_id IS NOT NULL

-- Want max highest most recent date using analytic:
SELECT * FROM ( SELECT d.JOB_NAME , d.LOG_DATE, d.STATUS, d.ADDITIONAL_INFO, j.SCHEDULE_NAME ,  row_number() OVER (PARTITION BY trunc(log_date) ORDER BY log_date DESC) rownbr FROM USER_SCHEDULER_JOB_RUN_DETAILS d LEFT JOIN USER_SCHEDULER_JOBS j ON j.JOB_NAME=d.JOB_NAME WHERE d.STATUS != 'SUCCEEDED' AND d.LOG_DATE > (SYSDATE-1)) WHERE rownbr = 1

-- DATE data type in Oracle always includes the time of day. So to guarantee you have all the rows that fall on a given day, you can normalize the date to midnight. Collapse to single day for counting e.g. 01/Aug/07 01:30:08, 01/Aug/07 01:33:08 ...:
select distinct trunc(prod_sel_dt) psd, count(*) from RETAIN.FNSH_PROD group by trunc(prod_sel_dt) 

-- Use the RETURNING clause to retrieve details from an update, within the same context switch used to execute the UPDATE statement:
UPDATE employees SET salary = salary * 1.1 WHERE employee_id = 100 RETURNING last_name, salary INTO emp_rec;
UPDATE employees SET salary = salary * 1.1 WHERE employee_id in(100,200) RETURNING id BULK COLLECT INTO l_mycollection;

PROCEDURE send_cdhub(in_job_action VARCHAR2, in_job_prefix VARCHAR2 DEFAULT 'DELETE_ACCT_', in_start_date DATE DEFAULT SYSDATE + INTERVAL '1' MINUTE) IS ...

-- PLSQL preprocessor version check:
BEGIN $IF dbms_db_version.ver_le_11_2 $THEN dbms_output.put_line('ok') /*RESULT_CACHE*/ $END; END;

select utc1.column_name, utc1.data_default vc_contents from user_tab_cols utc1 where utc1.TABLE_NAME = 'MKC_REVENUE_FULL_HIST' and utc1.VIRTUAL_COLUMN = 'YES';

-- Skip virtual columns:
IF upper(trim(t_cols_tab(i).virtual_column)) = 'YES' THEN CONTINUE; END IF;

CREATE MATERIALIZED VIEW TAXONOMY ON PREBUILT TABLE REFRESH COMPLETE ON DEMAND AS SELECT ...
create table t as select * from dba_objects; create materialized view mv compress basic logging build immediate refresh complete on commit disable query rewrite as select owner from t group by owner;

-- Keep only most recent of the dups duplicates by date using analytic:
select * from ( select d, amt, row_number() OVER (partition by amt order by d DESC) r from v ) where r=1

l_my_oracle_const CONSTANT NUMBER := 42;

-- Commit interval periodic commit every 100 records (poor man's BULK COLLECT FORALL):
FOR rec IN c LOOP UPDATE ref_base reb SET reb.employee_id = 999, reb.updatedby = 0 WHERE reb.reference_id = rec.reference_id; dbms_output.put_line(rec.reference_id); cnt := cnt + 1;  IF (MOD(cnt, 100) = 0) THEN COMMIT; END IF; END LOOP; -- So last group will commit: COMMIT;

-- Table size calculation in MB & GB:
select segment_name table_name, sum(bytes)/(1024*1024) table_size_meg, sum(bytes)/(1024*1024*1024) table_size_gig from user_extents where segment_type='TABLE' /*and tablespace_name= 'ES_NOLOG_01'*/ group by segment_name;

-- Force compile ORA- errors for any PLW- warnings:
ALTER SESSION SET plsql_warnings = 'ERROR:6002' -- upgrade the 'unreachable code' warning
ALTER SESSION SET plsql_warnings = 'ERROR:ALL'
ALTER SESSION SET plsql_warnings = 'ENABLE:ALL';
-- Reduce script failures 60 seconds:
ALTER SESSION SET ddl_lock_timeout=60;  

-- View current value of variable set via alter session:
select * from v$parameter where name = 'optimizer_features_enable';

-- Assume that in 1999 the database displays 01-JAN-11. If Oracle date format uses DD-MON-RR, then 11 specifies 2011, but if YY, then 11 specifies 1911

SELECT to_char(12345.67, '$99,999.99') FROM dual  -- $12,345.67

-- All SQL run in the last 2 months:
select v.SQL_TEXT, v.PARSING_SCHEMA_NAME, v.FIRST_LOAD_TIME, v.DISK_READS, v.ROWS_PROCESSED, v.ELAPSED_TIME, v.service from v$sql v where to_date(v.FIRST_LOAD_TIME,'YYYY-MM-DD hh24:mi:ss')>ADD_MONTHS(trunc(sysdate,'MM'),-2)

select replace('abcdef', 'abc', 'ABC') from dual -- ABCdef
select translate('abc def', 'abcd', '1234') from dual -- 123 4ef
select translate('abcdef', 'abcde', '1234') from dual -- 1234f

-- Create a big disposable dummy sample table for testing:
CREATE TABLE million_rows AS SELECT ROWNUM AS id, RPAD('x',100) AS data FROM dual CONNECT BY ROWNUM < 1000000;  ALTER TABLE million_rows ADD CONSTRAINT million_rows_pk PRIMARY KEY (id);  BEGIN DBMS_STATS.GATHER_TABLE_STATS(USER, 'MILLION_ROWS', estimate_percent=>100); END;

-- Size of source code in bytes:
select SOURCE_SIZE from user_object_size where name in('ACCOUNTSPKG');

-- Implicit single row cursor:
DECLARE l_vc_first_name employees.first_name%type; l_vc_last_name employees.last_name%type; BEGIN SELECT first_name, last_name INTO l_vc_first_name, l_vc_last_name FROM employees WHERE employee_id=120; dbms_output.put_line('Number rows processed per cursor attribute: '||SQL%ROWCOUNT); END;

select count(*) from t -- counts NULLs
select count(mycol) from t -- does not count NULLs
select sum(mycol)/sum(*) from t -- counts NULLs so average will be lower
select avg(mycol) from t -- does not count NULLs

ORDER BY mycol ASC NULLS LAST  -- the Oracle default e.g. 1,2,3,NULL
ORDER BY mycol DESC NULLS FIRST  -- the Oracle descending default

CREATE INDEX TMP_IX ON CONTACT_EXTERNAl2 (created);
CREATE INDEX TMP_IX ON CONTACT_EXTERNAl2 (created DESC);  -- avoid a sort if most queries have "ORDER BY created DESC"
DROP INDEX TMP_IX;

-- Function based index:
create index UPPER_NAMES_FBI_IX on mytbl ( upper(myname) );  -- but only used when exactly matches: e.g. WHERE upper(myname) = 'FOO'

ALTER package SYS.SETARS_SECURITY COMPILE PLSQL_CODE_TYPE=NATIVE;

-- Convert hex from things like SELECT table_name, LOW_VALUE FROM user_tab_columns...:
declare d date; begin dbms_stats.convert_raw_value(hextoraw('505707090E0801'), d); dbms_output.put_line(d); end;

SELECT username, account_status, created, lock_date, expiry_date FROM dba_users WHERE account_status != 'OPEN';
ALTER USER scott ACCOUNT UNLOCK IDENTIFIED BY tiger;

CREATE USER scott IDENTIFIED BY tiger;
GRANT ALL PRIVILEGES TO scott;

select systimestamp, to_char(systimestamp, 'YYYY-MM-DD HH24:MI:SS.FF TZH:TZM') from dual;

-- Database before recent DML changes:
select count(*) from tbl_deleted_from as of TIMESTAMP (systimestamp - interval '15' minute);
-- From your dbms_output  to_char(systimestamp, 'YYYY-MM-DD HH24:MI:SS.FF')  then use it:
select count(*) from mytbl as of TIMESTAMP to_timestamp('2019-08-26 10:10:38.97', 'YYYY-MM-DD HH:MI:SS.FF');

-- 12-11_13:08:19.331048 for unique identification:
SELECT  to_char(systimestamp, 'MM-DD_HH24:MI:SS.FF') FROM dual;

-- Oracle restore table undelete undrop dropped table or index from recyclebin:
drop table t; SELECT * FROM user_recyclebin where lower(original_name) = 't'; FLASHBACK TABLE t TO BEFORE DROP;-- [RENAME TO rescuedog];  -- most recent drop is restored

SELECT sum(((space*8)/1024)/1024) space_gb FROM dba_recyclebin WHERE  owner = 'SETARS';

SELECT * FROM v$parameter where description='PL/SQL compiler warnings settings';

-- When was object last compiled:
SELECT owner, object_name, object_type, status, last_ddl_time FROM dba_objects d WHERE d.object_name like 'RS_ASP%';

-- When 4000 char limit overflows, use a CLOB e.g. one,two,three,four:
SELECT rtrim(xmlagg(XMLELEMENT(e,text,',').EXTRACT('//text()')).GetClobVal(),',') very_long_text FROM (SELECT to_char(to_date(level,'j'), 'jsp') text FROM dual CONNECT BY LEVEL < 5)

-- Display a reasonable amount of text from a CLOB:
SELECT sql_text as only_1k_chars, substr(regexp_replace(sql_fulltext, '\s+', ' '), 1, 3999) FROM v$sql 

select regexp_replace('create_sdm_diff_xxx', 'diff.*', 'diff') from dual; -- create_sdm_diff

-- View a CLOB BLOB:
select dbms_lob.substr(t.SQL_TEXT, 4000, 1) ...
-- Use a CLOB as a criteria:
SELECT count(1) FROM notes WHERE DBMS_LOB.substr(note, 4000, 1) = 'These are US contacts';

--Ignore issues during the 3AM hour specific hour timeframe range:
if (to_char(sysdate, 'HH24MI') not between '0300' and '0400') Then

-- Oracle index NULLs indexed. NULL can be indexed by adding another not nullable column to the index:
CREATE INDEX with_null ON table_name (nullable_column, '1');

-- Lowest plan cost to find names like 'Kochhar' without an index-ignoring leading '%hhar':
create index last_name_reverse_index on employees(REVERSE(last_name)); select employee_id, first_name, last_name, reverse(last_name), salary from employees where reverse(last_name) LIKE 'rahh%';

-- Use BITMAP index if cardinality is low (e.g gender) vs. high (last_name), index is not modified frequently and nulls may exist

-- Selectivity (proportion) = 1 / # of distinct rows. A selectivity of 0.0 means no rows, whereas a value of 1.0 means all rows. A predicate becomes more selective as the value approaches 0.0 and less selective (or more unselective) as the value approaches 1.0.
-- Cardinality (row estimate aka E-Rows) = Selectivity x total rows. For good performance CARDINALITY x LAST_STARTS should be ~ LAST_OUTPUT_ROWS.

CREATE INDEX emp_id_idx ON employees_copy(employee_id) COMPUTE STATISTICS;
-- Shouldn't need this then:
EXEC dbms_stats.gather_table_stats (ownname=>'HR',tabname => 'EMPLOYEES_COPY',CASCADE => TRUE);

ALTER TABLE employees_copy ADD CONSTRAINT unique_emps UNIQUE (employee_id);

select substr(object_name,1,30), object_type from user_objects where object_id = 67638; --CONTACT_FIRSTNAME_LIST_IX
ALTER INDEX CONTACT_FIRSTNAME_LIST_IX REBUILD;
ALTER INDEX CONTACT_FIRSTNAME_LIST_IX rebuild online tablespace SE_01;

ALTER TABLE employees_copy DROP CONSTRAINT unique_emps;

ALTER TABLE employees_copy ADD CONSTRAINT unique_emps UNIQUE (employee_id) USING INDEX emp_id_idx;

-- Regex tester:
SELECT regexp_substr(regexp_replace('from plan_goal_HIST ptgh', '/\*.*\*/', ''), '_HIST\W?') FROM dual;

-- Size of an index:
SELECT BYTES/(1024*1024) mb FROM user_segments WHERE  segment_name = 'SALES_IDX';

-- Clear out old queries (as SYSTEM user):
alter system flush shared_pool; 
select pool,name,bytes from v$sgastat where name='free memory' and pool='shared pool';

CREATE UNIQUE INDEX ASP_DFLT_TSR_OWN_TEAM_TSAT_IX ON ASP_DFLT_TSR_OWN_TEAM(FUTURE_TSR_OWNER_ID,ACCOUNT_TEAM_ID);

-- Declare a sqlplus session bind variable:
SQL> VARIABLE M_DIVISOR NUMBER;
-- Assign a value to session bind variable:
SQL> EXEC :M_DIVISOR := 0;
--Declare the local variable and initialize it with the session bind variable:
SQL> DECLARE L_DIVISOR NUMBER := :M_DIVISOR;
SQL> exec callmyproc(:M_DIVISOR);

-- Created in the last 4 hours:
SELECT * FROM account_team where created>(SYSDATE - INTERVAL '4' hour);

-- Exponential notation:
THEN assign_table(i).new_account_team_assignment_id:=1.257E+993;

EXECUTE IMMEDIATE q'[select 'ASP_TASK_JOB_' || TO_CHAR(sysdate, 'DD_MM__HH24_MI_SS') from dual]' INTO v_job_name;

-- View cached cursor (library cache) from a previous query, if found avoids hard parse and uses existing execution plan:
SELECT * FROM v$open_cursor v where upper(v.sql_text) like '%MYTBL%' and user_name = 'SCOTT'

-- Add sequential row numbers to a table without creating a SEQUENCE:
create or replace view rion_42216 as SELECT o.*, row_number() over (order by contact_id) as rnum FROM rion_42216_base o; 

-- Break table into chunks for processing smaller units (ROWNUM won't work):
create or replace view rion_42216 as SELECT o.contact_id, o.dategone FROM (SELECT o.*, row_number() over (order by contact_id) as rnum FROM rion_42216_base o ) o where rnum between 20001 and 40000;

-- Oracle print with carriage return linefeed:
set serveroutput on size unl; BEGIN DBMS_OUTPUT.ENABLE; DBMS_OUTPUT.PUT_LINE('Hello World' || chr(13) || chr(10)); END; -- then type /
crlf CONSTANT VARCHAR2(2) := CHR(13) || CHR(10);

-- Toggle increase sqlplus buffer to maximum unlimited logging:
dbms_output.disable;
dbms_output.enable(NULL);

-- sqlplus execute script:
$ sqlplus userid/password@hostname @c:/cygwin//home/rheckel/code/misccode/_sqlplusrc.sql -- need an exit; to run standalone

-- whoami sqlplus:
show user

-- sqlplus benchmark show elapsed query time:
set time on; set timing on;

-- Loop poll monitor every 20 seconds a SQL query using a script:
$ while true; do sqlplus -S estars/mypw@mydb @t.sql; sleep 20; done

alias lims='sqlplus sasrepor/sasrepor@sprd25'
alias db6='psql -h db-06.aeb.com AEBMART'

-- Remove multiple spaces with one space Oracle (like COMPBL that doesn't exist):
SELECT REGEXP_REPLACE(text, '\s+', ' ') FROM user_source;

-- Have SID want to know what SQL is running:
select q.sql_text, s.sql_exec_start, state, status, s.sql_id, machine, program, logon_time, s.action from v$session s, v$sql q where s.sql_id=q.sql_id(+) and SID= order by s.sql_exec_start; 
-- Don't have SID want to know what SQL a scheduled job is running:
select distinct 'exec sys.kill_session(' || sid || ',' || serial# || ');' x, q.sql_text, s.sql_exec_start, state, status, s.sql_id, machine, program, logon_time, s.action,osuser from v$session s, v$sql q where s.sql_id=q.sql_id(+) and s.action='MY_PERIODIC_LIFECYCLE_JOB' and sql_exec_start is not null order by s.sql_exec_start; 

ALTER SESSION set NLS_DATE_FORMAT = 'DD-MON-RR HH24:MI:SS'; -- 04-SEP-21 14:11:22
-- Unhide Oracle BC session date problems:
ALTER SESSION set NLS_DATE_FORMAT = 'SYYYY-MM-DD'; -- -4712-01-01
select date '-4712-01-01' lowest_ora_date_possible, date '9999-12-31' highest_future_ora_date_possible from dual;
nvl(next(start_date), DATE '-4712-01-01') <= max(nvl(end_date, DATE '9999-12-31'))  -- Oracle date constants

-- View normally obscured bad BC dates make visible:
SELECT created, updated, to_char(updated,'SYYYY') yr, to_char(updated,'YYYY-MM-DD HH24:MI') FROM CONTAC_HIST where updated < to_date('01JAN1970'); --show BC dates
SELECT TO_CHAR(created,'SYYYY') FROM EVENTS where created < to_date('01JAN1970');

GRANT CREATE PUBLIC SYNONYM TO unit_test_repos
CREATE PUBLIC SYNONYM favorite_list_to_coll_type FOR  bob_pkg.favorite_list_to_coll_type

-- Which packages did i create - uses comments:
select * from SYS.USER_SOURCE t WHERE t.TYPE='PACKAGE BODY' and t.name like 'RION%' AND (upper(t.TEXT) LIKE '%BHECK%');

-- Drag along a VARCHAR2 into a group by using max():
select ms.product_id, max(p.name) as product_name, sum(ms.qty) as total_qty from products p join monthly_sales ms  on ms.product_id = p.id group by ms.product_id;

declare job_num number; begin DBMS_JOB.submit(job_num, 'BEGIN SHADOW_INDEX(''CONTACT_SEARCH_BING_IX'', 1, 0, 1); END;', SYSDATE, NULL); COMMIT; DBMS_OUTPUT.put_line(job_num); end; 

-- Bare test dummy package:
CREATE OR REPLACE PACKAGE zbob AS PROCEDURE test(in_x number); END; / CREATE OR REPLACE PACKAGE BODY zbob AS PROCEDURE test(in_x number) IS l_now DATE := sysdate; BEGIN dbms_output.put_line(in_x || ' ok at ' || l_now); END; END; / exec zbob.test(9);
SELECT * FROM user_jobs WHERE job=8663;

-- What is database's max number of open cursors e.g. 1000:
SELECT p.value as max_open_cur FROM v$parameter p WHERE p.name= 'open_cursors' group by p.value; 
-- Want open cursor count sql_text:
SELECT a.value, s.username, s.sid, s.serial#, s.osuser, s.machine, s.program, s.status, s.state, s.sql_id, s.logon_time FROM v$sesstat a, v$statname b, v$session s WHERE a.statistic# = b.statistic#  AND s.sid=a.sid AND b.name = 'opened cursors current' AND username ='SETARS' order by 1 desc;--1327
SELECT * FROM v$open_cursor WHERE sid=1327;--00000000EE25A3F0
SELECT sql_fulltext FROM v$sql WHERE address='00000000EE25A3F0';

-- When was table created:
SELECT created FROM dba_objects WHERE object_name in('MYTBL') AND owner = 'SETARS' AND object_type = 'TABLE';

-- ACID database transactions - atomic, consistent, isolated, durable

-- Do I have a transaction in progress?:
SELECT XID AS "txn id", XIDUSN AS "undo seg", XIDSLOT AS "slot", XIDSQN AS "seq", STATUS AS "txn status" FROM V$TRANSACTION;

-- Pre-defined collection types to reduce code volume:
l_nums  DBMS_SQL.number_table; l_names  DBMS_SQL.varchar2a;

-- Limit constraint insertable value to 0-99:
CREATE TABLE mysmallnums(n NUMBER(2));

-- BEST: block <- extent <- segment <- tablespace. Each tablespace consists of one or more data files, which conform to the OS. The data is stored in the data files located in each tablespace. A segment can span one or more data files, but it cannot span multiple tablespaces. Oracle automatically allocates the first data files of any database for the SYSTEM tablespace during database creation. The SYSTEM tablespace contains the data dictionary, a set of tables that contains database metadata. Typically, a database also has an undo tablespace and a TEMP tablespace.

-- Default SQL Developer date format:
SELECT TO_CHAR(STARTUP_TIME,'MON-DD-RR HH24:MI:SS')...

-- SQL Developer output formats:
SELECT /*csv*/ * FROM scott.emp; SELECT /*json-formatted*/ * FROM scott.emp; SELECT /*html*/ * FROM scott.emp; SELECT /*delimited*/ * FROM scott.emp; SELECT /*insert*/ * FROM scott.emp; SELECT /*loader*/ * FROM scott.emp; SELECT /*fixed*/ * FROM scott.emp; SELECT /*text*/ * FROM scott.emp;

-- Database uptime
SELECT TO_CHAR(STARTUP_TIME,'MON-DD-RR HH24:MI:SS') AS "Instance Start Time", (startup_time-SYSDATE)*-1 as uptime FROM V$INSTANCE;

-- Oracle which database HOST am i on e.g durax2342:
SELECT SYS_CONTEXT('USERENV', 'SERVER_HOST') FROM DUAL;
IF (SYS_CONTEXT('USERENV', 'DB_NAME') in ('SER', 'SETS')) THEN RETURN; END IF;

-- Oracle which database am i on e.g. SEP:
select SYS_CONTEXT('USERENV', 'DB_NAME') from dual;  --same as SELECT name FROM V$DATABASE;
l_db_name VARCHAR2(20) := SYS_CONTEXT('USERENV', 'DB_NAME');  if (l_db_name IN ('SEPS')) THEN...

-- Oracle which schema am i on current schema name whoami user e.g. SETARS:
select sys_context('USERENV', 'CURRENT_SCHEMA') from dual;
declare x varchar2(99); begin x := 'my schema is ' || USER; dbms_output.put_line(x); end;

-- Oracle which client PC am i are we on client hostname running client whereami e.g. lg01992:
select SYS_CONTEXT('USERENV','HOST') from dual;

-- Use my id if i exist but if i do not exist, use superowner's:
..., actual_updatedby = nvl(sys_context('mystars_context', 'employee_id'), 0)

select sys_context('USERENV','SID') as my_session_id_sid from dual;

-- Capture Oracle userid (note NO SEMICOLON to terminate the SQL):
EXECUTE IMMEDIATE q'[ SELECT sys_context('setars_context', 'employee_id') from dual ]' INTO whoami;

-- What is my current date format:
SELECT value FROM v$nls_parameters WHERE parameter ='NLS_DATE_FORMAT';
SELECT sys_context('USERENV', 'NLS_DATE_FORMAT') from dual; -- DD-MON-RR HH24:MI:SS

select * from dba_context; SELECT cast(sys_context('mycontext', 'actual_employee_id') AS NUMBER) FROM dual;

-- Which Oracle client am i running?:
SELECT DISTINCT s.client_version FROM v$session_connect_info s WHERE s.sid = SYS_CONTEXT('USERENV', 'SID');

-- Which schema/user am i whoami?
select SYS_CONTEXT('USERENV', 'SESSION_USER') from dual;

ALTER TABLE departments DISABLE CONSTRAINT dept_mgr_fk;
ALTER TABLE departments ENABLE CONSTRAINT dept_mgr_fk;

SELECT job_name, job_action, CASE WHEN (state = 'SCHEDULED' AND last_run_duration IS NOT NULL) THEN 'CLEAR' ELSE 'ALERT' END AS status, last_run_duration, cast(sysdate - last_start_date as INTERVAL DAY(9) TO SECOND(6)) AS time_since_last_run, last_start_date, next_run_date FROM USER_SCHEDULER_JOBS WHERE enabled = 'TRUE';

DROP INDEX sp_processing_id_pk;  --fail
ALTER TABLE SP_PROCESSING DROP CONSTRAINT sp_processing_id_pk;  -- success

-- Show the column affected by ORA-02291 constraint:
SELECT column_name FROM user_cons_columns ucc, user_constraints uc WHERE uc.CONSTRAINT_NAME = 'ACCT_TM_ACC_TM_ASSIGN_FK' AND ucc.CONSTRAINT_NAME = uc.CONSTRAINT_NAME;

-- Oracle max length index name 30 char

-- Calculate difference in minutes between 2 DATE columns in a table:
SELECT object_name, extract(second from cast(CREATED as timestamp) - last_ddl_time) + extract(minute from cast(CREATED as timestamp) - last_ddl_time) * 60 + extract(hour from cast(CREATED as timestamp) -  last_ddl_time) * 60 * 60 + extract(day from cast(CREATED as timestamp) - last_ddl_time) * 60 * 60 * 24 AS diff_in_minutes FROM dba_objects;

-- Between two timestamp ranges:
SELECT * FROM t WHERE execute_time >=  TIMESTAMP '2020-08-06 13:01:01' and execute_time <= TIMESTAMP '2020-08-06 14:01:01' ORDER BY execute_time desc;

select /*+ MATERIALIZE PARALLEL(4) */ distinct ax.opportunity_id

SELECT * FROM all_synonyms WHERE table_owner='SETARS' AND table_name like 'RPT_LIF%' ORDER BY table_name;
DROP PUBLIC SYNONYM RPT_LIFECYC;

-- Single quotes uses triples inside dbms_output:
DBMS_OUTPUT.put_line('BEGIN PS_SYNCH.SET_ACTIVE(1, '''|| p_ixtype ||'''); END;'); -- BEGIN PS_SYNCH.SET_ACTIVE(1, 'CONTACT_SEARCH_BING_IX'); END;

rename RPT_CYCLE_MILESTONE_OVERVIEW to RPT_CYCLE_MS_OVERVIEW;
GRANT SELECT ON RPT_CYCLE_MS_OVERVIEW TO scott, hr;
drop PUBLIC SYNONYM RPT_CYCLE_MILESTONE_OVERVIEW;
CREATE OR REPLACE PUBLIC SYNONYM RPT_CYCLE_MS_OVERVIEW FOR ESTARS.RPT_CYCLE_MS_OVERVIEW;

-- Use pseudocolumn for hierarchical query that tells you if the node is at the lowest level without children (is a leaf):
select lpad('* ', (LEVEL-1)*2, '* ') || ename as programmer, CONNECT_BY_ISLEAF as isleaf from emp START WITH mgr is null CONNECT BY mgr = prior empno order SIBLINGS by ename;

-- Want only last year and this year:
AND EXTRACT(YEAR FROM o.close_date) in( EXTRACT(YEAR FROM SYSDATE), EXTRACT(YEAR FROM SYSDATE) + 1 )

-- Last 1 year of data:
extract(YEAR from updated) >= extract(YEAR from SYSDATE) - 1

-- Comparison using column lists and expression lists:
where NOT (gender = 'F' and stage = 'A') and NOT (gender = 'M' and stage = 'B')  -- can get unwieldy
where (gender, stage) != ( ('F', 'A') ) and (gender, stage) != ( ('M', 'B') )  -- innermost parentheses as kind of "record" and outermost parentheses as kind of "array"
where (gender, stage) NOT IN ( ('F', 'A'), ('M', 'B') )
where (gender, stage) != ALL ( ('F', 'A'), ('M', 'B') )
where NOT (gender, stage) = ANY ( ('F', 'A'), ('M', 'B') )

-- SQL USING join syntax if join names are same no prefixes needed:
select employee_id, territory_desc from employee e left join rpt_v t USING(territory_lov_id) where employee_id in(9);

-- Print every 1000 loop:
IF (MOD(i, 1000) = 0) THEN DBMS_OUTPUT.put_line(i || ' id: ' || l_recs(i).id); END IF;

-- List information about each table in a database (SQL Server):
select * from information_schema.tables where  table_type='BASE TABLE' 

-- Double quote each string in a list:
select '''' || x || '''' indexkeys from ( SELECT listagg(column_name, ''',''') within group (order by column_position) x FROM user_ind_columns WHERE index_name = 'KIR_HC_DV_CIX' );

-- Index key list for an index:
SELECT listagg(column_name, ',') within group (order by column_position) x from user_ind_columns WHERE index_name = 'KRB_HC_VP_CIX';

-- Find sequence:
select * from user_sequences where sequence_name like 'UID_%Z%';
select * from SYS.user_sequences where sequence_name like '%EVENT%';

-- Last time index was built rebuilt:
select OBJECT_NAME, timestamp, LAST_DDL_TIME from dba_objects where OBJECT_NAME='KRB_CNTRY_CD_IX';

-- Create function-based index FBI:
create index note_actupd_fbix on note_base ( TRUNC(actual_updated) );

exec dbms_stats.lock_table_stats('table_owner','table_name');
-- Are table stats locked:
SELECT stattype_locked FROM dba_tab_statistics WHERE table_name = 'TABLE_NAME' and owner = 'TABLE_OWNER'; -- 'ALL' is yes

-- Remove trailing comma from a loop built-up list:
v_set_cols := substr(v_set_cols, 1, length(v_set_cols) - 1);

-- All database links:
SELECT DB_LINK, USERNAME, HOST FROM ALL_DB_LINKS 

create database link MKC_IMDBP connect to PAPKMC identified by "XXXXXXXXXXXXXXX" using 'IMDBP';
       
-- Create xml table from a CSV string comma separated string;
CREATE TABLE mytbl AS SELECT to_number(COLUMN_VALUE) account_id FROM xmltable(('"' || REPLACE( '426792,1030348,1030369,1030370', ',', '","') || '"'));

-- Is index being used?:
select index_name, table_name, used from v$object_usage;--null alter index KRB_HC_IN_CIX monitoring usage; select index_name, table_name, used from v$object_usage;--not null

-- Select if any of 3 dates is less than 2018:
where extract(year from(COALESCE("REPORT_DATE_ADJ","REPORT_DATE_SR","REPORT_DATE_F"))) <= 2018

-- PLSQL Developer's right click table 'Add debug information':
alter package asp_pkg compile debug reuse settings;

-- Find queries that users are doing on this view:
select * from SQL_HISTORY_TEXT t where REGEXP_LIKE(t.sql_text, 'SALESNET', 'i');

-- Keep digits from a string only
nvl(regexp_substr(msg, '\d+'),0) as recs

-- Determine index fragmentation - bad if ratio >.10
analyze index sgix validate structure;
select DECODE(LF_ROWS, 0, 0, ROUND((DEL_LF_ROWS/LF_ROWS)*100,2)) RATIO, HEIGHT, LF_BLKS, LF_ROWS FROM INDEX_STATS I;

-- Determine when materialized view last updated
select owner, name, last_refresh, error, status, refresh_mode  from  all_snapshots where owner = 'SETARS' and name like 'RPT_RION_TERR%';

-- Chain of looping synonym error debug:
select * from all_objects where object_name = upper('&object_name'); -- it could be that a SYNONYM exists but no Table
select * from all_synonyms where synonym_name = upper('&synonym_name'); -- otherwise it's the SYNONYM

-- Remove control character whitespace character from string:
select '692329979 ', regexp_replace('692329979 ', '\W$') from dual;

-- Find max length of data in a column:
select max(length('ITEM_PREFIX')) from MKC_REVENUE_ADJ;

-- Character set nvarchar2 etc:
select column_name, CHARACTER_SET_NAME, CHAR_COL_DECL_LENGTH, CHAR_LENGTH, CHAR_USED FROM all_tab_columns WHERE lower(table_name) = 'foo' and char_length >0;

xxDATABASExx END:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:

xxMISCxx START:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: {{{1

:: DOS directory list ls by age, order by oldest last.
dir /p /o:d

:: Short 8.3 DOS names e.g. PROGRA~1
dir /x

' Visual Basic CRLF in decimal.  Octal is 015 and 012.  Hex is 0xD and 0xA.
Chr$(13) & Chr$(10)

Speed of a T1 line is 1.5MB/second.  Speed of a T3 line is 45MB/second.  10Base2  is 10 megabits/sec for 200 meters max cable length.  10BaseT  is 10 megabits/sec over twisted pair.

:: Find your MAC address on W2K (via the network, not the card itself).
> netstat -r
:: Find your W2K MAC address (I think it's directly from the card itself)
> nbtstat -A 47.143.210.171
:: or
> ipconfig /all

:: Connect map drive to a Windows share (cmd not rxvt). MUST BE UNMAPPED TO START.
net use x: \\rtpsawn321\e$ /persistent:yes /user:us1_auth\rsh86800n axhidhamx
:: Cygwin
net use x: '\\rtpsawn321\e$' '/persistent:yes' '/user:us1_auth\rsh86800n' conascent8
:: Disconnect unmap Windows shares (from a DOS prompt):
net use z: /delete /yes
net use * /delete

:: Browse current connections (need single quotes only on Cygwin)
net view '\\emiake'

:: Register a DLL on WinXP
c:\WINDOWS\system32\regsvr32.exe c:\WINDOWS\system32\MSRDO20.DLL

:: Microsoft's /dev/null
> attrib missingfile >nul

The colon ':' in a make Makefile can be read as 'depends on'

HTML email link:
<A HREF="mailto:mutt-users-digest-request@mutt.org?Subject=Subscribe Mutt Users Digest&Body=subscribe">mailme</A>
<A HREF="mailto:bqh0@dcc.gov?Subject=Subscribe">mailme</A>
<a href="mailto:&#98heckel&#64&#97&#116&#116&#46&#110&#101&#116">anti-spam email address</a>
<a href="mailto:&#98heckel&#64&#99&#112&#97&#110&#46&#111&#114&#103">rheckel@cpan.org</a>

<!-- Add an HTML button to go back in history: -->
<INPUT TYPE="button" VALUE="Back" onClick = "javascript:history.back()">
<!-- Go back 2 pages: -->
<INPUT TYPE="button" VALUE="Back" onClick = "javascript:history.go(-2)">

<input type="button" onclick="document.body.bgColor='lavender';" value="Change background color" />

' VB plural vs. singular display:
sPlural = IIf((iFileCnt > 1), "s" & Chr(32), Chr(32))

:: User settings are saved in the Registry here:
HKEY_CURRENT_USER\Software\VB and VBA Program Settings\

:: DOS BAT -- original errorlevel is always 0.  echo %errorlevel%
if c:/foobar exist goto foo_ok ... :foo_ok
:: This BAT test checks to see if the errorlevel return code is 1 OR HIGHER!
if errorlevel 0 goto y_is_available
if [%1] == [] echo 'no args passed to this .BAT'

Prevent other sites displaying your pages inside their frames:
<META HTTP-EQUIV="Window-target" CONTENT="_top">

<!-- HTML comment -->

<!-- Avoid console errors -->
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

<!--Test an httpd Apache installation on localhost:-->
http://localhost/cgi-bin/printenv
http://127.0.0.1/cgi-bin/printenv

RGB hex  FF=100% (white)  CC=80%  99=60%  66=40%  33=20%  00=0% (black)
E.g. #00FF00 is 0% red, 100% green, 0% blue

Byte size increments: mega, giga, tera, peta, exa, zetta, yotta

:: Dial-up connectoids by command line:
rasdial     <---to determine active connection name
rasdial "my connectoid" /d   <---or /disconnect

Hosts file on W2K: /c/WINNT/System32/Drivers/etc/hosts
Well know ports file on W2K: /c/winnt/system32/drivers/etc/SERVICES

<!-- Document may not be indexed, or used to harvest more links. -->
<meta name="ROBOTS" content="NOINDEX" content="1200">

Well known ports search (e.g. FTP is 21) on Unix:
cat /etc/services | grep -e ^http -e ^ftp -e ^ssh|grep tcp

# Start PostgreSQL on Cygwin:
ipc-daemon & postmaster -D ~/pg/data >| ~/pg/data/pg.log 2>&1 &
# Stop PostgreSQL on Cygwin:
pg_ctl -D ~/pg/data stop 
kill -9 [ipc-daemon's pid]

' Does a directory folder exist?
If Dir(c.Value) = "" Then MsgBox c & " not exist"  End If <---FAILS!!!
' OK
If Len(Dir(c.Value, vbDirectory)) = 0 Then MsgBox c.Value & " not exist" Exit Sub

Determine a Windows user's hostname from an IP:
c:> nslookup 158.111.250.165

Pop up new window using only HTML
<A HREF="http://www.dcc.gov" TARGET=_BLANK>Spawn new window

Mozilla cookies:
/c/Documents\ and\ Settings/bqh0/Application\ Data/Mozilla/Profiles/default/

On mainframe a cylinder is just less than 1MB:
Track==56,664 bytes  Cylinder==15 tracks (ie Cylinder==849,960 bytes)

# HFS JCL job submission:
submit 'bqh0.pgm.lib(include)' && for i in 1 2; do sysout -v|tail -1; sleep 7; done

format c: /S     <---also write autoexec.bat, etc.

Access parameter query:
like [Enter Partial Name] & "*" 
like "*" &  [Enter Partial Name] & "*" 

VB Date is 8 byte floating point value.  Integer portion is days since Dec 30,
1899. Fractional portion is pct of day completed.
E.g. 5/22/97 at 3:00pm is 35572.625

Copy cp entire dir from MVS (Z/OS) to HFS (hfsdir must already exist):
cp "//'dwj.vscp.pgmlib'" dwjlib/
Copy single file from MVS (Z/OS) to HFS mainframe.  Mainframe copy cp.
cp "//'BQH0.INC.SASLOG'" ~/tmp/testing/junk.sas && vi ~/tmp/testing/junk.sas
Copy cp single file from HFS to MVS (Z/OS)
cp tryaccess.sas "//'bqh0.pgm.trash(tryacc)'"
FTP navigation on MVS:
cd "//'dwj.util.library'"
FTP deletion on MVS (note fscked up quotes, must be "'... ):
del "'DWJ.FLNAT04.USRES'"

Unpack a normal unix tarball on EBCDIC HFS without tar:
pax -rvkf vim-6.0-rt2.tar -o from=ISO8859-1,to=IBM-1047

Copy and submit a mainframe job via Vim on USS.  Mainframe copy cp.  
Chain two commands in Vim.
:!cp % "//'bqh0.pgm.lib(%:t:r)'" \| :!sub 'bqh0.pgm.lib(tsaaaaq)'

View an MVS mainframe file on HFS side:
cat "//'bqh0.pgm.lib(tsaaaaa)'" | vi -

Refresh fast quickly -- Windows registry.
LOCAL/System/CurrentControlSet/Control/Update/UpdateMode 00 not 01

Fast exit icon c:\windows\rundll32.exe user.exe,ExitWindows

-- ADO/SQLServer connection strings
Provider=OraOLEDB.Oracle.1;Persist Security Info=True;User ID=ods_zeb;Password=pw;Data Source=kuprd61;
Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=sprd1208;Data Source=ezbsamoc07

:: AT command cron for Windows:
at 20:42 /interactive notepad

' Do not prompt user before overwriting:
Application.DisplayAlerts = False

' Debug ASP debugging:
response.write "mfg" & Request("Mfg_Shift") & <br><br>""
response.write "foo" & lstrEntryType
' or outside of code (hidden from user if white):
<font color=white><%= Request.Form("menutype") %></font>
<font color=red> <%= "debug " & Request("menutype") %> </font><br>
<font color=red> <%= "debug " & Session("AdminRole") %> </font>

' Since VB does not have substr(), use this:
MyCheck = "aBBBa" Like "a*a"

<form method="POST" name="foo" action="t.asp?MenuType=Batch Data">

:: abort auto shutdown on WinXP
shutdown.exe -a
:: or 
/cygdrive/c/WINDOWS/system32/shutdown -a

86400 seconds in a day

Windows runs on little-endian platforms

Use gvim to edit source in Firefox:
about:config
search 'edit', toggle the boolean, add the path to the other one 
C:\Program Files\Vim\vim70\gvim.exe

On Error Resume Next  ' VB/ASP execute next line of code following the error

Dim multiple, vars, are, ok, onasingleline

ASP multiple statments on one line
<% x=3 : y=25 : z=x-y : y=x*z : z=x*x-z+y : y=5*3*z*2/x %>

ASP shorthand alternative to Response.Write(Date())
<%= Date() %>

:: DOS wildcard:
c:> echo %random%

Hidden startup executables (not found in Programs:StartUp see also Powershell approach):
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
or under Cygwin:
$ regtool -v list '\machine\SOFTWARE\Microsoft\Windows\CurrentVersion\Run'

:: doskey in DOS == alias in Unix
doskey vi=vim $1

// Source an external JavaScript file:
<script type="text/JavaScript" src="sortable.js"></script>

// CSS import
<link rel="stylesheet" type="text/css" href="crc.css"/> 

// inline CSS inline
<div style="color:orange; font-size:150%; font-weight:bold; padding:10px 1px 1px 50px; border:0px dashed">Loading Data Explorer...</div>
//                  top  right bot left
<div style="padding:40px 500px 1px 80px;"><image src='../PublishingImages/datapost128.png'/></div>
<div style="color:blue; font-family:monospace; font-style:italic; border:2px solid black; background-color:red; border-style:solid; padding:0px 1px 0px 1px;">foo</div>
<style="cursor:pointer; color:blue; font-family:monospace; font-style:italic; border:2px solid black; background-color:red; border-style:solid; padding:0px 1px 0px 1px;position:absolute">

// CSS in HEAD
<style type="text/css"> body { background:fixed #110110 url(../a_Cakka.gif); color:#FFFF99; } </style>

/* CSS id must be unique, class does not need to be unique */
<div id="myid">Content</div> 	#myid {css rules....}
<div class="myclass">Content</div> 	.myclass {css rules...}

<input type="button" value="On" onclick="myfn('msg',1); return false;">

Browser HTML File URL
file:///c:/cygwin/home/rheckel/tmp

' Autorun VBA macro - create empty workbook, add code via Alt-F11, click
' Window : Hide, save as bob.xls in 
' C:\Program Files\Microsoft Office\Office10\XLStart\

' Autorun an Excel VBA macro:
Private Sub Workbook_Open() ...

:: Windows Desktop path:
C:\Documents and Settings\bheck\Desktop
C:\Users\bheck\Desktop

C:\Documents and Settings\bheck\Application Data\SQL Developer
C:\Users\bheck\AppData\Roaming\SQL Developer

# uptime for Windows:
$ systeminfo|grep 'Up T'
eventvwr.msc : Windows logs : System : Actions → Create Custom View : By sources : Kernel-Boot

# Diskspace for Windows:
$ systeminfo | grep 'Total Physical Memory:'

# Hostname for Windows:
$ systeminfo | grep 'Host Name:'

:: Remote restart reboot a Windows workstation:
c:\> shutdown -r -m \\zebwd08D26987
# Remote restart Cygwin version:
$ shutdown -r -m '\\zebwd08D26987'
$ /cygdrive/c/WINDOWS/system32/shutdown -r -m '\\zebwd08D26987'

:: Remote shutdown a Windows workstation:
c:\> shutdown -s -m \\zebwd04480k6c

' VBA
If lastgrp <> r.Value Then ... End If

' Write to a file instead of Immediate Window
fnum = FreeFile   Open "c:\temp\junk" For Output As #fnum   print #fnum "foo" & bar  close #fnum

' Wildcard like SQL
If lastgrp <> "none" And Not r.Value Like "T0*" Then ...

Word Doc equivalent to Ctrl-o in vim: Shift-F5

Points are a typesetter's standard unit of measure. There are 72 points to an inch. So a capital letter in 12 point font is one-sixth of an inch tall.  You can fit 6 of these 12 point letters stacked on top each other in an inch (12x6=72).

' Delete all selected items in a multiselect listbox
Private Sub cmdDeleteListItems_Click() Dim i As Integer For i = List1.ListCount - 1 To 0 Step -1 If List1.Selected(i) Then List1.RemoveItem i Next i End Sub

Vimperator Firefox:
C:\Progra~1\Mozill~1\firefox.exe -vimperator "+c ':h index'"
:dia console <--open error console :emenu <TAB> :h index :mes[sages] :se[t] :se[t] all :pref[erences] :pref! <--open about:config :res[tart] :addo[ns]  (<TAB> for all choices then <TAB> & <Shift><Tab> to navigate) :dia history
Vimperator autoload Windows shortcut Properties target box:
"C:\Program Files\Mozilla Firefox\firefox.exe" -vimperator "+u 'u:\code\misccode\_vimperatorrc'

Windows shortcut Properties target box:
"C:\Program Files\Vim\vim72\gvim.exe" -u u:\.vimrc
"C:\Program Files (x86)\Vim\vim80\gvim.exe" -S C:/Users/bob.heckel/Session.vim
C:\Users\bheck\vim\vim81\gvim.exe -u c:\cygwin64\home\bheck\dotfiles\_vimrc

XML declaration header: <?xml version="1.0" ?> or <?xml version="1.0" encoding="UTF-8"?>

$ telnet locahost http
# or
$ telnet locahost 80
GET / HTTP/1.0
<CR>

:: Count network hops:
c:\> tracert yahoo.com

Windows Task Manager alternative key combination: Ctrl+Shift+Esc 

Open Windows Event Viewer from command line:  eventvwr

<!-- HTML redirect moved forward new address, 0 indicates immediately -->
<meta http-equiv="refresh" content="10; url=https://connect.sgk.com/Pages/Default.aspx">

Windows Task Manager: Ctrl+Shift+Esc 

:: Purge get new network IP address WinXP:
ipconfig /flushdns; ipconfig /release; ipconfig /renew

:: computername, userid, domain, OS version ...
net config workstation

' VB date constant
Dim date1 As Date = #4/10/2008 6:30AM#

=WORKDAY(TODAY(),B17)  ' Excel where B17 is number of business days into the future

' Excel count workdays date range only (e.g. custom format '03-Apr-09 16:00 06-Apr-09 10:30 spans wkend and returns 0.77
=NETWORKDAYS(C2,D2)-1-MOD(C2,1)+MOD(D2,1)
' or total business hours to resolve
=(NETWORKDAYS(C2,D2)-1-MOD(C2,1)+MOD(D2,1))*8

<!-- Clear textbox on entry click -->
<INPUT NAME="the_batch" TYPE="text" VALUE="Enter batch" onClick="javascript:value=''; return false">
<INPUT NAME="mytextbox" TYPE="text" VALUE="Click to begin editing" SIZE=70 onClick="this.value='';return false">

:: Last logon login times
dir "%userprofile%\ntuser.dat.LOG" /ah /s

start /b /min /wait notepad.exe
:: waits for Notepad to exit before starting a new one
start /b notepad.exe

XML namespaces: <xyz xmlns:books="http://www.myco.com/books.dtd" xmlns:paintings="http://www.yourco.com/paintings.xsd">

<xsl:for-each select="Configuration/Extracts/Extract">
<xsl:for-each select="catalog/cd[artist='Bob Dylan']">

<xsl:when test="contains(ExtractID,'dpv1')"><td><div id="dpv1"><xsl:value-of select="ExtractID"/></div></td></xsl:when>

XML transformation/stylesheet linking .XSL(T) (other file) to the .XML doc (this one)
<?xml-stylesheet type="text/xsl" href="DataPost_Configuration.xslt"?>
<?xml-stylesheet type="text/xsl" href="file:///c:/datapost/cfg/DataPost_Configuration.xslt"?>

<xsl:variable name="Str_OutputFilePath">

<!-- DEBUG XSLT 2.0 -->
<xsl:message>!X!<xsl:copy-of select="$addresses"/>!Y!</xsl:message>
<xsl:copy-of select="$DataPostServerURL"/>

<xsl:if test="ExecuteFrequency != 'sunday'">
<xsl:if test="ExtractEnabled &gt; 0 and Folder='LIFT'"> 

Traditional languages: y = f(x); are this XSLT v1.0:
<xsl:variable name="y"><xsl:call-template name="f"><xsl:with-param name="x"/></xsl:call-template></xsl:variable>
XSLT v2.0 (assumes <xsl:function>... somewhere):
<xsl:variable name="y" select="f($x)"/>

:: Run checkdisk check disk on USB drive E: without rebooting:
chkdsk /f e:

:: Check for a parameter passed
if "%1"=="" goto noparms

:: To see logged on users in Windows 2003 - "Computer Management" "Shared Folders" view current open shares and sessions 

:: ^ is DOS cmd line continuation... like a backslash at the end of the line in unix

<div style="font-family:arial; color:blue; text-decoration:underline; font-weight:bold; font-size:200%">Newer approach - HTML using CSS</div>

@font-face { font-family: 'myf'; src: url('PRISTINA.ttf') format('truetype'); font-weight: normal; font-style: normal; }

 /* If only one column is listed, return the value of that column. If all the values of all arguments are missing, return a missing value. */
COALESCE(field1, field2, field3-field5) /* checks the value of each column in the order in which they are listed and returns the first nonmissing value */
COALESCE(field5-field1) 

<script type="text/javascript">document.getElementById('txtCDInfo').innerHTML="new text!";</script>

 /* CSS */
body { background-image:url('../images/DataPost.png'); background-color:grey; background-attachment:fixed; background-repeat:no-repeat; background-position:center; }

:: Delete a Windows XP Service:
c:/> sc delete <the svc name>

Factorial: 6! is 6*5*4*3*2*1

Fibonacci each number is the sum of the preceding two: 0 1 1 2 3 5 8 13 21 ...

OldNew percentage change % before after: To calculate the percentage increase: Subtract the original value from the new value, then divide the result by the original value. 
Disable screensaver lock Windows XP (see also code\misccode\ScreenSaverIsSecure_Make0.reg)
\HKCU\Software\Policies\Microsoft\Windows\ControlPanel\Desktop
ScreenSaverIsSecure 0

:: Windows Explorer shortcut Target box override force tree view:
%windir%\explorer.exe /e,u:\_go

:: WinXP icons
%SystemRoot%\system32\SHELL32.dll

:: Google DNS
nslookup hostname 8.8.8.8  or  nslookup hostname 8.8.4.4
:: OpenDNS
nslookup hostname 208.67.222.222  or  nslookup hostname 208.67.220.220
tracert -d 8.8.8.8

:: Windows - determine what runs at startup etc.
msconfig

# Benchmark a network speed problem
$ time vi -c :q $u/junk

-- Average on every row:
select avg(amt) OVER () grand_avg

runas /User:Administrative_AccountName"mmc %systemroot%\system32\inetsrv\iis.msc"

Check XML file for well formedness errors parse validate:
http://www.w3schools.com/xml/xml_validator.asp

MIME type:
application/xhtml+xml

<!-- HTML5 -->
<!DOCTYPE html>
<html lang="en"> ... </html>

/* Linking to external CSS stylesheet: */
<head><link rel="stylesheet" type="text/css" href="stylesheet.css" /></head>

/* Embedding CSS styles within an html page: */
<style type="text/css"> body { color: #555; font-family: Trebuchet, "Trebuchet MS", "Lucida Grande", "Lucida Sans Unicode", sans-serif; font-size: 85%; margin: 0; padding: 0; } </style>

/* Example of defining style for an entire page: */
body { margin:0; padding:8px 4px 12px 4px; color:#ffbf11; background:#000000 url(images/space.gif); }

:: Win7 enable hibernation
> powercfg /hibernate on

Ctrl-r odbc commandline odbcad32

Remote Desktop C:\WINDOWS\system32\mstsc.exe /admin
Remote Desktop restore full screen from maximized window: Ctr+Alt+Break
Remote Desktop Ctr+Alt+End is Ctr+Alt+Del

:: Delete all files in a directory using .bat
DEL z:\Data_Trending\MDPI\*.* /Q

:: Determine dotnet .NET Framework version - look for e.g. v4.0/:
dir %windir%\Microsoft.NET\Framework\
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\InstallRoot

// Font size attributes CSS
h4 { color:#FFFF99; font-weight:bold; font-size:110%; font-style:italic; width:70%; border:1px dashed #333 }

UNION - match by column POSITION, UNION CORRESPONDING - match by column NAME (safer when using select *), using ALL in either causes dups to not be dropped (rare since records are then ambiguous but useful for stacking datasets like SAS' SET t1 t2)
SELECT foo FROM tblfoo  UNION      SELECT bar FROM tblbar; -- stacks two tables and eliminates dups
SELECT foo FROM tblfoo  UNION ALL  SELECT bar FROM tblbar; -- stacks two tables and keeps dups (rare since records are then ambiguous)

Excel uses exponentiation e.g. 1E+13 for large numbers - avoid by Format Cells : Custom : Enter "#" in Type field

:: Find DNS info for a site (or IP)
nslookup zdatapost.sgk.com

:: Find which version of the hell that is Java that are you running (suffering from):
c:\> C:\ProgramData\Oracle\Java\javapath\java -fullversion
C:\Users\bheck\Oracle\sqldeveloper\jdk\jre\bin -version

-- Oracle concatenation
select column_name, data_type || '(' || data_length || ')' as fancy_type

:: Which Windows files are open on server?:
psfile '\\okpsawn557' -u uxx1903 -p uxx06tes
:: Force Windows unlock open file closed (stupid reverse paramter required for closing a file):
$ psfile '\\rtpaswn321' -u uxx1903 -p uxx06tes 25060 -c

xmllint --noout Bookstore-DTD.xml
xmllint -schema Bookstore.xsd --noout Bookstore-XSD.xml
au BufRead *.xml map <F3> :silent 1,$!xmllint --format --recover - 2>/dev/null

Ubuntu purple color hex: #290020  RGB: 41 00 32
Ubuntu brown color hex: #965224  or RGB: 150 82 36

Pretty print indent XML
xmllint --format t.xml

<div id="divTestArea3" style="width:50px; height:50px; display:none; background-color:#89BC38;"></div>

<a href="javascript:void(0);" onclick="alert('Hello, world!');">Test</a>

Windows work gvim GUI Target: icon:
"C:\Program Files\Vim\vim73\gvim.exe" -u u:\code\misccode\_vimrc
or better just point to your .vimrc using D:\Program Files (x86)\Vim\_vimrc:  source d:/cygwin64/home/bob.heckel/dotfiles/_vimrc

Windows commandline CPU monitor (must do locally, can't do it remotely with /U /P /S like systeminfo)
c:\> wmic cpu get loadpercentage

cygcheck -cv w3m  # is package OK?

# git mantra:
git add . && git commit -m'mod' && git push

#                      git add           git commit              git push
# UNTRACKED/UNSTAGED -----------> STAGED ----------> LOCAL REPO -------------> REMOTE REPO

git config user.name  # whoami
git config -l  # list all config settings
git config --local -e  # edit in vi
git config --global -e  # edit in vi
git config --global merge.tool vimdiff

git stash --include-untracked -m 'mynamedstash'
git stash list

# git show the changes recorded in the stash entry as a diff between the stashed contents and the commit back when the stash entry was first created:
git stash show
git stash show -p 0  # details for specific stash index

# Remove a single stashed state from the stash list and apply it on top of the current working tree state. When no <stash> is given, stash@{0} is assumed, otherwise <stash> must be a reference of the form stash@{<revision>}. Applying the state can fail with conflicts; in this case, it is not removed from the stash list. You need to resolve the conflicts by hand and call git stash drop manually afterwards:
git stash pop
# or if >1 exist
git stash apply stash@{1}  # or git stash apply 1
git stash drop 1  # if you have stash@{0} and stash@{1} only delete stash 1
# Delete ALL stashes:
git stash clear 
# git snapshot ...
git stash --include-untracked -m'mynamedstash' && git stash apply
# If the apply tries to modify a file that you've since modified, you'll get a merge conflict and will have to try to resolve it. This creates a new branch for you, checks out the commit you were on when you stashed your work, reapplies your work there, and then drops the stash if it applies successfully:
git stash branch teststashbranch

git log --pretty=oneline
git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short
git log --since="3 months ago" --pretty=format:"%Cblue%h %ar |%Cgreen %s%Cblue %d [%an]" --graph --date=short
# git show only the files edited affected by commits on this branch:
git log --name-only --date=short

# git create new then checkout branch:
git branch mynewbranch; git checkout mynewbranch
git checkout -b mynewbranch  # faster
# Rename branch local (current) branch:
git branch -m mynewbranchname
git branch mynewbranch master  # copy branch from a specific branch, in this case master, to new branch

# git poke around list show all git remotes. Which branches are tracking which remote/upstream branches (prune is optional):
git fetch -p && git remote show origin
# git poke around
git status; git log; git branch -a; git remote -v;
# List hash and last description of local and remotes branches:
git branch -v -a
# ls for git list which files are tracked under git source control not just staged:
git ls-files 

# git revert abandon discard throw away trash abandon changes NOT STAGED for commit:
git checkout -- DataPost_Configuration.map  # can also try  git checkout .  for >1 file 'not staged for commit'
# git unstage a bad staged file "Changes to be committed" i.e. revert last 'git add' back to the working area:
git reset [HEAD] Daily_data_maintenance.pck
# git revert abandon discard throw away trash abandon changes i.e. undo your last commit, but also unstage everything i.e. roll back to before you ran all your git add and git commit commands:
git reset [--mixed] HEAD^ 
# git revert discard throw away trash abandon a pull - not WD safe!:
git reset --hard ORIG_HEAD; git gc;
# git abandon discard throw away trash abandon a merge collision (remove conflict markers "master|MERGING" from the file but you still have merge conflicts when you do git pull next time):
git merge --abort  # or git reset --merge
# git error "CONFLICT (content): Merge conflict in"... collision:
git mergetool  # <C-W => in vim if windows are collapsed
# git use the other guy's commit on collision:
git reset --merge 2e40a3
# git discard throw away trash abandon all commits after commit c4c9473 and bring changed code AFTER that back into the working area and leave your INDEX alone. You could now git add and git commit again to accomplish what git commit --amend would have done:
git reset --soft c4c9473
# git discard throw away trash abandon all commits after commit c4c9473 and bring changed code AFTER that back into the working area:
git reset c4c9473
# git disaster discard throw away trash abandon all commits (or staged files) after the previous commit and reset files to that older/good commit (ignoring any untrackeds!). Make the working directory look like the index - not WD safe!:
git reset --hard HEAD^  # or git reset --hard HEAD~1 for DOS  or git reset --hard c4c9473 if it's not the previous you want to go back to but rather a specific commit
# git undo discard bad accidental stash pop SP_PROCESSING.pck and MYUNTRACKED.txt 2020
git reset HEAD . && git restore SP_PKG.pck && rm MYUNTRACKED.txt

# Merge a feature branch:
git checkout develop && git pull && git merge feature/RION-31587 && git push
# Merge a feature branch - manual pull request completion ready to merge without using Github UI merge & delete branch buttons:
git checkout develop && git pull && git merge --no-ff feature/RION-31587 && git push && git branch -d feature/RION-31587 && git fetch -p && git push origin --delete feature/RION-31587
# Merge a feature branch - manual pull request completion ready to merge without using Github UI merge & delete branch buttons - collision version:
git checkout develop && git pull && git merge --no-ff feature/RION-31587 && rmv myfile.orig && git commit -m'resolved collision' && git push && git branch -d feature/RION-31587 && git fetch -p && git push origin --delete feature/RION-31587

# git branch has collision conflicts that must be resolved:
git fetch origin && git checkout -b feature/RION-999 origin/feature/RION-999 && git merge develop  # then git mergetool, use github to squash, then delete local branch
git checkout develop && git pull && git checkout feature/RION-999 && git merge develop  # then git mergetool, use github to squash, then delete local branch

# git edit modify rewrite previous existing git commit message:
git commit --amend -m 'change your previous, last, wrong, commit message to this'

# git list branch dates sorted descending
git for-each-ref --sort=-committerdate refs/heads/ --format="%(committerdate:short) %(authorname) %(refname:short)"

# git diff with last commit:
git show
# git view show previous old version of file the past (in pager):
git show eacbd91:./ods_0002e.sas
# git view previous old version of file from the past history (in editor):
git show master:cfg/DataPost_Configuration.html |vi -

# git diff view your changes before committing. "Changes not staged for commit" (your pre-committed change), same as  $ git difftool HEAD:
git difftool
# git diff see what changes you will be pushing, d277a94 is the previous commit, not your recently committed one(s):
git difftool d277a94
# git diff see what changes you will be committing INCLUDING PREVIOUS COMMIT (HEAD^ is the parent of the current head commit):
git difftool HEAD^
# git diff compare commits:
git difftool 3a93bc3 1fb24fe
# git diff compare a file in working directory (modified but not checked in) to last checked in version:
git difftool SET_MATCH_CODE.prc
# git diff compare a file from another branch across branches:
git difftool master SET_MATCH_CODE.prc
# git diff compare old version of file from different commit - current (hash-less) filename must come 2nd!!:
git difftool 1908af7:./PTG.pck PTG.pck

# git force file to staging even if it's excluded by .gitignore:
git add -f ignoreme.txt

# github remove whitespace trash from github diff webpage: https://github.com/ion/data/compare/feature/RION-39172?w=1

# github commit mantra (github is origin we PUSH TO origin FROM master), update index and HEAD:
git add . && git commit -m 'mod' && git push origin master

# git new install bare box setup want clone an existing github repo to a new foreign server (AKA origin, a bookmark) which will be called origin/master locally, plus you'll get your own local master branch starting at the same place as origin’s master branch, so you have something to work from:
ssh-keygen; # then  cat ~/.ssh/id_rsa.pub  # copy it to https://github.com/settings/keys
# PULL FROM origin to master & PUSH TO origin FROM master:
git clone git@github.com:bheckel/dotfiles.git && git config --global user.name "Bob Heckel" && git config --global user.email rsh@rshdev.com # ...edit/add/commit... then  git pull origin master && git push origin master
# may be required for older git versions:
git remote add origin git@github.com:bheckel/dotfiles.git
# But need this instead of remote add if your clone was git clone git://github.com/bheckel/misc.git
git remote set-url origin git@github.com:bheckel/dotfiles.git
# if 'you cant push':
git config --local -e
# or vi ~/dotfiles/.git/config then edit to: url = git@github.com:bheckel/dotfiles.git

# git delete cleanup post-PR local branch and prune remote branches (after using GitHub UI delete branch button):
git branch -d feature/RION-31587 && git fetch -p && git branch -a
# git delete cleanup branch local then remote (without using GitHub UI delete branch button). First make sure your remote is there: git branch -a:
git branch -d feature/RION-31587 && git push origin --delete feature/RION-31587 && git fetch -p && git branch -a

# github undo commit of a file >50M:
git filter-branch --tree-filter 'rm -rf 02-White-Noise-60min.mp3' HEAD && git push && git pull

# git view history of a file (--follow even if filename has changed, --all branches, -p all patches):
gitk --follow --all -p SUP_HAS_ACTIVE_SITES.fnc

# git view revision and author last modified history for each line of a file, it does not tell you anything about lines which have been deleted or replaced:
git blame SUP_HAS_ACTIVE_SITES.fnc

# git remove delete untracked files:
git clean --dry-run

# git update refresh a feature branch to catch-up to after release night (may want to stash any feature changes first):
git checkout develop && git fetch -p origin && git merge origin/develop && git checkout myfeaturebranch && git merge develop && git push

# Set remote tracking branch. Assumes push.default=upstream.  Later, since you’re on a tracking branch and you git pull, Git automatically knows which server to fetch from and which branch to merge in:
git checkout -b feature/RION-9999 && git push --set-upstream origin feature/RION-9999  # "Branch 'feature/RION-9999' set up to track remote branch 'feature/RION-9999' from 'origin'."

# git squash together all commits after d3fbfd5 (the one I didn't touch). Leave the first entry (oldest commit) alone as 'pick', set others to 's[quash]', next screen lets you edit the message, doing nothing uses all old messages, wipe and type for a new one:
git rebase --interactive d3fbfd5

# git show last touches and authors for all remote branches:
for branch in `git branch -r | grep -v HEAD`;do echo -e `git show --format="%ci %cr\t%an\t" $branch | head -n 1` \\t$branch; done | sort -r

<!-- Predefined HTML character entities -->
&lt; &gt; &quot; &amp; &apos;  &#169; or &#xA9 is copyright symbol ©

<ExtractString><![CDATA[ protected stuff goes here...  ]]></ExtractString>

private static final String[] items={"java", "strings", "in", "array"};

Canonical test lorem ipsum test dummy sample debug string:
"lorem", "ipsum", "dolor", "sit", "amet", "consectetuer", "adipiscing", "elit", "morbi", "vel", "ligula", "vitae", "arcu", "aliquet", "mollis", "etiam", "vel", "erat", "placerat", "ante", "porttitor", "sodales", "pellentesque", "augue", "purus"
Lorem ipsum dolor sit amet consectetuer adipiscing elit.

ISO 8601 date format (UTC)
2008-08-30T01:45:36.123Z

// JQuery debug print
console.log("the_form.cbo.value=%o", the_form.cbo.value);
var foo="hello"; var bar="world"; console.log(foo + " " + bar);

// JQuery chainable
$('.myclass').css('background','red'}).height(100);

:: Which version of Windows are you running?: c:\> ver

 /* Javascript object */
:javas var jedi={ name: "Yoda",age: 899,talk: function(){alert("foo");} };
 /* Javascript object usage */
:javas alert(jedi.age)
:javas jedi.talk()

 /* Javascript concatenation */
strcat = '<a href=http://www.dhammawheel.com/viewtopic.php?f=20&t=>' + rnd2 + '</a>';

ISO 8601 date time format: 2013-04-27T18:00:00-05:00  2013-04-27T18:00:00,1-05:00

# Modulo finds the remainder of division of one number by another:
11 % 3 = 2 because 3 goes into 11 three times with a remainder of 2.
15 % 3 = 0

There are two cscript.exe in the 64-bit OSes. One is located at
%WINDOWS%\System32, other one is located at %WINDOWS%\SysWOW64.  The one under
System32, is a 64-bit version. The one under SysWOW64 is the 32-bit version.

" VBA concatenation:
Obj_ADOTrns.ConnectionString = Wscript.Arguments(0) & "_ADO_" & Wscript.Arguments(1) & ".con"

// Java concatenation
System.out.println("Hello " + name);
System.out.println("Return".concat(" of").concat(" the king."));

// Java array
int[] array = new int[5] { 1, 2, 3, 4, 5 };

:: Win7 Administrator cmd.exe command prompt:
Run : type cmd : Ctrl-Shift-Enter
:: Win7 Administrator Cygwin/vim:
Run : C:\cygwin64\bin\mintty.exe : Ctrl-Shift-Enter

# mintty taskbar properties
C:\cygwin64\bin\mintty.exe -i /Cygwin-Terminal.ico -

mintty.exe -i /Cygwin-Terminal.ico -p 0,30 -s 312,75 -e ssh -l bheckel sas-01.twa.taeb.com &
mintty.exe -i /Cygwin-Terminal.ico -p right -s maxheight -e ssh -l bheckel sas-01.twa.taeb.com

:: Cygwin SendTo Properties open with:
C:\cygwin64\bin\mintty.exe -e c:\cygwin64\bin\vim

:: Win7 slow network debug (as Administrator):
netsh interface tcp show global
netsh interface tcp set global autotuning=disabled
:: restore
netsh interface tcp set global autotuninglevel=normal

:: 05-Jun-20 reset VPN etc (as Administrator):
netsh winsock reset

:: Force delete remove rm Windows hidden file that Cygwin can't rm:
u:\misc> del /A:H Thumbs.db

<iframe src="https://zdatapostd.sgk.com/datapostDEMO/DataPost_Results.html" width="850px" height="10000px" frameborder="0"> <p>Your browser does not support iframes.</p></iframe>

<!--  «  a left-pointing double angle html entity -->
&#171;

<!-- xslt if AND -->
<xsl:if test="ExtractEnabled &gt; 0 and Folder='LIFT'"> 
<!-- xslt if AND LIKE -->
<xsl:if test="TrendEnabled &gt; 0 and contains(TrendDescription, 'HFA')"> 

# Edit a Windows file using UNC path under Cygwin
vi '\\okpsawn557\d$\oracle\ora81\network\ADMIN\Tnsnames.ora'

' Excel: B11 holds a code you dont understand, A2:B4 is the lookup "table" whose 1st col contains B11, its 2nd col contains the lookup value to put in the current cell. "2" indicates the table lookup value is in the 2nd column. FALSE=not sorted.
=VLOOKUP(B11, A2:B4, 2, FALSE)

' Excel difference in cell values:
=IF(A6<>BD6, "yes", "no")

-- Activate blank Windows screensaver from a .bat:
start %windir%\system32\scrnsave.scr -s

-- Windows System Information Tool
msinfo32

-- Comma separated column
select string_agg(distinct taebpatientid::varchar,',') from cce.ccepatientstaging where clientid=22;

' Excel multiply two columns and produce a scalar:
=SUMPRODUCT(O37:O38,P37:P38)
' Excel weighted average (patient count in C, lift % in col F):
=SUMPRODUCT(F7:F23,C7:C23)/SUM(C7:C23)

-- Hadoop shell ls equivalent:
hdfs dfs -ls /tmp/.pigscripts/riskfactorpig-2017-02-15_07-56.pig

-- De Morgan's logic AND OR law:
!(x & y) is equivalent to !x | !y
!(x | y) is equivalent to !x & !y

# R is value missing?:
is.na(x)

# R char to ascii:
> charToRaw('hello')
[1] 68 65 6c 6c 6f

# Compute rate per 10,000 
df %>% mutate(rate = cases / population * 10000)

# R flights per day count:
library(nycflights13)
by_day <- flights %>% count(day)

# R regex how many don't start with 'b':
library(stringr); x <- c("apple","banana","pear"); sum(!str_detect(x, "^b"));

-- Remote Desktop multiple monitors:
%windir%\system32\mstsc.exe /span

<!-- White on gray HTML page -->
<body bgcolor="#cccccc" text="#000000">

// JavaScript convert decimal to hex or binary
let num = 255; alert( num.toString(16) );  // ff
let num = 255; alert( num.toString(2) );   // 11111111

// JavaScript precision rounding IEEE-754
alert( 0.1.toFixed(20) ); // 0.10000000000000000555
alert( 6.35.toFixed(20) ); // 6.34999999999999964473
alert( (6.35 * 10).toFixed(20) ); // 63.50000000000000000000
alert( Math.round(6.35 * 10) / 10); // 6.35 -> 63.5 -> 64(rounded) -> 6.4

Double arrows unicode « »

:: Send To folder c:\temp
%APPDATA%\Microsoft\Windows\SendTo

/* Sample JSON: */
{ "Film": "Schema Wars Episode 1: The Unstructured Menance", "ReleaseYear": 2016, "Genre": "SQL Sci-fi", "Actors": [ "Chris Saxon", "Andre Williams", "Robin Williams", "PJ Tamayo" ] }

curl -o ~/tmp/breaching_whale.jpg -OL https://cdn.learnenough.com/breaching_whale.jpg

curl https://api.github.com/users/bheckel
curl -d '{"key1":"value1", "key2":"value2"}' -H "Content-Type: application/json" -X POST http://localhost:3000/data

# Calculate mirror size 4884 1.0123+10 is 10GB in 4884 files
curl -s ftp://mirror.cs.vt.edu/pub/cygwin/cygwin/x86/setup.ini | awk '/^install: / { T = T + $3 ; N++ }; END { print N, T }'

# Avoid cloning a repo if you only need read only:
w3m https://github.com/bheckel/code/blob/master/rme/

# Markdown URL:
[Minion](http://octodex.github.com/images/minion.png)

O(log n) the same amount of work to access any value, like a B-tree index

Remove all event listeners: $("*").off();
Remove all right-click listeners: $("*").off("contextmenu");

# Prevent Win10 blurry video resolution or too large font apps: Right click on gVim icon -> Properties -> Compatibility -> Change high DPI settings -> check box "Override high DPI scaling behavior" in the bottom of the dialog window and set "Scaling performed by:" to "System (Enhanced)"

# Open Chromebook ChromeOS crosh Ctrl+Alt+T. Exit Ctrl+D
crosh> help_advanced
crosh> vmc stop termina  # allows to force close the whole Linux container

This file 'oneliners' is Copyright © 2021 Bob Heckel b dot heckel at gmail dot com

xxMISCxx END:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:
